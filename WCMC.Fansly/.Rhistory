9.44			2308	1503	2416	2730	2619	2593	1710			2717		1937				4185			685	3089		5068	4893	4232				5850	684	6173			5207	4837
9.47	4170					2641	2917	2164	2100	2076	5028			3147	4980		5486		9864			7471	7770	9350		9557	8153		8677					12320	8608
9.50	16675	1549	18651	1789	14409	1615	1478	2416	2622	1381	12046	2303	19870	9934	26068	26015	3907	9479	8604	15069	15144	13856	7872	7826	15676	8377	8023	6838	8398	12690	7946	5938	6173	5417	3966	5461
9.50	2809		3782		2418	2031	1805	1986	1568								4458	5426		5594	6344			5842	5691	7146		6509						9713	6353
9.51			3593	2663	2551		2136	2705	2511	2385	3472												4436	5911	3036				5298		8456				6634
9.53		1678		1077	1413	1103				1249	2992	1929	2134		2283	3092	3119			4192	4227		3321		4303		4069	883	4259	7019	4965	5117	3900		3874	4229
9.54	4030	2583	6468	2575	2711	2475	2351	3431	2007	3573	4172	4974	3677	2427	5929		5188	4821	5392	6483	6674	5544	3838	5790	8302	6477	5550	4509	6781	8125	5865	4621	5806	2967		5780
9.59		4650	7620					5243	4559								8738					8683			8874	8805		8027	8896		10282
9.59	7200	5543		2765	828	2313		5056			6907		7441	4725		8865		9571		9352		9646	8786		11304	10175	8827		918				7735			6846
9.60						1543		2848						2033						4880	5170	3835	3293			4191	3177					3804	3710	4274
9.63																									9696				3770
9.65	1544		4178	2499	1702	2830	1545	2152	1958	401	2429	2839	3166	1507		444	833	5617		3811	4188	4757	1477	6686	2876	2039	3525	3167	4553	6033	3760	6526	5167	11101	5706
9.70	836	5550	7428	3377	5286	5468	5127	6706	1388	5161	1229	783	6945	870	7049	8269	9253	1611	665	8133	871	1325	551	1198	7838	1247	5601	6005	5535	1593	6513	4689	4911	5152	3947	994
9.74	1354	433	1724	1659	1009	1576	448	649	1652	1271	1281	1835	1120	814	2393	1981	1643	551	2060	1961	938	2179	1649	5881	2932	7687	4642	4260	5240	6029	8143	15535	15070	14525	10947	19048
9.74	1432	1024	673	1886	1060	1702	1069	1649	521	1773	1932	2284	1588	995	3759	3072	2719	2191	2774	2449	2226	2303	2056	3859	3578	5932	2994	2956	4699	4429	1054	8600	8961	8306	6147	10229
9.76	1665	1225	2067		1130	1019	1116				1679	1106	1447	866	2087	1343		2581	2931	2645	3134	2270	2756	4765	4018	4964	3717	4049	4425	5795	6931	9637	7901	10135	9000	9218
9.76	3282	600	3988	3478	3063	3160	3434	3828	3652	3175	2894	3924	3726	2419	4624	5278	5530	2937	1482	4671	4167	3689	2410	2623	4523	3287	2471	2788	3055	5098	659	2389	2242	2443	1627	1985
9.77	23467	25070	23342	19493	22575	30502	550	21995	2537	17056	18723	2040	997	303	22607	24873	33681	24494	24739	26032	32622	977	2193	21140	23118	546	964	1458	20292	1254	29647	30360	20705	2310	2235	19501
9.80	3589	4046		3229	4253	3532	3397	4296	3576	3772	3763	3599	4598	2752	5039	4955			4368	5178	5037		3602	3034	4747	4531	3705	3847	3826	6618	4435	4363	3188	4430	2075	3379
9.88	3706	29952	32944	42586	25132	43650	29610	39810	37956	35854	26236	38473	34774	18271	47043	47246	43695	22199	23270	32584	31989	30318	18792	20295	34696	3263	21570	20186	23583	31989	19750	17335	19855	18987	13244	19111
9.88																		3166															7742
10.08	387	3054	2319	3974	2572	4457	3073	3834	3557	3317	1527	3683	1995	1863	5186	1048	4687	3071	3447	4151	3933	768	769	4006	3193	2895	3295	410	4411	6040	1040	5003	5291	5026	3713	5150
10.09	1305	507	1801	1004	673	1104	708	651	783	781	790	812	1202	707	2072	1952	1420	1062	1771	1777	1700	1328	3162	6296	5572	7722	4324	3647	5180	5301	7005	11870	12276	12706	8537	13434
10.10	2429	1527	3950	1960	1480	2071	480	2401	2215	2231	2444	800	2461	399	5200	1200	799	2945	3851	497	3472	3260	3220	1199	6789	10305	5120	4092	6382	6892	9161	14456	16084	3368	10064	1938
10.10	1649	1464	1635	1338	915	1396	4721	1822	1243	1204	1037	1017	921	731	6963	1131	2777	1577	6374	1270	1902	5202	5861	7836	7553	9025	6139	6435	6592	9415	11937	20857	14174	26147	16641	14774
10.12	3299	4091		3847	3184	5031		4594	4537	3774	2989	3658	3804		4916	4297	5611	3244	2938	4009	4746	3912	2100		4390	2784				4115	2271	2727	2396		1566	1993
10.12				7024	3688			6974	6011		4072				7857	7110	8265	3959	3518			5125	3069	4163			4102	3684	4999				4446		2461
10.13	1963	337	5560	2838	2249	2979	2405	2740	2350	284	2447	2989	3725	2103	893	2752	1235	5727	750	3858	4160	4730	1432	6686	3105	1694	3178	3256	4026	5163	3288	5242	4401	8597	4356	545
10.13	2561	715	7382	3399	3045	4572	3400	3822	3086		3301	3727	4501	2790		3475	2526	8044		5640	5132	6851	1899	9647	3838	1963	3968	4130	5278	7368	4977	6754	5172	12942	6212
10.18		3218	4392	3601		3489	3255	3346	3636	3115	3081		3853	2161	3981	4951	6121	3376		3988		3370	2873	2804						3838	3619	3636	3003	3134	1589
10.25	3724	3294	4234	1286	3465	2059	3376	3085			2756	2824	4078	3057	689	4497	5144	4339	4325	4457	70	4234	4148	4216	5069	5335	4145	4069		6267	4394		3889		3465	4356
10.36	4333	4168	4699	3874	623	4999	3795	4209		3320	3571	3658	4106	2588	5190	5523	5939	4170	977	4702	5008	3983			4520	4485	3540	3760			3977			3450	2914
10.46	3004	2951		4281	3197	5110	3276		3713	2803			3011		4020	4683	4223		3410	3645		3475	3391						2966					2904	1915
10.46	2827	994	4709	908	1029	928	959	1362	894	1293	2866	1575	1402	1019	6565	7907	2125	2852	3852	1951	3824	1547	3242	7629	7797	10132	4704	4086	5851	7960	8975	12777	14992	14254	9842	15129
10.46	4275	3185	7888	1567	3815	932	4024	2415	1845	3374	1967	5031	4941	3620	10705	15192	6616	5103	7132	5547	5822	4320	7153	15824	16275	21700	10156	7937	12198	15114	19095	32328	39829	32983	21872	39740
10.46	3209	2287	5786	848	2395	2055	2702	2659	2688	3174	2656	4196	3509	2105	8265	9241	4800	3097	4370	3858	4038	3226	4895	9453	9736	11732	6103	4898	7258	8892	9588	15152	17724	15975	11469	18019
10.51	2547		4284	2635	3247	3583	3431	2829	2306		2605	2873	3826	2398	1387	3576	1891	4691	1150	3737	4599	3631	1514	5995	3787	1483	3117	3578	3503	5731	3886	5459	3883	8232	5002	612
10.52	1785		4620	2237	2219	3538	2624	2615	1916		2181	3000	3224	2044		3383		4496		3072	3321	4007		5847	2918		2556	2681	2953	5210	3201	5063	3848	9083	4492
10.65	2304	2873	3506	1742	2871		3314				2012			3047	5006	5417	5041		3675		5359	2995		4722	4518	4870	3517	3273	3096	5810	4549	4396	4325	5718
10.66	3228	2936	3882	2210	3298		3605	3264	2894	2946	2371	3168	3778	2665	4823	5982	5293	4115	4107	3829	4357	3057	3633	4279	4829	4675	3677	3851	3959	5764	4812	5392	4942	5521	3683	4942
10.79		3440	4100				3458		4179			4152					5942						3062	2883					3964			2999
10.84	3226	2895	5688	2166	1735	2274	3059	1885	1664	502	1461	4607	4517	3064	7644	17020	5425	1567	1915	1767	550	736	4596	6696	8785	8220	4065	3352	4045	7472	6903	11929	18058	15912	10294	14712
10.89	3949	3580								2423						7448					4168	2081	2707	2693	5433	5021				6315		4865	5071		3784	5344
10.89	31600	2849	44707	53331	24812	8528	28296	47532	12513	5456	32650	50595	44113	18251	69185	2669	6808	28641	32110	5518	38393	39159	25727	3504	6737	49576	35228	28919	42737	49943	2035	3044	6430	49070	7292	7443
10.99		3148		2869	3736		4292	4694	404				4692	3532		6739	5876				5025									5326			5926
11.04	3900			3351	4333	4445		4172			3019		4385		5712	7458	838	4040	3825	3803	6036	3938	4421	5527	6275	5602	3838	4345	4536	6765	5512	6790		7744	5644	5845
11.19		3400												1423																		4617			3368
11.21	8997	7881	10603	713	7158	9199	7467	812	7075	8066	878	9171	9582	7222	12376	16769	13925	8767	9514	9416	12137	8659	10727	10588	13185	12562	8334	8541	8732	15489	12518	14035	13813	17135	12544	12191
11.21	25349	21689	37697	2285	19079	29172	20170	31985	26376	34310	22323	42445	35140	17091	59210	62970	4445	24587	26943	32456	32334	29285	24082	37298	57311	47154	30061	22048	35723	43973	35369	39725	48370	2621	25281	50522
11.41		2779	3863	3440	2493									1449	4831	4492	4226				3704	3457	2705	3132				2702	3885		3025		705	3427
11.60										3414	2736																	2714
11.96	298	1188	1501	709	550	1161	392	10008	9150	7211	8056	9429	285	503	749	12464	12554	564	1477	1041	11758	548	202	593	770	10006	8562	981	10816	13299	333	647	10201	617	577	9982
12.15	5325							6868					4744		6328				4608				4328
12.35					2893																		3452									5013			3080
12.42				5757						4061			5210			6409	6273			5937	5122				5907				5966				5192
12.47			3244	4229	2267			4354	3337					1784		4764				3355	3135	3295	199			6851	2687	2579		3930	3615	4071			2374
2.16	7776	7870	15005	14136	5321	6821	5117	9454	9916	10232	9462	19378	15364	5472	14773	17994	11913	7640	6961	13124	12317	16242	6091	10436	18993	9175	7026	6853	14096	11883	6841	11570	9033	10683	4570	12088
1.09	7381	4908	7025	8358	6396	6093	7723	7001	7987	6444	5959	8150	7703	7740	4662	6435	6707	4926	3943	5263	5355	6527	4962	5647	5636	5686	4520	5555	6302	3987	3910	4895	4529	6032	3916	5306
1.05	3464	2119	3282	5078	4642	2589	4516	4239	4361	3970	4463	4538	3889	4403	3047	3830	3640	3089	2846	3114	2833	4238	5249	4887	4113	5063	2642	4084	3592	2620	2354	3392	3718	4751	4502	5480
4.49	15467		17503	21167	2453	12617	3197	13787	1045	3532	19654		2158	10459	16752	20190	16784	15372	2010	17212	19899	1380	2438	13518	2164	12432	1506	18473	15968	16721	1831	535	15112	1285	11205	1212
5.42	7657	6684	9285	11158	6783	10540	6795	11509	10734	9473	9262	10937	9939	6583	17627	12674	14215	6967	7223	9442	9338	8280	7646	9640	12132	11405	7477	7407	9157	8509	6401	9513	12638	7856	6667	11370
4.89	2013	2266	3025	4046	2455	3574	2779	4276	3509	4713	2713	5110	3792	2628	6072	7512	5813	2650	2896	3770	3227	2210	2737	3140	4237	3842	2395	2676	3418	3052	1950	2299	4120	2766	2121	3176
4.58	6037	5628	6367	7255	6056	8058	5191	8269	8308	7935	9510	9273	9699	7245	12518	10795	13119	10087	11909	12380	14195	11559	12537	12648	14899	15967	10775	9667	11121	11700	9162	13140	14095	9297	12020	15025
4.02	11055	11071	12997	14085	8758	9400	10029	12154	8389	14820	9460	16149	17513	11241	17574	17454	21079	14221	12210	16582	18588	13304	10370	13683	16638	12227	12953	14849	13702	15815	11076	11939	12596	10974	7767	8205
5.02	42190	41705	59277	63482	35269	49365	37803	60838	65580	67625	47763	74173	75340	33313	108210	79391	78880	54292	61555	80979	66895	73061	46023	75851	83882	88571	58414	54529	85992	66142	53306	76749	93445	56846	50639	87407
4.51	2265	2876	3557	4929	3585	4680	3460	7204	6800	6605	4732	6031	5314	3076	9320	8895	6311	3898	5555	5920	4847	3311	3718	4655	5675	5534	4836	4931	7021	6142	2431	4274	6910	3688	3852	6325
4.74	4118	3546	3533	4503	4371	4144	3554	5090	4313	3986	5039	4671	5121	6529	6716	5078	7782	5826	6635	6222	7966	5140	7788	5772	5619	4830	5280	6472	5241	5054	3434	5798	6377	3681	4398	4298
4.51	65316	73991	82451	73321	44978	51828	43695	48809	43726	73496	54229	91388	91687	60667	68960	72273	77473	90972	67215	96903	108519	80549	63232	63920	82950	51241	82729	80370	89219	95415	65353	79886	75430	66495	43952	43294
4.18	5956	7721	10651	6736	4621	4892	3909	4842	5344	6771	5381	9320	9489	4109	7107	8568	6891	10655	11371	15591	12932	10526	8199	8481	12079	9562	9390	8623	12393	10489	11611	9638	8324	9596	5873	7151
4.06	2477	2856	3001	5614	3569	3785	3909	4930	4192	4414	3162	4797	4593	4126	6417	7522	6972	4241	4204	5524	5726	3324	4573	4418	6165	4174	4270	4595	4531	4861	3036	2876	500	2607	2137	2843
3.90	19016	18263	18968	28573	23248	23349	23429	28026	23087	25308	23767	27613	30173	20236	39019	33256	43181	23814	30595	30799	30881	26588	23291	28370	30751	29414	31792	34328	32438	31171	25689	31652	34915	22948	25590	25757
5.18	8701	7876	10054	15338	8102	10415	9974	12463	11750	11083	9069	12122	11568	6882	16050	16197	13963	7622	7113	8750	9275	6507	5242	7356	11586	7232	5335	936	6344	6908	697	4631	6071	4849	3563	1014
4.54	5618	6175	8112	10464	5027	6662	5752	6683	6948	7708	8027	9907	8034	3596	10414	11779	7086	8110	8730	11095	9258	8122	5132	7346	11509	9527	6704	4628	8525	7117	5718	5968	6089	4824	3049	6088
4.25	2207	2401	2814	3458	2219	3293	1934	3748	4307	3279	2659	3754	3233	1848	5102	3197	3853	3590	4922	5052	4226	3397	3226	4243	4697	4209	4765	4439	6800	4972	3675	3335	4328	2469	2874	4523
4.36	66010	69929	75991	86904	69067	87478	67306	86898	84565	75003	83270	88774	103147	63505	124643	95155	112599	100792	115260	117194	123938	124374	105719	111109	113758	110774	103017	115539	124955	113581	116011	149580	142131	110394	125494	124656
4.01	7781	2441	1493	8991	2463	9777	2155	12332	11625	2172	1293	16787	17327	12355	27001	2719	1972	304	1509	11334	2203	1135	12761	15149	10802	15156	633	272	803	11388	284	1504	3802	2157	18233	12993
5.83	6786	7239	9788	10721	5070	6470	5201	6400	7017	8186	5995	10024	9163	4777	10407	12424	8094	6475	5841	7761	8571	6800	4694	6035	12051	5142	5079	4140	6741	7158	4283	4311	4876	4046	2390	4274
4.96	5466	6141	8482	11929	6095	7941	5693	9218	8518	7095	4824	7347	7682	4753	9987	10269	9166	5035	4373	5953	6466	4210	4588	5324	8028	5096	4980	5208	5353	6127	3981	4436	5045	3934	2776	4211
5.14	2575	2708	3925	4142	2169	2547	1820	2263	2395	3099	3040	3959	3340	1717	3479	4477	3025	3861	3433	5212	5547	3841	2437	3136	6383	3640	3092	2137	4337	4228	3685	2887	2844	2777	1730	2844
4.48	12589	17935	18374	16803	14262	1660	12019	24545	18074	18993	15250	19327	36341	29709	73013		49662	10562	21834		23732	30032		44439	27641	47414	13658	9977	17731		15442	36432	45721	26307	33403	31417
4.07	2811	6549	7247	4595	6736	9972	4761	6878	15082	9375	9300	5039	5798	7300	5275	6714	9641	3612	7877	7710	7700	5927	5199	2501	3718	3816	7157	5378	5627	8518	4665	3502	5290	3970	10016	7023
3.95	46807	54354	54420	68062	49711	42074	12743	48442	47701	74610	74561	70470	69906	48470	13414	83020	5998	49960	56987	70714		37365	34234	46918		38675	52297	57460	62612	45881	30429	8654	42852	22826	29849
5.38	14785	15348	21599	21483	11654	16262	11240	13589	15188	18179	13349	22211	18866	10075	22378	21400	18831	20533	16793	24436	27034	27546	16415	23219	30478	20168	22315	19648	30651	28804	23412	28583	29179	21653	15709	26400
4.82	7214	7573	9700	14128	8892	11535	8835	12393	12771	8519	6463	9873	10144	7258	12982	13631	13639	7293	7730	9864	10183	6788	7320	7798	11640	6180	8381	8200	8242	9132	5983	7050	6921	4672	4586	5946
4.19	5174	4575	6086	7596	7619	7601	9291	1121	9735	5208	8361		9363	5312	1000		10471	6232	7793	6780	1331	5052			6557	8011	5888		9461	5591	4807	6900	5172	4965	4681	5753
4.12	9355	10167	9909	1545	8694	4941	8903	9501	11228	6561	13964	16356	16440	8333	15907	12273	14497	17583	31372	33173	30829	16402	13692	13798	16874	20261	20391	16512	18366	21349	17034	16268	9780	7762	16263	8604
4.01	23134	3823	286	45750	7417	31719	32903	33789	37293		40779	1799	37055	27580	28547	44320	38929	27418	38723	34599	32042	17470	22222	23182	30360	18934	30515	35923	34185	26948	14637	1294	12749	10757	13876	14279
3.85	3910	3747	3238	4964	1544	5789	5386	328	5245	4179	3127	4834	5688	4654	7123	4637	7704	1955	3237	476	735	2983	2691	159	2871	2138	2354	1649	2126	2635	2276	4737	5041	2699	613	2647
4.80				20654		17138	18312		16654	20418		28162	21373		29569	7664	31298	13093	19730	19628	16617					30420		5652		6933	7577			8107		7173
4.65	521	1327	569	2801	25559	26917	2864	32937	1944	25545	10056	29656	35860	32863	4091	42339	50646	905	19508	19994	3088	23773	1488	595	1662	2868	686	6516	1150	3059	10809	2413	1808	513	13893	15206
4.42	3239	14564	382616	412954	5388	419070	292834	7365	374110	346511	2446	374056	363291	234170	17762	11653	462210	6845	11770	393512	436181	358228	297149	4975	2129	8269	17109	335246	8666	459078	4251	386374	2419	14492	19456	6431
4.60	2666	3769	5282	4668	5591	4880	5115	7020	6853	5158	8455	6054	5338	2973	8315	7965	7518	3917	6317	6954	4591	4692	5100	6688	5514	7669	7876	7997	9103	10610	5669	4269	7962	6086	6391	6611
5.45	2292	2399	2603	2578	2711	3506	2922	4166	3959	2031	3089	2511	3891	2068	4519	2732	3629	2363	3265	2945	2906	3349	3346	4219	2973	4895	3358	3356	5089	3870	4065	5066	4299	4726	4405	5218
5.01	4397	4518	5376	860	4042	1176	4338	4532	5356	5128	3846	4904	6392	4108	7348	6452	7449	5583	6463	1137	7009	6304	5329	6061	6451	6554	5023	6194	6368	6953	5470	6833	6395	7199	5259	5830
4.53	4603	6065	7728	8497	8291	6645	7689	8347	8177	8803	12307	9875	8235	5387	9375	13273	11008	5480	6788	6959	6238	3631	4238	5364	6120	6000	4610	5139	5454	6592	3271	1977	3850	3404	2588	3233
4.64	12041	15565	19012	17448	10793	10669	11053	12075	12468	14100	15735	18098	14417	4996	12238	16564	10695	18762	22979	26947	18900	16105	11662	15111	16931	20213	18795	17133	22735	19547	19373	14040	12378	17661	10375	14774
5.36	8281	8709	8851	9695	8370	9476	9907	10697	11578	7240	8398	8602	13706	7445	12954	8307	12788	10413	10083	10523	12502	10454	9661	11585	9105	11028	9938	10914	14319	11441	10471	16809	13052	13515	10925	12287
4.80	5866	3592	3772	5008	5606	3997	5670	5470	5178	3782	4342	4031	6592	5741	5752	4406	7410	4392	4403	5168	5157	2512	4117	3923	2905	3115	3927	4207	3530	3506	2102	2757	2865	2310	2340	3242
5.66	60946	55729	62912	50689	37781	2433	6731	35242	40566	48820	40746	3673	1824	46585	2957	1053	1761	77855	5451	2677	18066	1332	62325	52533	5539	51218	72412	76831	7721	85210	71710	88051	6151	90104	16000	53468
5.25									4321				6044				4759	6730	7324		6868	7275			6276		6490		9251	8611		6067		5907
5.37	8440	8001	7878	9820	7315	8213	8478	9520	9629	7799	7560	9874	11298	7306	10324	10367	11043	7260	8289	8571	9756	6680	9596	7984	9916	7143	912	6653	1192	7662	589	5077	497	5174	1041	4431
4.88				53001					50943		54000			42122			75415	51240		404	57713	62489		58574			56463	63646		67594		85200			57789	63484
4.64	9789	2011	4653	3699	1755	2609	2030	8738	2304	1840	9229	2069	8305	382	1854	4204	2568	1379	3456	11745	1463	8479	1748	6990	8850	7736	13268	3039	4262	16060	9096	4832	4969	6158	6155	5128
4.37	5631	7637	9817	10484	12051	9332	10421	13268	12403	13210	14867	13999	10445	7511	15897	18058	15676	7888	10143	10576	9745	6745	8105	9175	10101	10518	7216	8701	7693	11905	5936	4626	9703	7605	6169	7233
6.01	3032	3306	3423	3877	3295	4312	3681	4357	4628	2884	3396	3085	3922	2234	4290	745	4462	3061	2879	3486	3428	3314	2570	3374	3231	3860	2856	2720	3297	3777	3025	3923	3579	3589	2901	3530
5.19	4292	3786	4266	5060	5506	6940	7493	7680	7851	4396	5819	4328	7072	3941	8726	4691	7881	4781	6121	5491	5744	5428	5557	6657	5392	7779	4340	4830	5540	5444	5295	9009	7327	7847	6897	8036
6.14	5151	3685	3927	4487	2899	4647	2978	4349	3948	3851	3533	4524	4097	3333	4249	3424	5556	3716	4459	4954	4975	4524	5019	4503	4263	4464	4448	5148	3818	5426	4224	5991	6034	4663	4701	5594
5.43	6534	5477	5368	8446	6258	10055	5193	7722	8011	5277	6265	4161	5506	5503	7671	9522	12316	4202	4739	7972	7913	2545	6147	5546	6072	7782	3891	3290	5271	7414	4401	6883	6507	5997	5140	6739
5.69	8455	9050	9360	9284	6546	7432	7199	7647	8168	9755	7438	11440	9690	6531	10262	8466	9860	12675	14249	15733	14979	13482	15816	12859	12536	15547	9985	13098	14826	13267	11164	13974	15392	15666	13001	14472
4.92	7485	8123	8626	10108	8118	11339	7905	10565	8271	7997	7528	8126	8412	6696	11604	6133	13092	7065	8168	7804	10665	6992	6743	6616	9570	8113	7250	7074	7683	10617	6775	6374	7013	8027	5683	5807
5.36	7579	1829	1103	5976	4824	5695	4885	5979	1114	5006	534	6099	588	1564	6247	6162	7104	9792	687	1524	11120	2791	2871	558	9125	7773	9348	3047	10542	1311	7649	1952	13280	8960	2401	10803
4.50	32703	44947	39990	45386	27159	27839	29449	32740	31110	45816	42786	57135	47421	35488	37358	46374	40603	33686	29232	41945	46905	34215	32824	29721	35992	25335	39622	39585	35667	35341	34709	38358	33127	31058	24729	30756
4.15	8995	10780	12438	11776	8824	8932	8087	10367	10325	9775	16249	11497	13962	8294	11449	10279	12851	8145	8554	10827	9669	8101	5874	7349	7166	6733	5812	5591	7279	5680	4698	6508	5488	5651	4848	5660
4.65	6778	7483	8936	7592	5275	6784	4210	6309	7135	9552	9774	11294	12824	8191	12151	8309	10967	17709	14258	18419	17397	22842	12912	12675	11945	11286	9164	10649	16638	10710	9616	8179	11076	6448	9592	10140
3.75	6141	6309	6607	7476	6239	8358	7232	8054	7888	8768	6448	9449	9697	9183	12579	12033	11918	7075	8065	8336	8718	7521	14829	9775	12667	10390	7075	8364	8358	7447	5790	7782	9752	7073	7645	6876
3.48	5718	5872	7522	5848	6007	6154	4880	6815	8380	7647	12330	7194	10167	7379	15922	7533	12726	10252	12985	13863	11739	14684	15889	14514	11149	17817	11159	13935	17128	11899	11269	14170	16769	11746	17039	15391
3.38	31509	23646	23269	27895	28889	37074	26840	27305	32217	17894	40639	18245	23661	15370	20531	15082	19996	26824	26640	35437	27025	31671	36174	31154	24672	24159	26813	28020	30220	20413	21383	22281	16973	13590	17236	16676
3.68	2638	3583	3821	4801	2884	1947	3431	3127	3122	4459	6743	6001	4764	2470	4454	7458	4292	4424	8241	9013	6015	4389	3762	4645	4897	5674	4811	3375	5535	4244	3804	3393	3992	2417	3491	3121
3.85	6633	6568	6040	9332	9278	9980	12056	11360	9277	8928	5209	9732	9364	8263	14541	8591	14908	3296	5992	6065	4992	5315	5696	5391	4881	4763	3917	3296	3811	5389	3711	8367	8972	4402	7199	4971
4.43	6339	6925	7619	6902	6028	7333	5802	6105	6537	6380	5939	7021	6680	4774	8799	7303	8391	7053	7028	7696	9593	7506	6087	6653	8323	6739	6662	7286	6694	9534	7004	8541	6808	8179	6238	6585
5.52	5722	4812	4826	2726	5516	4086	1477	4177	287	858	3555	5949	4979	7822	4464	3385	3967	2947	3500	8761	8114	1898	4307	1672	6800	5443	17302	5208	1928	8239	3988	8321	4145	1758	3930	6346
5.79	4202	2578	2542	3450	2387	3446	2413	4013	3121	2719	2362	2898	3083	2627	3584	3446	4265	2695	799	3107	3569	2652	3213	3442	3255	3310	3271	3241	2757	3405	2459	3730	3563	2863	2628	3390
4.51	11017	14673	15762	17956	20993	22536	17869	25722	26747	22617	17956	22606	21382	16988	28736	34023	30101	20796	27774	24836	25113	14459	21018	18506	20736	21714	20904	24492	24908	29325	19484	17931	23684	21017	19888	20787
5.25	7571	8274	7783	11940	10044	12746	10604	11437	11259	7048	5754	7495	8615	8312	10553	15925	14836	337	371	4648	7389	2862	69	4475	7976	3496	129	3610	302	4884	2650	3114	2716	311	369	2209
4.55	17115	16301	18719	22516	17468	21318	14881	16297	19359	11163	11720	12107	12544	10652	13265	16674	19278	13013	13939	12785	18712	11090	9073	9819	15013	8288	12440	13358	12481	16205	10855	8455	6538	8078	6823	7613
4.29	6553	9208	10205	14010	16837	15292	13600	17362	17053	12166	12473	12416	12466	11979	17747	20193	21058	9185	11361	10238	12438	6628	9726	8624	11381	7639	8034	9806	7771	12498	7165	5391	9299	7101	5770	5835
4.30	4099	3359	3585	5737	3732	5474	3261	3127	3572	2939	2326	3226	2779	2803	3848	3267	4563	3100	3422	3320	4943	2859	2533	2265	3929	2618	2580	2862	2987	3261	2393	2603	2486	1929	2396	571
7.05	7174	6282	9814	13306	6731	8276	6175	10480	9517	10630	9163	7222	12369	4951	9997	11910	10586	7922	8918	12024	10014	10296	7691	11606	12964	11138	9983	6880	15673	10308	8503	5588	11007	6962	6750	10688
'
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
p = t(df1[1:(row_start-1),1:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(1+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
rownames(p) = df1[row_start,(1+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
f = data.frame(df1[(row_start+1):nrow(df1),1])
colnames(f) = "compound label"
f[[1]] = make.names(f[[1]],unique = T)
e = df1[(row_start+1):nrow(df1),2:ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = p$`sample label`
rownames(e) = f$`compound label`
library(data.table)
p = t(df1[1:(row_start-1),1:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(1+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
rownames(p) = df1[row_start,(1+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
f = data.frame(df1[(row_start+1):nrow(df1),1])
colnames(f) = "compound label"
f[[1]] = make.names(f[[1]],unique = T)
e = df1[(row_start+1):nrow(df1),2:ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = p$`sample label`
rownames(e) = f$`compound label`
row_start =3
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
p = t(df1[1:(row_start-1),1:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(1+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
rownames(p) = df1[row_start,(1+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
f = data.frame(df1[(row_start+1):nrow(df1),1])
colnames(f) = "compound label"
f[[1]] = make.names(f[[1]],unique = T)
e = df1[(row_start+1):nrow(df1),2:ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = p$`sample label`
rownames(e) = f$`compound label`
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
p = t(df1[1:(row_start-1),1:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(1+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
rownames(p) = df1[row_start,(1+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
f = data.frame(df1[(row_start+1):nrow(df1),1])
colnames(f) = "compound label"
f[[1]] = make.names(f[[1]],unique = T)
e = df1[(row_start+1):nrow(df1),2:ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = p$`sample label`
rownames(e) = f$`compound label`
library(opencpu);
opencpu$browse("library/WCMC.Stat.TwoWayAnova/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.TwoWayANOVA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.Boxplot/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.HeatMap/www")
=======
library(WCMC.Fansly)
library(WCMC.Fansly)
library(WCMC.Fansly)
library(WCMC.Fansly)
<<<<<<< HEAD
=======
library(opencpu);
opencpu$browse("library/WCMC.Stat.HeatMap/www")
library(WCMC.Fansly)
library(WCMC.Fansly)
>>>>>>> origin/master
library(WCMC.Fansly)
library(WCMC.Fansly)
input = 'knownORunknown	compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
known	compound 1	0.537625656	0.529025093	0.00755342	0.342340959	0.021369984	0.989139111	0.776538182	0.461572992	0.215084697	0.600561969
known	compound 2	0.206508173	0.020004266	0.462328026	0.207490195	0.192203833	0.103377994	0.317736385	0.231101117	0.706655104	0.546969238
known	compound 3	0.191587733	0.453886247	0.619442821	0.097524397	0.672137444	0.611349647	0.981335272	0.992972729	0.195418449	0.728069424
known	compound 4	0.687809125	0.49649728	0.240094056	0.084509442	0.231574791	0.793052325	0.075914286	0.835150606	0.83456883	0.699850877
known	compound 5	0.793271898	0.171849187	0.964081718	0.588320819	0.398695453	0.403110985	0.637636189	0.414738948	0.478934913	0.338706509
known	compound 6	0.716451842	0.263694253	0.432651927	0.953301427	0.780351964	0.166130615	0.846080715	0.231384594	0.529121608	0.391999014
known	compound 7	0.266521607	0.844045415	0.322754396	0.146044615	0.184299806	0.205849853	0.19884388	0.94762073	0.97363175	0.751372806
known	compound 8	0.557551049	0.605458038	0.196363331	0.787900595	0.66952868	0.797229608	0.742636029	0.393235366	0.255446418	0.871413062
known	compound 9	0.716610221	0.766508058	0.955352602	0.265248243	0.923075797	0.051058456	0.113395713	0.564206616	0.312221368	0.032902765
known	compound 10	0.009568653	0.808839535	0.381518523	0.130424566	0.762407978	0.91742649	0.895504945	0.075864497	0.160418376	0.073640391
known	compound 11	0.922126494	0.869433279	0.425384055	0.510572283	0.86973155	0.925156136	0.03417422	0.974249371	0.641416543	0.07336521
known	compound 12	0.5380518	0.711697415	0.627431638	0.605190153	0.253414181	0.26141313	0.055168065	0.541472101	0.239200762	0.421702677
known	compound 13	0.0538812	0.569733513	0.92472269	0.522498673	0.994553845	0.92391802	0.255644365	0.522906833	0.535605239	0.322438746
known	compound 14	0.289957657	0.285008178	0.826711406	0.389892806	0.30673582	0.266256351	0.532196413	0.916391471	0.422308317	0.816862746
unknown	compound 15	0.430568992	0.045994758	0.670600375	0.329242161	0.53825692	0.085210925	0.873838896	0.404142944	0.503540359	0.353810863
unknown	compound 16	0.279284394	0.952265673	0.32688688	0.921066948	0.664932025	0.156171004	0.420445945	0.895170145	0.976177843	0.450742452
unknown	compound 17	0.878648381	0.86725535	0.162047002	0.697568055	0.672746184	0.45605323	0.970407124	0.273808716	0.870940248	0.395426602
unknown	compound 18	0.923056805	0.64478934	0.835524832	0.735209632	0.07391149	0.088122457	0.053224	0.167644947	0.866943675	0.216422788
unknown	compound 19	0.046304382	0.011089944	0.148537132	0.270349328	0.24382692	0.148240576	0.205755355	0.665553875	0.457891123	0.530736407
unknown	compound 20	0.170983057	0.791929249	0.631245396	0.233377065	0.01582249	0.308326449	0.355142328	0.793330349	0.660966153	0.762088679
'
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
if(sum(duplicated(as.character(df1[row_start,(col_start+1):ncol(df1)])))>0){
rownames(p) = 1:nrow(p)
}else{
rownames(p) = as.character(df1[row_start,(col_start+1):ncol(df1)])
}
p = data.frame(p,stringsAsFactors = F,check.names = F)
write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
f[[length(f)]] = make.names(f[[length(f)]],unique = T)
write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
write.csv(e,"e.csv")
pacman::p_load(data.table)
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
if(sum(duplicated(as.character(df1[row_start,(col_start+1):ncol(df1)])))>0){
rownames(p) = 1:nrow(p)
}else{
rownames(p) = as.character(df1[row_start,(col_start+1):ncol(df1)])
}
p = data.frame(p,stringsAsFactors = F,check.names = F)
write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
f[[length(f)]] = make.names(f[[length(f)]],unique = T)
write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
write.csv(e,"e.csv")
pacman::p_load(data.table,stringr)
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
if(sum(duplicated(as.character(df1[row_start,(col_start+1):ncol(df1)])))>0){
rownames(p) = 1:nrow(p)
}else{
rownames(p) = as.character(df1[row_start,(col_start+1):ncol(df1)])
}
p = data.frame(p,stringsAsFactors = F,check.names = F)
write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
f[[length(f)]] = make.names(f[[length(f)]],unique = T)
write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
write.csv(e,"e.csv")
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
df1
t.mode
ts.first.row
which(diff(as.character(df1[1,])=='')==-1) + 1
t.mode-ts.first.row
t.mode
ts.first.row
which(diff(df1[,1]=='')==-1) + 1
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
col_start
row_start
length(row_start)==0 & col_start ==1
col_start = 1
row_start = 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
if(sum(duplicated(as.character(df1[row_start,(col_start+1):ncol(df1)])))>0){
rownames(p) = 1:nrow(p)
}else{
rownames(p) = as.character(df1[row_start,(col_start+1):ncol(df1)])
}
p = data.frame(p,stringsAsFactors = F,check.names = F)
write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
f[[length(f)]] = make.names(f[[length(f)]],unique = T)
write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
write.csv(e,"e.csv")
f
p
pacman::p_load(data.table,stringr)
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(col_start)==0 & length(row_start)==0){
col_start = 1
row_start = 1
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
p
row_start
col_start
col_start
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
col_start
>>>>>>> f47bc216781fa3522435b479cbb53574ef575f1e
library(WCMC.Fansly)
library(WCMC.Fansly)
library(WCMC.Fansly)
library(WCMC.Fansly)
library(WCMC.Fansly)
WCMC.Fansly::toSameScale()
toSameScale
library(WCMC.Fansly)
