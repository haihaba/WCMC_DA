library(WCMC.Fansly)
library(WCMC.Fansly)
library(WCMC.Fansly)
library(WCMC.Fansly)
<<<<<<< HEAD
=======
library(opencpu);
opencpu$browse("library/WCMC.Stat.HeatMap/www")
library(WCMC.Fansly)
library(WCMC.Fansly)
>>>>>>> origin/master
library(WCMC.Fansly)
library(WCMC.Fansly)
input = 'knownORunknown	compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
known	compound 1	0.537625656	0.529025093	0.00755342	0.342340959	0.021369984	0.989139111	0.776538182	0.461572992	0.215084697	0.600561969
known	compound 2	0.206508173	0.020004266	0.462328026	0.207490195	0.192203833	0.103377994	0.317736385	0.231101117	0.706655104	0.546969238
known	compound 3	0.191587733	0.453886247	0.619442821	0.097524397	0.672137444	0.611349647	0.981335272	0.992972729	0.195418449	0.728069424
known	compound 4	0.687809125	0.49649728	0.240094056	0.084509442	0.231574791	0.793052325	0.075914286	0.835150606	0.83456883	0.699850877
known	compound 5	0.793271898	0.171849187	0.964081718	0.588320819	0.398695453	0.403110985	0.637636189	0.414738948	0.478934913	0.338706509
known	compound 6	0.716451842	0.263694253	0.432651927	0.953301427	0.780351964	0.166130615	0.846080715	0.231384594	0.529121608	0.391999014
known	compound 7	0.266521607	0.844045415	0.322754396	0.146044615	0.184299806	0.205849853	0.19884388	0.94762073	0.97363175	0.751372806
known	compound 8	0.557551049	0.605458038	0.196363331	0.787900595	0.66952868	0.797229608	0.742636029	0.393235366	0.255446418	0.871413062
known	compound 9	0.716610221	0.766508058	0.955352602	0.265248243	0.923075797	0.051058456	0.113395713	0.564206616	0.312221368	0.032902765
known	compound 10	0.009568653	0.808839535	0.381518523	0.130424566	0.762407978	0.91742649	0.895504945	0.075864497	0.160418376	0.073640391
known	compound 11	0.922126494	0.869433279	0.425384055	0.510572283	0.86973155	0.925156136	0.03417422	0.974249371	0.641416543	0.07336521
known	compound 12	0.5380518	0.711697415	0.627431638	0.605190153	0.253414181	0.26141313	0.055168065	0.541472101	0.239200762	0.421702677
known	compound 13	0.0538812	0.569733513	0.92472269	0.522498673	0.994553845	0.92391802	0.255644365	0.522906833	0.535605239	0.322438746
known	compound 14	0.289957657	0.285008178	0.826711406	0.389892806	0.30673582	0.266256351	0.532196413	0.916391471	0.422308317	0.816862746
unknown	compound 15	0.430568992	0.045994758	0.670600375	0.329242161	0.53825692	0.085210925	0.873838896	0.404142944	0.503540359	0.353810863
unknown	compound 16	0.279284394	0.952265673	0.32688688	0.921066948	0.664932025	0.156171004	0.420445945	0.895170145	0.976177843	0.450742452
unknown	compound 17	0.878648381	0.86725535	0.162047002	0.697568055	0.672746184	0.45605323	0.970407124	0.273808716	0.870940248	0.395426602
unknown	compound 18	0.923056805	0.64478934	0.835524832	0.735209632	0.07391149	0.088122457	0.053224	0.167644947	0.866943675	0.216422788
unknown	compound 19	0.046304382	0.011089944	0.148537132	0.270349328	0.24382692	0.148240576	0.205755355	0.665553875	0.457891123	0.530736407
unknown	compound 20	0.170983057	0.791929249	0.631245396	0.233377065	0.01582249	0.308326449	0.355142328	0.793330349	0.660966153	0.762088679
'
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
if(sum(duplicated(as.character(df1[row_start,(col_start+1):ncol(df1)])))>0){
rownames(p) = 1:nrow(p)
}else{
rownames(p) = as.character(df1[row_start,(col_start+1):ncol(df1)])
}
p = data.frame(p,stringsAsFactors = F,check.names = F)
write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
f[[length(f)]] = make.names(f[[length(f)]],unique = T)
write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
write.csv(e,"e.csv")
pacman::p_load(data.table)
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
if(sum(duplicated(as.character(df1[row_start,(col_start+1):ncol(df1)])))>0){
rownames(p) = 1:nrow(p)
}else{
rownames(p) = as.character(df1[row_start,(col_start+1):ncol(df1)])
}
p = data.frame(p,stringsAsFactors = F,check.names = F)
write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
f[[length(f)]] = make.names(f[[length(f)]],unique = T)
write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
write.csv(e,"e.csv")
pacman::p_load(data.table,stringr)
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
if(sum(duplicated(as.character(df1[row_start,(col_start+1):ncol(df1)])))>0){
rownames(p) = 1:nrow(p)
}else{
rownames(p) = as.character(df1[row_start,(col_start+1):ncol(df1)])
}
p = data.frame(p,stringsAsFactors = F,check.names = F)
write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
f[[length(f)]] = make.names(f[[length(f)]],unique = T)
write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
write.csv(e,"e.csv")
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
df1
t.mode
ts.first.row
which(diff(as.character(df1[1,])=='')==-1) + 1
t.mode-ts.first.row
t.mode
ts.first.row
which(diff(df1[,1]=='')==-1) + 1
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
col_start
row_start
length(row_start)==0 & col_start ==1
col_start = 1
row_start = 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample label" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
if(sum(duplicated(as.character(df1[row_start,(col_start+1):ncol(df1)])))>0){
rownames(p) = 1:nrow(p)
}else{
rownames(p) = as.character(df1[row_start,(col_start+1):ncol(df1)])
}
p = data.frame(p,stringsAsFactors = F,check.names = F)
write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
f[[length(f)]] = make.names(f[[length(f)]],unique = T)
write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
write.csv(e,"e.csv")
f
p
pacman::p_load(data.table,stringr)
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){
# if "BinBase name\tret.index\tquant mz\tBB id\tmass spec\tPubChem\tKEGG\tInChI Key\t", then last \t would be excluded.
if(str_sub(x,-1,-1)=="\t"){
x = paste0(x,"\t")
}
strsplit(x,"\t")[[1]]
})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(col_start)==0 & length(row_start)==0){
col_start = 1
row_start = 1
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
p
row_start
col_start
col_start
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
col_start
