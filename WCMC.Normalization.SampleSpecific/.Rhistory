opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
library(WCMC.Normalization.SampleSpecific)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
library(WCMC.Normalization.SampleSpecific)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
library(ggpubr)
library(ggplot2)
df = read.table("C:\\Users\\Sili Fan\\Downloads\\insilico.csv", header = TRUE, sep = ",")
ggboxplot(df, x = "Type", y = "Hits",xlab = "Methods",
ylab = "Correctly annotated structures [ % ]", main ="" ,cex.lab=1.2,
color = "Type", palette =c("#e700b1", "#a5e700", "#2a00e7"),
add = "jitter", shape = "Type")
?ggboxplot
ggboxplot(df, x = "Type", y = "Hits",xlab = "Methods",
ylab = "Correctly annotated structures [ % ]", main ="" ,cex.lab=1.2,
color = "Type", palette =c("#e700b1", "#a5e700", "#2a00e7"),
add = "jitter", shape = "Type",width=0.5)
ggboxplot(df, x = "Type", y = "Hits",xlab = "Methods",
ylab = "Correctly annotated structures [ % ]", main ="" ,cex.lab=1.2,
color = "Type", palette =c("#e700b1", "#a5e700", "#2a00e7"),
add = "jitter", shape = "Type",width=0.3)
ggbarplot(df, x = "Type", y = "Hits",
fill = "dose", color = "dose",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE)
ggbarplot(df, x = "Type", y = "Hits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE)
ggbarplot(df, x = "Type", y = "Hits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = F)
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
library(ggpubr)
library(ggplot2)
df = read.table("C:\\Users\\Sili Fan\\Downloads\\insilico.csv", header = TRUE, sep = ",")
head(df)
by(df$Hits,df$Type,median)
df2 = by(df$Hits,df$Type,median)
unlist(df2)
as.numeric(df2)
by(df$Hits,df$Type,median)
names(by(df$Hits,df$Type,median))
df2 = data.frame(Type = names(by(df$Hits,df$Type,median)),
averageHits = by(df$Hits,df$Type,median))
library(ggpubr)
library(ggplot2)
df = read.table("C:\\Users\\Sili Fan\\Downloads\\insilico.csv", header = TRUE, sep = ",")
# ggboxplot(df, x = "Type", y = "Hits",xlab = "Methods",
#           ylab = "Correctly annotated structures [ % ]", main ="" ,cex.lab=1.2,
#           color = "Type", palette =c("#e700b1", "#a5e700", "#2a00e7"),
#           add = "jitter", shape = "Type")
df2 = by(df$Hits,df$Type,median)
df2 = as.numeric(df2)
df2 = data.frame(Type = names(by(df$Hits,df$Type,median)),
averageHits = as.numeric(by(df$Hits,df$Type,median)))
df2
averageHits = as.numeric(by(df$Hits,df$Type,median)))
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE)
?ggbarplot
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE)
ggbarplot(df2, x = "Type", y = "averageHits",
color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE)
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE)
?ggbarplot
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE,
lab.size = 40)
?ggbarplot
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE)
?ggbarplot
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE, size = 2)
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE, size = 0.5)
signif(as.numeric(by(df$Hits,df$Type,median)),2)
df2 = data.frame(Type = names(by(df$Hits,df$Type,median)),
averageHits = signif(as.numeric(by(df$Hits,df$Type,median)),3)*100)
df2
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE, size = 0.5)
?ggbarplot
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE, size = 1)
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE,
lab.size = 5)
ggbarplot(df2, x = "Type", y = "averageHits",
fill = "Type", color = "Type",
palette = c("#00AFBB", "#E7B800", "#FC4E07"),
label = TRUE,
lab.size = 10)
library(WCMC.Normalization.SampleSpecific)
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
?write.table
fwrite(data.table(result),"SampleSpecific-normalization.txt")
library(pacman)
pacman::p_load(data.table)
fwrite(data.table(result),"SampleSpecific-normalization.txt")
library(WCMC.Normalization.SampleSpecific)
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
?fwrite
library(WCMC.Normalization.SampleSpecific)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
?fwrite
input='compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1	0.375539896	0.065899686	0.496939834	0.534084846	0.716702517	0.950021081	0.750360989	0.689267761	0.484818318	0.531683366
compound 2	0.206362605	0.751998348	0.942184615	0.206394675	0.585332792	0.747429124	0.591602986	0.892103949	0.213276914	0.841363479
compound 3	0.320140356	0.282510381	0.152143414	0.660063056	0.563975871	0.455721993	0.248184925	0.551075501	0.513916307	0.605137837
compound 4	0.20639852	0.342488513	0.377058181	0.072792314	0.111507061	0.349741009	0.207383158	0.38826326	0.562160107	0.589853168
compound 5	0.135425902	0.051918493	0.227762081	0.403017838	0.655777946	0.011849089	0.271320615	0.073403869	0.84444792	0.615436238
compound 6	0.616156795	0.621099447	0.331352935	0.559438334	0.852012923	0.542562227	0.815533378	0.225449985	0.299553123	0.691357522
compound 7	0.352797968	0.075572132	0.357330296	0.502733849	0.234612323	0.755412168	0.782320137	0.278486293	0.146923068	0.224468534
compound 8	0.212669408	0.963328103	0.264610641	0.939520504	0.915010224	0.306447668	0.638220615	0.416558741	0.408093063	0.111390696
compound 9	0.737475111	0.477069404	0.409384057	0.130882785	0.76113433	0.765912965	0.958689287	0.153819885	0.508932246	0.219095508
compound 10	0.441638219	0.906535571	0.904896034	0.514376867	0.946055314	0.546109101	0.273048397	0.694480005	0.580014151	0.367301685
compound 11	0.560800522	0.241851762	0.915308656	0.276144522	0.52710235	0.140633921	0.085760849	0.971778416	0.198352625	0.433389727
compound 12	0.3042778	0.087429392	0.339533042	0.258864548	0.434145082	0.525673934	0.880516111	0.796144325	0.21432508	0.786479185
compound 13	0.927352596	0.809354145	0.521789817	0.132598009	0.354873129	0.54587454	0.905302895	0.591731126	0.712139836	0.355582239
compound 14	0.80044224	0.755691572	0.679934638	0.433222185	0.673573865	0.997679865	0.470027094	0.447200938	0.016889784	0.643407241
compound 15	0.374319379	0.398598057	0.597866875	0.113390755	0.889121439	0.91875724	0.261641946	0.33443309	0.161977598	0.718325491
compound 16	0.824364189	0.557636205	0.027706202	0.64560174	0.123939069	0.479622547	0.727113559	0.153183953	0.737656127	0.788080284
compound 17	0.532976966	0.706289045	0.486952088	0.412154294	0.439943672	0.475253711	0.549267441	0.950895467	0.888014992	0.491156531
compound 18	0.658270205	0.310558256	0.560285311	0.369547645	0.50986586	0.126320243	0.138691771	0.118098592	0.013933713	0.642171724
compound 19	0.976136566	0.935824649	0.477713008	0.369850288	0.830332397	0.173360166	0.166329562	0.623136293	0.633352067	0.430893335
compound 20	0.934374814	0.840576377	0.384396985	0.328708995	0.146584056	0.078071197	0.301708041	0.213188032	0.153279604	0.240768458'
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
if(type=="sum"){
sums = colSums(data,na.rm = T)
result = t(t(data)/sums*mean(sums,na.rm = T))
}else if(type=="median"){
medians = apply(data,2,median,na.rm = T)
result = t(t(data)/medians*mean(medians,na.rm = T))
}else if(type=='mean'){
means = colMeans(data,na.rm = T)
result = t(t(data)/means*mean(means,na.rm = T))
}else if(type=="custom sample weight"){
weight <- gsub("\r","",weight)
cfile <- strsplit(weight,"\n")[[1]]
df2 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df2) = as.matrix(df2[1,])[1,]
df2 = df2[-1,]
weight = as.numeric(df2[1,]);
weight = weight[!is.na(weight)]
result = t(t(data)*weight)
}
result = cbind(data.frame(df1[,1]),result)
rownames(result) = 1:nrow(result)
colnames(result) = colnames(df1)
fwrite(data.table(result),"SampleSpecific-normalization.csv")
type = 'sum'
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
if(type=="sum"){
sums = colSums(data,na.rm = T)
result = t(t(data)/sums*mean(sums,na.rm = T))
}else if(type=="median"){
medians = apply(data,2,median,na.rm = T)
result = t(t(data)/medians*mean(medians,na.rm = T))
}else if(type=='mean'){
means = colMeans(data,na.rm = T)
result = t(t(data)/means*mean(means,na.rm = T))
}else if(type=="custom sample weight"){
weight <- gsub("\r","",weight)
cfile <- strsplit(weight,"\n")[[1]]
df2 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df2) = as.matrix(df2[1,])[1,]
df2 = df2[-1,]
weight = as.numeric(df2[1,]);
weight = weight[!is.na(weight)]
result = t(t(data)*weight)
}
result = cbind(data.frame(df1[,1]),result)
rownames(result) = 1:nrow(result)
colnames(result) = colnames(df1)
fwrite(data.table(result),"SampleSpecific-normalization.csv")
fwrite(data.table(result),"SampleSpecific-normalization.txt",sep = "\r",sep2="\n")
fwrite(data.table(result),"SampleSpecific-normalization.txt",sep = "\r",eol="\n")
input
input = 'compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1	0.375539896	0.065899686	0.496939834	0.534084846	0.716702517	0.950021081	0.750360989	0.689267761	0.484818318	0.531683366
compound 2	0.206362605	0.751998348	0.942184615	0.206394675	0.585332792	0.747429124	0.591602986	0.892103949	0.213276914	0.841363479
compound 3	0.320140356	0.282510381	0.152143414	0.660063056	0.563975871	0.455721993	0.248184925	0.551075501	0.513916307	0.605137837
compound 4	0.20639852	0.342488513	0.377058181	0.072792314	0.111507061	0.349741009	0.207383158	0.38826326	0.562160107	0.589853168
compound 5	0.135425902	0.051918493	0.227762081	0.403017838	0.655777946	0.011849089	0.271320615	0.073403869	0.84444792	0.615436238
compound 6	0.616156795	0.621099447	0.331352935	0.559438334	0.852012923	0.542562227	0.815533378	0.225449985	0.299553123	0.691357522
compound 7	0.352797968	0.075572132	0.357330296	0.502733849	0.234612323	0.755412168	0.782320137	0.278486293	0.146923068	0.224468534
compound 8	0.212669408	0.963328103	0.264610641	0.939520504	0.915010224	0.306447668	0.638220615	0.416558741	0.408093063	0.111390696
compound 9	0.737475111	0.477069404	0.409384057	0.130882785	0.76113433	0.765912965	0.958689287	0.153819885	0.508932246	0.219095508
compound 10	0.441638219	0.906535571	0.904896034	0.514376867	0.946055314	0.546109101	0.273048397	0.694480005	0.580014151	0.367301685
compound 11	0.560800522	0.241851762	0.915308656	0.276144522	0.52710235	0.140633921	0.085760849	0.971778416	0.198352625	0.433389727
compound 12	0.3042778	0.087429392	0.339533042	0.258864548	0.434145082	0.525673934	0.880516111	0.796144325	0.21432508	0.786479185
compound 13	0.927352596	0.809354145	0.521789817	0.132598009	0.354873129	0.54587454	0.905302895	0.591731126	0.712139836	0.355582239
compound 14	0.80044224	0.755691572	0.679934638	0.433222185	0.673573865	0.997679865	0.470027094	0.447200938	0.016889784	0.643407241
compound 15	0.374319379	0.398598057	0.597866875	0.113390755	0.889121439	0.91875724	0.261641946	0.33443309	0.161977598	0.718325491
compound 16	0.824364189	0.557636205	0.027706202	0.64560174	0.123939069	0.479622547	0.727113559	0.153183953	0.737656127	0.788080284
compound 17	0.532976966	0.706289045	0.486952088	0.412154294	0.439943672	0.475253711	0.549267441	0.950895467	0.888014992	0.491156531
compound 18	0.658270205	0.310558256	0.560285311	0.369547645	0.50986586	0.126320243	0.138691771	0.118098592	0.013933713	0.642171724
compound 19	0.976136566	0.935824649	0.477713008	0.369850288	0.830332397	0.173360166	0.166329562	0.623136293	0.633352067	0.430893335
compound 20	0.934374814	0.840576377	0.384396985	0.328708995	0.146584056	0.078071197	0.301708041	0.213188032	0.153279604	0.240768458
'
gsub("\r","",input)
input ='   compound index   sample1    sample2    sample3    sample4    sample5
1      compound 1 0.3483120 0.06301677 0.51174203 0.66132691 0.61911157
2      compound 2 0.1914006 0.71910060 0.97024919 0.25556679 0.50563001
3      compound 3 0.2969291 0.27015137 0.15667527 0.81731856 0.48718119
4      compound 4 0.1914340 0.32750563 0.38828950 0.09013458 0.09632352
5      compound 5 0.1256071 0.04964721 0.23454636 0.49903408 0.56648289
6      compound 6 0.5714834 0.59392814 0.34122285 0.69272069 0.73599722
7      compound 7 0.3272190 0.07226607 0.36797399 0.62250675 0.20266596
8      compound 8 0.1972502 0.92118529 0.27249252 1.16335484 0.79041639
9      compound 9 0.6840057 0.45619900 0.42157826 0.16206471 0.65749325
10    compound 10 0.4096180 0.86687726 0.93184991 0.63692364 0.81723418
11    compound 11 0.5201406 0.23127145 0.94257269 0.34193406 0.45532861
12    compound 12 0.2822167 0.08360461 0.34964661 0.32053726 0.37502902
13    compound 13 0.8601165 0.77394724 0.53733222 0.16418858 0.30655126
14    compound 14 0.7424076 0.72263225 0.70018765 0.53643441 0.58185560
15    compound 15 0.3471800 0.38116055 0.61567536 0.14040533 0.76805279
16    compound 16 0.7645951 0.53324123 0.02853148 0.79941194 0.10706271
17    compound 17 0.4943344 0.67539094 0.50145679 0.51034723 0.38003804
18    compound 18 0.6105435 0.29697223 0.57697437 0.45758984 0.44043916
19    compound 19 0.9053635 0.89488503 0.49194251 0.45796459 0.71726886
20    compound 20 0.8666296 0.80380359 0.39584691 0.40702166 0.12662420
sample6    sample7    sample8    sample9  sample10
1  0.93507158 0.72893220 0.70181574 0.56928849 0.5012797
2  0.73566760 0.57470800 0.90834452 0.25043627 0.7932512
3  0.44855077 0.24109727 0.56110772 0.60345624 0.5705338
4  0.34423750 0.20146071 0.39533151 0.66010559 0.5561232
5  0.01166263 0.26357225 0.07474017 0.99157657 0.5802433
6  0.53402448 0.79224339 0.22955426 0.35174444 0.6518231
7  0.74352503 0.75997865 0.28355608 0.17252156 0.2116326
8  0.30162542 0.61999432 0.42414211 0.47919535 0.1050210
9  0.75386058 0.93131106 0.15662014 0.59760380 0.2065668
10 0.53751555 0.26525069 0.70712287 0.68107035 0.3462980
11 0.13842091 0.08331169 0.98946944 0.23291172 0.4086069
12 0.51740195 0.85537035 0.81063797 0.25166706 0.7415054
13 0.53728468 0.87944927 0.60250347 0.83621637 0.3352487
14 0.98198041 0.45660407 0.45534214 0.01983250 0.6066148
15 0.90429971 0.25416998 0.34052138 0.19019905 0.6772490
16 0.47207522 0.70634866 0.15597264 0.86617838 0.7430149
17 0.46777513 0.53358147 0.96820632 1.04273436 0.4630704
18 0.12433247 0.13473101 0.12024855 0.01636139 0.6054500
19 0.17063218 0.16157953 0.63448036 0.74370136 0.4062533
20 0.07684267 0.29309187 0.21706908 0.17998560 0.2270004'
input <- gsub("\r","",input)
input
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
View(df1)
class(df1)
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
if(type=="sum"){
sums = colSums(data,na.rm = T)
result = t(t(data)/sums*mean(sums,na.rm = T))
}else if(type=="median"){
medians = apply(data,2,median,na.rm = T)
result = t(t(data)/medians*mean(medians,na.rm = T))
}else if(type=='mean'){
means = colMeans(data,na.rm = T)
result = t(t(data)/means*mean(means,na.rm = T))
}else if(type=="custom sample weight"){
weight <- gsub("\r","",weight)
cfile <- strsplit(weight,"\n")[[1]]
df2 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df2) = as.matrix(df2[1,])[1,]
df2 = df2[-1,]
weight = as.numeric(df2[1,]);
weight = weight[!is.na(weight)]
result = t(t(data)*weight)
}
result = cbind(data.frame(df1[,1]),result)
rownames(result) = 1:nrow(result)
colnames(result) = colnames(df1)
fwrite(data.table(result),"SampleSpecific-normalization.csv")
fwrite(data.table(result),"SampleSpecific-normalization.txt",sep = "\r")
input = 'compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1	0.375539896	0.065899686	0.496939834	0.534084846	0.716702517	0.950021081	0.750360989	0.689267761	0.484818318	0.531683366
compound 2	0.206362605	0.751998348	0.942184615	0.206394675	0.585332792	0.747429124	0.591602986	0.892103949	0.213276914	0.841363479
compound 3	0.320140356	0.282510381	0.152143414	0.660063056	0.563975871	0.455721993	0.248184925	0.551075501	0.513916307	0.605137837
compound 4	0.20639852	0.342488513	0.377058181	0.072792314	0.111507061	0.349741009	0.207383158	0.38826326	0.562160107	0.589853168
compound 5	0.135425902	0.051918493	0.227762081	0.403017838	0.655777946	0.011849089	0.271320615	0.073403869	0.84444792	0.615436238
compound 6	0.616156795	0.621099447	0.331352935	0.559438334	0.852012923	0.542562227	0.815533378	0.225449985	0.299553123	0.691357522
compound 7	0.352797968	0.075572132	0.357330296	0.502733849	0.234612323	0.755412168	0.782320137	0.278486293	0.146923068	0.224468534
compound 8	0.212669408	0.963328103	0.264610641	0.939520504	0.915010224	0.306447668	0.638220615	0.416558741	0.408093063	0.111390696
compound 9	0.737475111	0.477069404	0.409384057	0.130882785	0.76113433	0.765912965	0.958689287	0.153819885	0.508932246	0.219095508
compound 10	0.441638219	0.906535571	0.904896034	0.514376867	0.946055314	0.546109101	0.273048397	0.694480005	0.580014151	0.367301685
compound 11	0.560800522	0.241851762	0.915308656	0.276144522	0.52710235	0.140633921	0.085760849	0.971778416	0.198352625	0.433389727
compound 12	0.3042778	0.087429392	0.339533042	0.258864548	0.434145082	0.525673934	0.880516111	0.796144325	0.21432508	0.786479185
compound 13	0.927352596	0.809354145	0.521789817	0.132598009	0.354873129	0.54587454	0.905302895	0.591731126	0.712139836	0.355582239
compound 14	0.80044224	0.755691572	0.679934638	0.433222185	0.673573865	0.997679865	0.470027094	0.447200938	0.016889784	0.643407241
compound 15	0.374319379	0.398598057	0.597866875	0.113390755	0.889121439	0.91875724	0.261641946	0.33443309	0.161977598	0.718325491
compound 16	0.824364189	0.557636205	0.027706202	0.64560174	0.123939069	0.479622547	0.727113559	0.153183953	0.737656127	0.788080284
compound 17	0.532976966	0.706289045	0.486952088	0.412154294	0.439943672	0.475253711	0.549267441	0.950895467	0.888014992	0.491156531
compound 18	0.658270205	0.310558256	0.560285311	0.369547645	0.50986586	0.126320243	0.138691771	0.118098592	0.013933713	0.642171724
compound 19	0.976136566	0.935824649	0.477713008	0.369850288	0.830332397	0.173360166	0.166329562	0.623136293	0.633352067	0.430893335
compound 20	0.934374814	0.840576377	0.384396985	0.328708995	0.146584056	0.078071197	0.301708041	0.213188032	0.153279604	0.240768458
'
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
if(type=="sum"){
sums = colSums(data,na.rm = T)
result = t(t(data)/sums*mean(sums,na.rm = T))
}else if(type=="median"){
medians = apply(data,2,median,na.rm = T)
result = t(t(data)/medians*mean(medians,na.rm = T))
}else if(type=='mean'){
means = colMeans(data,na.rm = T)
result = t(t(data)/means*mean(means,na.rm = T))
}else if(type=="custom sample weight"){
weight <- gsub("\r","",weight)
cfile <- strsplit(weight,"\n")[[1]]
df2 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df2) = as.matrix(df2[1,])[1,]
df2 = df2[-1,]
weight = as.numeric(df2[1,]);
weight = weight[!is.na(weight)]
result = t(t(data)*weight)
}
result = cbind(data.frame(df1[,1]),result)
rownames(result) = 1:nrow(result)
colnames(result) = colnames(df1)
fwrite(data.table(result),"SampleSpecific-normalization.csv")
fwrite(data.table(result),"SampleSpecific-normalization.txt",sep = "\r")
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
if(type=="sum"){
sums = colSums(data,na.rm = T)
result = t(t(data)/sums*mean(sums,na.rm = T))
}else if(type=="median"){
medians = apply(data,2,median,na.rm = T)
result = t(t(data)/medians*mean(medians,na.rm = T))
}else if(type=='mean'){
means = colMeans(data,na.rm = T)
result = t(t(data)/means*mean(means,na.rm = T))
}else if(type=="custom sample weight"){
weight <- gsub("\r","",weight)
cfile <- strsplit(weight,"\n")[[1]]
df2 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df2) = as.matrix(df2[1,])[1,]
df2 = df2[-1,]
weight = as.numeric(df2[1,]);
weight = weight[!is.na(weight)]
result = t(t(data)*weight)
}
result = cbind(data.frame(df1[,1]),result)
rownames(result) = 1:nrow(result)
colnames(result) = colnames(df1)
fwrite(data.table(result),"SampleSpecific-normalization.csv")
fwrite(data.table(result),"SampleSpecific-normalization.txt",sep = "\t")
input='compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1	0.348312022821229	0.0630167653606814	0.511742034960464	0.661326906264506	0.619111570773783	0.935071579320989	0.728932195262421	0.701815738164814	0.569288492856941	0.501279735769698
compound 2	0.191400639846288	0.719100595525387	0.970249191552113	0.255566794132965	0.505630014803651	0.735667602947838	0.574708000056734	0.908344517055079	0.250436273598555	0.793251189354292
compound 3	0.296929131026517	0.270151369028279	0.156675265211668	0.817318562833695	0.48718119316068	0.448550766133808	0.241097265000925	0.56110771662634	0.603456241244241	0.57053380721263
compound 4	0.191433950891087	0.327505631247616	0.388289502353379	0.0901345847537013	0.0963235234292864	0.344237495545582	0.201460714026264	0.395331512421016	0.660105586312287	0.556123172373158
compound 5	0.125607080287442	0.0496472091120613	0.23454636324801	0.499034080390197	0.566482891571686	0.0116626321103131	0.263572246440307	0.074740171267619	0.991576567601925	0.580243307381816
compound 6	0.571483408094397	0.593928142802501	0.341222847607387	0.692720689307836	0.735997218603451	0.534024484958564	0.79224339251373	0.229554255391935	0.351744436197767	0.651823130292462
compound 7	0.327218959131041	0.0722660698269555	0.367973988633934	0.622506748737854	0.202665960241655	0.743525026019978	0.759978654569165	0.283556078420122	0.172521558782434	0.211632589258268
compound 8	0.197250178960143	0.921185285042197	0.272492520487969	1.16335483572659	0.790416391205044	0.301625417190078	0.619994323763655	0.424142106805893	0.479195352475611	0.105020962153032
compound 9	0.684005748600198	0.456198997558624	0.421578259732647	0.162064713005043	0.657493254786701	0.753860582810553	0.931311057999945	0.156620144222445	0.597603804424811	0.206566812847344
compound 10	0.409618000786406	0.866877262037611	0.931849906535794	0.63692363611294	0.817234176797826	0.537515545461497	0.265250686477379	0.707122869989822	0.681070350684415	0.346298010016294
compound 11	0.52014064630039	0.231271446999328	0.94257268625072	0.341934064940968	0.45532861421087	0.138420910067756	0.0833116924327991	0.989469441263587	0.232911717127957	0.408606892237929
compound 12	0.282216662321261	0.0836046090005806	0.349646613053355	0.320537255367848	0.375029021505073	0.517401945602992	0.855370349957198	0.810637967928406	0.251667062164601	0.741505383196749
compound 13	0.860116493671496	0.773947242315538	0.537332217109462	0.164188577387203	0.306551260961453	0.537284675505973	0.879449273487984	0.602503468878746	0.836216369901743	0.335248725479814
compound 14	0.74240755439192	0.722632251658505	0.700187651469748	0.536434406399914	0.581855600755925	0.981980406203535	0.456604069887535	0.455342138670645	0.0198325007968021	0.60661482450965
compound 15	0.347179997303606	0.381160545001573	0.615675360103962	0.140405326540844	0.768052794082676	0.90429970513401	0.254169980671146	0.340521375299156	0.190199048217496	0.677248970630987
compound 16	0.764595083692445	0.533241234064542	0.0285314785059184	0.799411937243361	0.107062707146639	0.4720752217721	0.706348664891668	0.155972635211788	0.866178378983028	0.743014925407368
compound 17	0.494334389293705	0.675390942311694	0.501456786902229	0.510347234519086	0.380038037209664	0.467775133637199	0.533581472682747	0.96820632249211	1.04273435565619	0.463070375764288
compound 18	0.610543457855394	0.296972230629057	0.576974365089027	0.457589842916427	0.440439158480765	0.124332471651986	0.134731014247681	0.120248552464512	0.0163613918434311	0.605449958962025
compound 19	0.905363465971744	0.894885027597476	0.491942505138367	0.457964588540444	0.717268856153648	0.170632175911651	0.161579525779021	0.634480360454695	0.743701362517945	0.406253253207331
compound 20	0.866629577853294	0.803803591979796	0.395846905153848	0.407021663978583	0.126624203219524	0.0768426711136003	0.293091868951698	0.217069076071272	0.179985597711819	0.227000423044865
'
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
if(type=="sum"){
sums = colSums(data,na.rm = T)
result = t(t(data)/sums*mean(sums,na.rm = T))
}else if(type=="median"){
medians = apply(data,2,median,na.rm = T)
result = t(t(data)/medians*mean(medians,na.rm = T))
}else if(type=='mean'){
means = colMeans(data,na.rm = T)
result = t(t(data)/means*mean(means,na.rm = T))
}else if(type=="custom sample weight"){
weight <- gsub("\r","",weight)
cfile <- strsplit(weight,"\n")[[1]]
df2 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df2) = as.matrix(df2[1,])[1,]
df2 = df2[-1,]
weight = as.numeric(df2[1,]);
weight = weight[!is.na(weight)]
result = t(t(data)*weight)
}
result = cbind(data.frame(df1[,1]),result)
rownames(result) = 1:nrow(result)
colnames(result) = colnames(df1)
fwrite(data.table(result),"SampleSpecific-normalization.csv")
fwrite(data.table(result),"SampleSpecific-normalization.txt",sep = "\t")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
library(WCMC.Normalization.SampleSpecific)
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
devtools::install("C:\\Users\\Sili Fan\\Documents\\GitHub\\WCMC_DA\\WCMC.Normalization.SampleSpecific")
library(opencpu);
opencpu$browse("library/WCMC.Normalization.SampleSpecific/www")
library(WCMC.Normalization.SampleSpecific)
