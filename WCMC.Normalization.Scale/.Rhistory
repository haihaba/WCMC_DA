input = 'compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1	0.894207289	0.598851438	0.606744294	0.760222002	0.417171065	0.016153719	0.211267903	0.581387676	0.953586289	0.171364631
compound 2	0.835728616	0.46539039	0.594916417	0.657954958	0.028396237	0.978770602	0.300711407	0.610583514	0.028083038	0.306362001
compound 3	0.276162033	0.346031877	0.807432115	0.849076235	0.027530521	0.328103525	0.367816071	0.79721992	0.58179696	0.228584198
compound 4	0.707767011	0.746405561	0.415303522	0.518437216	0.405472524	0.533029054	0.742489751	0.289883516	0.897147968	0.027825026
compound 5	0.45930497	0.238609098	0.743847115	0.603883794	0.169583633	0.053026763	0.877879913	0.336890542	0.764896412	0.184749896
compound 6	0.303541574	0.845014042	0.795982094	0.531826087	0.79922969	0.376754961	0.304924941	0.382281485	0.306303739	0.977145129
compound 7	0.593527365	0.438595555	0.216676812	0.884640475	0.119253363	0.423379905	0.454947123	0.780248801	0.634773116	0.81869592
compound 8	0.374963085	0.225173517	0.712215483	0.636661751	0.509537267	0.576833141	0.994706554	0.439202751	0.653718416	0.374993885
compound 9	0.585638588	0.761210648	0.468334647	0.224029108	0.100157879	0.371283105	0.074618433	0.537550059	0.604040853	0.939400978
compound 10	0.168139487	0.659330393	0.502103008	0.761177883	0.967595943	0.694864782	0.20604173	0.155898142	0.193984898	0.883873372
compound 11	0.877473831	0.412220488	0.824074338	0.769738123	0.695948281	0.011477061	0.870173559	0.754106143	0.859336746	0.22639722
compound 12	0.153223126	0.295752847	0.403718952	0.019130483	0.590052365	0.440393286	0.619315786	0.057913272	0.629635202	0.630586813
compound 13	0.59398351	0.166905161	0.510216532	0.787570792	0.431732934	0.597190501	0.830725922	0.905931719	0.924053079	0.234763724
compound 14	0.248055311	0.484730947	0.791552543	0.822448609	0.775745285	0.594403284	0.04318015	0.397718076	0.762102551	0.802428831
compound 15	0.994151999	0.957997958	0.997891776	0.578509417	0.958477861	0.274816068	0.917862764	0.015733823	0.134368337	0.430986796
compound 16	0.732182766	0.792637299	0.155329668	0.29202525	0.434923243	0.60392331	0.455221098	0.711293499	0.15980522	0.023747044
compound 17	0.563481701	0.673823221	0.061770163	0.91116472	0.440110006	0.573745769	0.513697403	0.076927175	0.332965441	0.803497893
compound 18	0.871121349	0.511144179	0.83775599	0.508666309	0.478985433	0.891611267	0.579587196	0.308640698	0.921292157	0.133409239
compound 19	0.170150363	0.373325502	0.233719662	0.033374992	0.511469199	0.03008754	0.770013231	0.474366184	0.940186664	0.642235978
compound 20	0.042064491	0.574976118	0.626153969	0.908150423	0.86145789	0.102775188	0.774960552	0.270663268	0.042047586	0.968847967
'
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
data
dim(data)
?scale
x = data[1,]
rescale(x,c(min(x,na.rm=T),max(x,na.rm = T)))
pacman::p_load(data.table,plotrix)
rescale(x,c(min(x,na.rm=T),max(x,na.rm = T)))
range(c(0,1,2))
(x - mean(x))/diff(range(x))
diff(range(x))
(x - mean(x))
?scale
result = apply(data,1,function(x){
(x - mean(x))/diff(range(x))
})
dim(result)
dim(e)
dim(data)
result = t(scale(t(data),scale = apply(t(data),2,function(x){sqrt(sd(x,na.rm = T))})))
dim(result)
result[1,1]
x = data[1,]
(x - mean(x))/sqrt(sd(x))
result. = t(scale(t(data),scale = F))
dim(result.)
result = result. * (apply(data,1,function(x){mean(x,na.rm = T)/sd(x,na.rm = T)}))
result[1,1]
result[1,2]
scale(x)*mean(x)/sd(x)
((x-mean(x))/sd(x))*(mean(x)/sd(x))
result[1,1]
result. = t(scale(t(data),scale = F))
(apply(data,1,function(x){mean(x,na.rm = T)/sd(x,na.rm = T)}))[1]
mean(x)/sd(s)
mean(x)/sd(x)
(apply(data,1,function(x){mean(x,na.rm = T)/sd(x,na.rm = T)}))
result. = t(scale(t(data),scale = F))
dim(result.)
result. = t(scale(t(data),scale = T))
result = result. * (apply(data,1,function(x){mean(x,na.rm = T)/sd(x,na.rm = T)}))
result[1,1]
result[1,2]
mean. = rowMeans(x,na.rm=T)
mean. = rowMeans(data,na.rm=T)
mean.
result = (data - mean)/mean
(data - mean)
result = (data - mean.)/mean.
result[1,1]
(x - mean(x))/mean(x)
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
if(method=="auto"){
result = t(scale(t(data)))
}else if(method == 'centering'){
result = t(scale(t(data),scale = F))
}else if(method=="range"){
result = t(apply(data,1,function(x){
(x - mean(x))/diff(range(x))
}))
}else if(method=="pareto"){
result = t(scale(t(data),scale = apply(t(data),2,function(x){sqrt(sd(x,na.rm = T))})))
}else if(method=="vast"){
result. = t(scale(t(data),scale = T))
result = result. * (apply(data,1,function(x){mean(x,na.rm = T)/sd(x,na.rm = T)}))
}else if(method=="level"){
mean. = rowMeans(data,na.rm=T)
result = (data - mean.)/mean.
}
result = cbind(data.frame(df1[,1]),result)
rownames(result) = 1:nrow(result)
colnames(result) = colnames(df1)
method = 'auto'
library(pacman)
pacman::p_load(data.table)
input <- gsub("\r","",input)
cfile <- strsplit(input,"\n")[[1]]
df1 <- as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
colnames(df1) = as.matrix(df1[1,])[1,]
df1 = df1[-1,]
data = sapply(df1[,-1], as.numeric)
if(method=="auto"){
result = t(scale(t(data)))
}else if(method == 'centering'){
result = t(scale(t(data),scale = F))
}else if(method=="range"){
result = t(apply(data,1,function(x){
(x - mean(x))/diff(range(x))
}))
}else if(method=="pareto"){
result = t(scale(t(data),scale = apply(t(data),2,function(x){sqrt(sd(x,na.rm = T))})))
}else if(method=="vast"){
result. = t(scale(t(data),scale = T))
result = result. * (apply(data,1,function(x){mean(x,na.rm = T)/sd(x,na.rm = T)}))
}else if(method=="level"){
mean. = rowMeans(data,na.rm=T)
result = (data - mean.)/mean.
}
result = cbind(data.frame(df1[,1]),result)
rownames(result) = 1:nrow(result)
colnames(result) = colnames(df1)
result
library(WCMC.Normalization.Scale)
library(WCMC.Normalization.Scale)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.Scale/www")
library(WCMC.Normalization.Scale)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.Scale/www")
library(WCMC.Normalization.Scale)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.Scale/www")
library(WCMC.Normalization.Scale)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.Scale/www")
library(WCMC.Normalization.Scale)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.Scale/www")
library(WCMC.Normalization.Scale)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.Scale/www")
library(WCMC.Normalization.Scale)
library(opencpu);
opencpu$browse("library/WCMC.Normalization.Scale/www")
library(WCMC.Normalization.Scale)
