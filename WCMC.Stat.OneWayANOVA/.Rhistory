input = 'treatment	Control	Control	Control	Treatment1	Treatment1	Treatment1	Treatment2	Treatment2	Treatment2	Treatment2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1	0.562917407	0.866493472	0.929176609	0.980684907	0.071391807	0.269071706	0.506483052	0.635544899	0.530311514	0.433309909
compound 2	0.696437378	0.154890888	0.447110458	0.249197209	0.630853785	0.443993652	0.11858224	0.740909079	0.614226043	0.045262065
compound 3	0.796572251	0.402817946	0.747305902	0.648801009	0.693622463	0.425945817	0.367175454	0.701759929	0.788924953	0.226193595
compound 4	0.85821477	0.636224987	0.659878453	0.98091916	0.762098944	0.256854685	0.709398252	0.23086902	0.143896144	0.614421569
compound 5	0.257066407	0.699660099	0.996899089	0.493430688	0.816253646	0.420964641	0.558259135	0.942825584	0.770507477	0.179812457
compound 6	0.017969016	0.461063439	0.355158187	0.24787359	0.891940082	0.965420648	0.199605244	0.010194983	0.353472819	0.433679666
compound 7	0.700829372	0.47186639	0.900970336	0.299649012	0.56632352	0.038544301	0.027709885	0.970745995	0.048843101	0.356278963
compound 8	0.936019876	0.410642433	0.753222426	0.815136191	0.260340539	0.422508631	0.278672561	0.701789281	0.594067456	0.600312071
compound 9	0.139549114	0.463034327	0.932455104	0.007117144	0.940987669	0.964410999	0.089252993	0.623051275	0.031195774	0.271648309
compound 10	0.359198496	0.331110854	0.537759163	0.055361001	0.128259683	0.770447192	0.872412682	0.529067841	0.011292384	0.304301258
compound 11	0.420789366	0.872896457	0.213813734	0.471445203	0.560077689	0.226511704	0.878159734	0.995571556	0.027045426	0.568257065
compound 12	0.529888855	0.885580017	0.892696797	0.288242099	0.009131628	0.61167868	0.170105061	0.570434797	0.187963678	0.943234649
compound 13	0.552266895	0.482186947	0.068396091	0.575103821	0.662331397	0.349541215	0.287204106	0.375730268	0.074908563	0.767190419
compound 14	0.266650233	0.844322251	0.920650933	0.498931022	0.768651023	0.639627876	0.920513442	0.042639587	0.114523155	0.181786922
compound 15	0.878968214	0.317202182	0.929496019	0.913954623	0.450255429	0.215660827	0.503567227	0.288822821	0.310906577	0.766424628
compound 16	0.151655296	0.304969425	0.710151049	0.630220099	0.985969617	0.431383507	0.926145756	0.777612957	0.472686206	0.190909216
compound 17	0.043898702	0.336618016	0.0733511	0.252410661	0.225818104	0.304813313	0.355837624	0.304666477	0.017791962	0.410302648
compound 18	0.329000537	0.101696982	0.556368832	0.149987451	0.299138937	0.799804941	0.476568524	0.903727106	0.769415697	0.356400905
compound 19	0.151717092	0.052602985	0.29202709	0.805193527	0.560662799	0.721242745	0.11784315	0.583070711	0.532161524	0.708690445
compound 20	0.689757877	0.968819687	0.239160953	0.76090554	0.450154532	0.487852184	0.132947813	0.060451546	0.760635204	0.242376354
'
library(pacman)
pacman::p_load(data.table,parallel)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 2)
e = as.matrix(data.$e)
f = data.$f
p = data.$p
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),20))
}else{
cl = makeCluster(1)
}
head(e)
p
f
group=colnames(p)[2]
group
?oneway.test
j = 1
oneway.test(e[j,]~p[[group]])$p.value
group=colnames(p)[2]
OneWayANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group){
oneway.test(e[j,]~p[[group]])$p.value
},e,p,group)
OneWayANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group){
oneway.test(e[j,]~p[[group]])$p.value
},e,p,group)
OneWayANOVA
posthocTGH
library(userfriendlyscience)
posthocTGH
posthocTGH(e[j,] ,p[[group]], digits=4)$output
[,'p']
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]]
colnames(posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]])
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,1]
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,"p"]
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
if(posthocNeeded){
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group)
if(posthocNeeded){
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group)
}
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group)
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group,posthocTGH){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group,posthocTGH)
posthoc
rownames(posthoc) = rownames(posthocTGH(e[1,] ,p[[group]], digits=4)$output[["games.howell"]][,'p'])
posthoc
rownames(posthoc) = rownames(posthocTGH(e[1,] ,p[[group]], digits=4)$output[["games.howell"]])
rownames(posthoc)
rownames
posthoc
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group,posthocTGH){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group,posthocTGH)
posthoc = t(postho)
posthoc
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group,posthocTGH){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group,posthocTGH)
posthoc = t(posthoc)
posthoc
colnames(posthoc) = rownames(posthocTGH(e[1,] ,p[[group]], digits=4)$output[["games.howell"]])
posthoc
posthoc = data.table(t(posthoc))
posthoc
colnames(posthoc) = rownames(posthocTGH(e[1,] ,p[[group]], digits=4)$output[["games.howell"]])
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group,posthocTGH){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group,posthocTGH)
posthoc = data.table(t(posthoc))
colnames(posthoc) = rownames(posthocTGH(e[1,] ,p[[group]], digits=4)$output[["games.howell"]])
posthoc
library(pacman)
pacman::p_load(data.table,parallel)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 2)
e = as.matrix(data.$e)
f = data.$f
p = data.$p
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),20))
}else{
cl = makeCluster(1)
}
group=colnames(p)[2]
OneWayANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group){
oneway.test(e[j,]~p[[group]])$p.value
},e,p,group)
result = data.table(f,OneWayANOVA)
if(posthocNeeded){
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group,posthocTGH){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group,posthocTGH)
posthoc = data.table(t(posthoc))
colnames(posthoc) = rownames(posthocTGH(e[1,] ,p[[group]], digits=4)$output[["games.howell"]])
result = data.table(result,posthoc)
}
posthocNeeded = T
if(posthocNeeded){
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group,posthocTGH){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group,posthocTGH)
posthoc = data.table(t(posthoc))
colnames(posthoc) = rownames(posthocTGH(e[1,] ,p[[group]], digits=4)$output[["games.howell"]])
result = data.table(result,posthoc)
}
result
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c(colnames_f_1,c('p value', 'adjusted p value'))
}else{
colnames(result) = c(colnames(f),c('p value', 'adjusted p value'))
}
result
i = 19
pacman::p_load(userfriendlyscience)
posthoc = parSapply(cl,1:nrow(e),function(j,e,p,group,posthocTGH){
posthocTGH(e[j,] ,p[[group]], digits=4)$output[["games.howell"]][,'p']
},e,p,group,posthocTGH)
posthoc
j = 19
posthocTGH(e[j,] ,p[[group]], digits=4)$output
library(WCMC.Stat.OneWayANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayANOVA/www")
library(WCMC.Stat.OneWayANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayANOVA/www")
library(WCMC.Stat.OneWayANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayANOVA/www")
install.packages('userfriendlyscience')
library(WCMC.Stat.OneWayANOVA)
library(WCMC.Stat.OneWayANOVA)
