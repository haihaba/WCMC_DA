ez
?ez
?plyr
packageVersion("plyr")
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
# .(a, b, c)
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = 1
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
# ANOVAp = NULL
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVAp, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
clusterEvalQ(cl, {
. =.()
})
clusterExport(cl, list("."))
clusterEvalQ(cl, {
. =.()
})
clusterExport(cl, list(".","ezANOVA_main"))
ezANOVA
?ezANOVA_main
??ezANOVA_main
packageVersion("parallel")
packageVersion("ez")
search()
?search
input="treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.705975245	0.146017792	0.741397362	0.554893425	0.463182293	0.743227439	0.074791295	0.470898544	0.423005463
compound 2	0.659188524	0.680440767	0.447153966	0.46620141	0.840516262	0.746146352	0.176705537	0.530749901	0.737488055
compound 3	0.813969368	0.821393602	0.321808105	0.277335129	0.731169297	0.997628867	0.014306658	0.77891845	0.076772782
compound 4	0.444545148	0.067346437	0.269338463	0.294468859	0.118396761	0.82042924	0.972739547	0.898305041	0.570447824
compound 5	0.540828326	0.662180671	0.223239468	0.13760713	0.472513613	0.694465589	0.054704536	0.29602761	0.406276668
compound 6	0.680745945	0.175637434	0.683038257	0.48599175	0.769659018	0.875049848	0.618926899	0.660649806	0.444979802
compound 7	0.485547874	0.941603683	0.837529112	0.10603896	0.603718512	0.294259428	0.971075883	0.843730151	0.976703801
compound 8	0.443798136	0.848561213	0.747624227	0.53866507	0.23114186	0.048453058	0.960527566	0.285846844	0.458000951
compound 9	0.422656577	0.044492125	0.605638232	0.434320544	0.884227947	0.226515184	0.745546271	0.201348502	0.490513859
compound 10	0.053108178	0.720805174	0.859390579	0.398282029	0.318250105	0.623697071	0.624413362	0.598203013	0.921774806
compound 11	0.235519331	0.877461788	0.039414913	0.890791709	0.733699761	0.571252725	0.982462131	0.149116314	0.545906392
compound 12	0.971778268	0.828304974	0.428806062	0.202384787	0.337211838	0.695523338	0.53285508	0.101504349	0.007603959
compound 13	0.825747922	0.929891166	0.114053475	0.844730022	0.847266971	0.779817479	0.371901731	0.600479587	0.982155343
compound 14	0.268256933	0.428522261	0.711663588	0.380791669	0.224141543	0.670691951	0.804609576	0.291488622	0.718105493
compound 15	0.933726747	0.917634916	0.269744108	0.544283262	0.871819517	0.205449192	0.439465273	0.694673519	0.531711165
compound 16	0.314487237	0.001036122	0.004896201	0.966646612	0.082884748	0.510625607	0.831980981	0.416080979	0.919054769
compound 17	0.974045081	0.926673494	0.835620852	0.714870713	0.136148184	0.929958257	0.293289837	0.665391548	0.189106687
compound 18	0.435515251	0.455882669	0.869313037	0.043425084	0.308008838	0.234857189	0.598415677	0.042502651	0.202332708
compound 19	0.678143194	0.692862171	0.541262283	0.857307494	0.775821028	0.810705346	0.661996679	0.11453446	0.758279135
compound 20	0.337999618	0.941845283	0.387369349	0.406933842	0.683933941	0.635238613	0.886460438	0.246533737	0.635021714
"
library(pacman)
# pacman::p_load(data.table,parallel,userfriendlyscience,ez,plyr)
library(data.table)
library(parallel)
library(userfriendlyscience)
library(ez)
library(plyr)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
clusterExport(cl, list(".","ezANOVA"))
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
# .(a, b, c)
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
# ANOVAp = 1
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
# ANOVAp = NULL
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVAp, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
# Greenhouse-Geisser adjusted one-way repeated measures ANOVA. Greenhouse & Geisser (1959)
# The exercise intervention elicited statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 26.938, p < .0005.
# The exercise intervention did not lead to any statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 1.256, p = .300.
# It is suggested only use main effect when interaction term is NOT significant.
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
search()
?ez
library9ez
library(ez)
?ezANOVA
?search()
?tools
tools::rstudio
search()
tools:rstudio
as.environment("tools:rstudio")
detach("tools:rstudio")
search()
input="treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.625760982	0.788682177	0.477196624	0.331597885	0.110532569	0.296956258	0.899808555	0.197729496	0.833568329
compound 2	0.26542312	0.832487428	0.058439242	0.405624634	0.963749458	0.255282592	0.849743166	0.559608259	0.782580518
compound 3	0.04513829	0.491224391	0.769606961	0.275516285	0.43496574	0.320514848	0.481170786	0.127807774	0.758253631
compound 4	0.402885499	0.175011058	0.579774309	0.275829742	0.629556693	0.544502364	0.632205277	0.264886487	0.587490991
compound 5	0.892901574	0.253591161	0.919387654	0.290160466	0.037557392	0.512808351	0.443582188	0.76971392	0.399269259
compound 6	0.935222208	0.20197003	0.060532186	0.991745308	0.322650575	0.525906568	0.681227616	0.06178125	0.837022596
compound 7	0.77002302	0.868491316	0.01655877	0.439613534	0.920496673	0.207482733	0.540677493	0.527824971	0.218426143
compound 8	0.933878	0.863492065	0.672419682	0.131489643	0.512632702	0.889701284	0.644689734	0.786565746	0.50683305
compound 9	0.394648269	0.227419482	0.119540909	0.147965294	0.525544465	0.975637459	0.674261991	0.971953503	0.156779479
compound 10	0.938546679	0.609551343	0.748507598	0.889764043	0.300481332	0.005116196	0.910902491	0.089680206	0.477096568
compound 11	0.737175333	0.608352033	0.713372393	0.42546117	0.931397971	0.116881916	0.552354369	0.706245469	0.80108567
compound 12	0.060243047	0.994166737	0.150489106	0.73020638	0.983905273	0.920934969	0.852153722	0.913619925	0.430905947
compound 13	0.334871307	0.490576614	0.682456264	0.3735028	0.238084252	0.067440979	0.862629798	0.914610152	0.630416104
compound 14	0.654031502	0.847936198	0.266481174	0.345608184	0.755123454	0.23407337	0.457978555	0.992500827	0.451526695
compound 15	0.053792512	0.463316833	0.169923129	0.777458106	0.431812033	0.939632705	0.71447786	0.894137327	0.200763358
compound 16	0.447823962	0.066289262	0.035845717	0.356492996	0.608956468	0.12491643	0.793149357	0.361122608	0.309618936
compound 17	0.199098908	0.320888504	0.98883047	0.568472477	0.450531242	0.91556608	0.627899723	0.070607471	0.240183816
compound 18	0.255233314	0.054995845	0.120089994	0.362655009	0.778883088	0.564095473	0.46260673	0.675915494	0.574268012
compound 19	0.693592973	0.139693645	0.964819549	0.543335278	0.903488027	0.986463525	0.058909786	0.636614753	0.76456688
compound 20	0.496349964	0.610709022	0.486410111	0.37884985	0.725663341	0.195139375	0.181159781	0.538269747	0.432506401
"
library(pacman)
# pacman::p_load(data.table,parallel,userfriendlyscience,ez,plyr)
library(data.table)
library(parallel)
library(userfriendlyscience)
library(ez)
library(plyr)
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
clusterExport(cl, list(".","ezANOVA"))
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
# .(a, b, c)
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
# ANOVAp = 1
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
# ANOVAp = NULL
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVAp, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
search()
library(pacman)
# pacman::p_load(data.table,parallel,userfriendlyscience,ez,plyr)
library(data.table)
library(parallel)
library(userfriendlyscience)
library(ez)
library(plyr)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
clusterExport(cl, list(".","ezANOVA"))
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
# .(a, b, c)
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
# ANOVAp = 1
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
# ANOVAp = NULL
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVAp, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
posthocNeeded
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
rstd.obj <- as.environment("tools:rstudio")
as.environment("tools:rstudio")
refresh
refresh()
.rs.restartR()
.rs.restartR
.rs.restartR
.rs.restartR()
?.rs.restartR
??.rs.restartR
.rs.restartR
attach()
?attach
attach(rstudio)
attach(tools:rstudio)
attach(NULL, name="tools:rstudio")
search()
detach("tools:rstudio")
search()
attach(NULL, name="tools:rstudio")
search()
ezANOVA_main
.ezANOVA_main
ezANOVA_main
ezANOVA_main()
clusterEvalQ(cl,.)
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez,plyr)
clusterEvalQ(cl,.)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
clusterEvalQ(cl,.)
clusterExport(cl, list(".","ezANOVA"))
clusterEvalQ(cl,.)
clusterEvalQ(cl,ezANOVA_main)
clusterEvalQ(cl, library(ez))
Sys.info()['sysname']
Sys.info()['sysname']=="Windows"
input = "treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.705975245	0.146017792	0.741397362	0.554893425	0.463182293	0.743227439	0.074791295	0.470898544	0.423005463
compound 2	0.659188524	0.680440767	0.447153966	0.46620141	0.840516262	0.746146352	0.176705537	0.530749901	0.737488055
compound 3	0.813969368	0.821393602	0.321808105	0.277335129	0.731169297	0.997628867	0.014306658	0.77891845	0.076772782
compound 4	0.444545148	0.067346437	0.269338463	0.294468859	0.118396761	0.82042924	0.972739547	0.898305041	0.570447824
compound 5	0.540828326	0.662180671	0.223239468	0.13760713	0.472513613	0.694465589	0.054704536	0.29602761	0.406276668
compound 6	0.680745945	0.175637434	0.683038257	0.48599175	0.769659018	0.875049848	0.618926899	0.660649806	0.444979802
compound 7	0.485547874	0.941603683	0.837529112	0.10603896	0.603718512	0.294259428	0.971075883	0.843730151	0.976703801
compound 8	0.443798136	0.848561213	0.747624227	0.53866507	0.23114186	0.048453058	0.960527566	0.285846844	0.458000951
compound 9	0.422656577	0.044492125	0.605638232	0.434320544	0.884227947	0.226515184	0.745546271	0.201348502	0.490513859
compound 10	0.053108178	0.720805174	0.859390579	0.398282029	0.318250105	0.623697071	0.624413362	0.598203013	0.921774806
compound 11	0.235519331	0.877461788	0.039414913	0.890791709	0.733699761	0.571252725	0.982462131	0.149116314	0.545906392
compound 12	0.971778268	0.828304974	0.428806062	0.202384787	0.337211838	0.695523338	0.53285508	0.101504349	0.007603959
compound 13	0.825747922	0.929891166	0.114053475	0.844730022	0.847266971	0.779817479	0.371901731	0.600479587	0.982155343
compound 14	0.268256933	0.428522261	0.711663588	0.380791669	0.224141543	0.670691951	0.804609576	0.291488622	0.718105493
compound 15	0.933726747	0.917634916	0.269744108	0.544283262	0.871819517	0.205449192	0.439465273	0.694673519	0.531711165
compound 16	0.314487237	0.001036122	0.004896201	0.966646612	0.082884748	0.510625607	0.831980981	0.416080979	0.919054769
compound 17	0.974045081	0.926673494	0.835620852	0.714870713	0.136148184	0.929958257	0.293289837	0.665391548	0.189106687
compound 18	0.435515251	0.455882669	0.869313037	0.043425084	0.308008838	0.234857189	0.598415677	0.042502651	0.202332708
compound 19	0.678143194	0.692862171	0.541262283	0.857307494	0.775821028	0.810705346	0.661996679	0.11453446	0.758279135
compound 20	0.337999618	0.941845283	0.387369349	0.406933842	0.683933941	0.635238613	0.886460438	0.246533737	0.635021714
"
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez,plyr)
library(ez)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
ID = colnames(p)[3]
group=colnames(p)[2]
multicore = T
multicore
cl = makeCluster(min(detectCores(),20))
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
# .(a, b, c)
attach(NULL, name="tools:rstudio")
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
# ANOVAp = 1
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
# ANOVAp = NULL
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVAp, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
ANOVA
j = 1
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
ANOVAp
test.temp
posthocNeeded
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
post_hoc
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
post_hoc
ANOVA = NULL
j = 1
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
cbind(ANOVA,c(ANOVAp,post_hoc))
ANOVA = NULL
for(j in 1:nrow(e)){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
ANOVA = cbind(ANOVA,c(ANOVAp,post_hoc))
}
dim()
dim(ANOVA)
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVAp, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
dim(ANIVA)
dim(ANOVA)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
find.package("ez")
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/ez_4.4-0.tar.gz")))
purl <- "http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages"
library(RCurl)
library(jsonlite)
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/ez_4.4-0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/ez-master.zip")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/ez-master.zip")))
pacman::p_load(data.table,parallel,userfriendlyscience,ez,plyr)
?p_load
install.packages('ez')
install.packages("ez")
install.packages('ez')
?setRepositories
setRepositories
setRepositories()
install.packages('ez')
available.packages()
View(available.packages())
library(WCMC.Stat.OneWayRepANOVA)
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
purl <- "http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages"
library(RCurl)
library(jsonlite)
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
?library
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
library(WCMC.Stat.OneWayRepANOVA)
library(devtools)
?install_github
?sessionInfo
sessionInfo("Matrix")
sessionInfo(package = "Matrix")
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.Boxplot_0.1.0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.Boxplot_0.1.0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.Boxplot_0.1.0.tar.gz")))
ezANOVA
library(ez)
ezANOVA
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
?library
?p_load
library(pacman)
?p_load
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.OneWayRepANOVA_0.1.0.tar.gz")))
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
?adjust.p
?p.adjust
library(WCMC.Stat.OneWayRepANOVA)
<div class='well well-sm'><p><b>p value:</b> the raw p value of student t test.</p><p><b>adjusted p value:</b> adjusted p value using Benjamini & Hochberg (1995) FDR procedure.</p><p><b>FC: A/B:</b> the fold change of A divided by B.</p></div>
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
