multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
# Greenhouse-Geisser adjusted one-way repeated measures ANOVA. Greenhouse & Geisser (1959)
# The exercise intervention elicited statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 26.938, p < .0005.
# The exercise intervention did not lead to any statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 1.256, p = .300.
# It is suggested only use main effect when interaction term is NOT significant.
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
posthocNeeded = T
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
?ezANOVA
.()
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = "var2", type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
library(WCMC.Stat.OneWayRepANOVA)
input = "treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.294881153	0.880659488	0.159939127	0.48103985	0.095706337	0.616708468	0.214103106	0.347668255	0.79709001
compound 2	0.547850791	0.644750553	0.73370815	0.613230039	0.066892357	0.304240567	0.216674371	0.845701558	0.812377216
compound 3	0.410271663	0.744912989	0.43783281	0.51962304	0.663602506	0.390564452	0.815493839	0.592902864	0.838048482
compound 4	0.521447754	0.522704236	0.608814502	0.333440866	0.501477977	0.725780055	0.165263262	0.897590331	0.787426228
compound 5	0.077159723	0.575816854	0.539885333	0.0835435	0.931650376	0.390248576	0.780519002	0.961100977	0.77607232
compound 6	0.487760721	0.847452729	0.007867113	0.070183171	0.183704334	0.145563098	0.032242672	0.743074242	0.847127413
compound 7	0.072072569	0.830891965	0.056180013	0.738031773	0.602097188	0.080042793	0.617878752	0.740711434	0.619535608
compound 8	0.66052182	0.18508093	0.23993219	0.631029656	0.920759708	0.346361396	0.85161476	0.537998669	0.77032404
compound 9	0.353804434	0.451009607	0.731222928	0.239011966	0.11129598	0.819706313	0.610566236	0.895680231	0.960596268
compound 10	0.048450313	0.307534067	0.620961172	0.007028494	0.551361658	0.072769741	0.751137917	0.944931415	0.259469207
compound 11	0.865411394	0.463211015	0.106169127	0.216453413	0.717608303	0.199290573	0.130899227	0.025363787	0.824979107
compound 12	0.563138868	0.293738508	0.113575254	0.100229542	0.756191779	0.411925179	0.720392162	0.486669938	0.080763806
compound 13	0.200887677	0.687764919	0.472343167	0.889455588	0.340254727	0.940407206	0.018189925	0.607717733	0.710239709
compound 14	0.889289164	0.158888244	0.940345708	0.941231647	0.930119587	0.716262363	0.912832242	0.768358742	0.239932529
compound 15	0.905116283	0.513187042	0.547629629	0.966338492	0.244671001	0.783263792	0.167111167	0.15971036	0.029379311
compound 16	0.900862975	0.453023376	0.675594493	0.891101023	0.449740059	0.280377716	0.425925553	0.438116427	0.984421481
compound 17	0.136525039	0.804925251	0.707728392	0.200659321	0.099597537	0.369143257	0.630298333	0.861359123	0.288484097
compound 18	0.725877346	0.380867929	0.944574298	0.090080721	0.922552677	0.063900955	0.035994154	0.239980541	0.38853483
compound 19	0.960415714	0.677125503	0.505709193	0.909885445	0.789032911	0.523914911	0.145911447	0.605630296	0.082872346
compound 20	0.79566079	0.673789233	0.175107153	0.374367481	0.412385265	0.211425648	0.071239734	0.443793337	0.375983422
"
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = F
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
posthocNeeded = T
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
# Greenhouse-Geisser adjusted one-way repeated measures ANOVA. Greenhouse & Geisser (1959)
# The exercise intervention elicited statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 26.938, p < .0005.
# The exercise intervention did not lead to any statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 1.256, p = .300.
# It is suggested only use main effect when interaction term is NOT significant.
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
fwrite(data.table(result),"OneWayRepANOVA.csv")
fwrite(data.table(result),"OneWayRepANOVA.txt",sep = "\t")
stopCluster(cl)
?install.packages
getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(char="parallel")))
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(char="parallel")))
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(char="parallel")))
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(char="parallel")))
install.packages("parallel")
install.packages("parallel")
R.Version()
input ="treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.294881153	0.880659488	0.159939127	0.48103985	0.095706337	0.616708468	0.214103106	0.347668255	0.79709001
compound 2	0.547850791	0.644750553	0.73370815	0.613230039	0.066892357	0.304240567	0.216674371	0.845701558	0.812377216
compound 3	0.410271663	0.744912989	0.43783281	0.51962304	0.663602506	0.390564452	0.815493839	0.592902864	0.838048482
compound 4	0.521447754	0.522704236	0.608814502	0.333440866	0.501477977	0.725780055	0.165263262	0.897590331	0.787426228
compound 5	0.077159723	0.575816854	0.539885333	0.0835435	0.931650376	0.390248576	0.780519002	0.961100977	0.77607232
compound 6	0.487760721	0.847452729	0.007867113	0.070183171	0.183704334	0.145563098	0.032242672	0.743074242	0.847127413
compound 7	0.072072569	0.830891965	0.056180013	0.738031773	0.602097188	0.080042793	0.617878752	0.740711434	0.619535608
compound 8	0.66052182	0.18508093	0.23993219	0.631029656	0.920759708	0.346361396	0.85161476	0.537998669	0.77032404
compound 9	0.353804434	0.451009607	0.731222928	0.239011966	0.11129598	0.819706313	0.610566236	0.895680231	0.960596268
compound 10	0.048450313	0.307534067	0.620961172	0.007028494	0.551361658	0.072769741	0.751137917	0.944931415	0.259469207
compound 11	0.865411394	0.463211015	0.106169127	0.216453413	0.717608303	0.199290573	0.130899227	0.025363787	0.824979107
compound 12	0.563138868	0.293738508	0.113575254	0.100229542	0.756191779	0.411925179	0.720392162	0.486669938	0.080763806
compound 13	0.200887677	0.687764919	0.472343167	0.889455588	0.340254727	0.940407206	0.018189925	0.607717733	0.710239709
compound 14	0.889289164	0.158888244	0.940345708	0.941231647	0.930119587	0.716262363	0.912832242	0.768358742	0.239932529
compound 15	0.905116283	0.513187042	0.547629629	0.966338492	0.244671001	0.783263792	0.167111167	0.15971036	0.029379311
compound 16	0.900862975	0.453023376	0.675594493	0.891101023	0.449740059	0.280377716	0.425925553	0.438116427	0.984421481
compound 17	0.136525039	0.804925251	0.707728392	0.200659321	0.099597537	0.369143257	0.630298333	0.861359123	0.288484097
compound 18	0.725877346	0.380867929	0.944574298	0.090080721	0.922552677	0.063900955	0.035994154	0.239980541	0.38853483
compound 19	0.960415714	0.677125503	0.505709193	0.909885445	0.789032911	0.523914911	0.145911447	0.605630296	0.082872346
compound 20	0.79566079	0.673789233	0.175107153	0.374367481	0.412385265	0.211425648	0.071239734	0.443793337	0.375983422
"
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = F
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
# Greenhouse-Geisser adjusted one-way repeated measures ANOVA. Greenhouse & Geisser (1959)
# The exercise intervention elicited statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 26.938, p < .0005.
# The exercise intervention did not lead to any statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 1.256, p = .300.
# It is suggested only use main effect when interaction term is NOT significant.
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(char="ez")))
utils::install.packages("ez")
?install.packages
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(pkgs="ez")))
?userfriendlyscience
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(pkgs="userfriendlyscience")))
library(WCMC.Stat.OneWayRepANOVA)
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
library(RCurl)
library(jsonlite)
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
purl <- "http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/devtools/R/install_github"
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)
j = 1
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)
ANOVAp
ANOVAp['Sphericity Corrections']
ANOVAp[['Sphericity Corrections']]
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
?ezANOVA
ezANOVA
args_to_check = c("dv", "wid", "within", "between", "observed",
"diff", "within_full", "within_covariates", "between_covariates")
match.call()
args = as.list(match.call()[-1])
args
length(args)
?match.call
paste(arg_name, "=.(", arg_vals, ")",
sep = "")
args_to_check
parse("wid = .(var2)")
eval(parse("wid = .(var2)"))
?eval
?ezANOVA
?.
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(pkgs="plyr")))
remove.packages("plyr")
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
?.
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
install.packages("plyr")
install.packages("plyr")
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
devtools::install_github("slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
installed.packages ()
dim(installed.packages ())
names(installed.packages ())
rownames(installed.packages ())
pacman::p_load("WCMC.Stat.TwoWayMixedANOVA2")
rownames(installed.packages())
rownames(installed.packages())[1]
i = "abind"
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(pkgs=i)))
for(i in rownames(installed.packages())){
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(pkgs=i)))
}
for(i in rownames(installed.packages())){
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(pkgs=i)))
print(i)
}
input = "treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.610517368	0.968351962	0.127144358	0.558165864	0.393538305	0.153097741	0.02594971	0.297608279	0.618415545
compound 2	0.45640109	0.216791919	0.170251582	0.812814948	0.998275009	0.114068715	0.951867759	0.438422613	0.809347756
compound 3	0.361589997	0.723490998	0.555948988	0.988741901	0.018267498	0.308163305	0.172859967	0.312141694	0.529364574
compound 4	0.820528144	0.428534133	0.262533192	0.210532436	0.130781333	0.245854147	0.624187311	0.377496519	0.888655243
compound 5	0.340434795	0.384370439	0.791476719	0.028659265	0.878664599	0.647141623	0.649848912	0.805435347	0.354375542
compound 6	0.83679508	0.242246912	0.324240208	0.088624756	0.088686506	0.183470467	0.045095188	0.403636785	0.163339929
compound 7	0.564586497	0.382935823	0.495587403	0.260402596	0.202631602	0.94680613	0.500951179	0.617751151	0.503197685
compound 8	0.688030157	0.227073932	0.771548526	0.690935893	0.784177293	0.338645771	0.301987492	0.049449955	0.244229399
compound 9	0.780078969	0.705770565	0.036979995	0.913735842	0.807597905	0.274234313	0.0340996	0.278324808	0.647155637
compound 10	0.61633168	0.751438139	0.821334433	0.274509785	0.112544161	0.461184447	0.080364853	0.586724791	0.657997421
compound 11	0.238212848	0.448553449	0.394604922	0.390351431	0.186290138	0.71913598	0.060140796	0.673890261	0.105445117
compound 12	0.048025576	0.153842861	0.057848091	0.012910883	0.515117407	0.318716043	0.667680114	0.469316093	0.346902107
compound 13	0.686338294	0.179656061	0.305975559	0.990161165	0.802992609	0.725211775	0.005226891	0.137988779	0.87885916
compound 14	0.666452715	0.101826196	0.450181994	0.795008115	0.61906259	0.488257945	0.57803568	0.674371487	0.9940135
compound 15	0.125909384	0.382662959	0.960022047	0.684682461	0.860585511	0.925050601	0.819353941	0.13900671	0.649770636
compound 16	0.761870715	0.494691438	0.796574216	0.412761827	0.627688022	0.421406822	0.456368987	0.182229132	0.543350878
compound 17	0.559541789	0.115348466	0.912528389	0.524359866	0.272130232	0.545045487	0.216582255	0.79334082	0.962343736
compound 18	0.250698265	0.702097798	0.9112178	0.003363814	0.553040292	0.249546197	0.934970177	0.697676098	0.229241834
compound 19	0.128682675	0.729472247	0.299882613	0.103272857	0.98908906	0.268777078	0.193903728	0.055987525	0.280012767
compound 20	0.620281207	0.660668141	0.505028707	0.549120255	0.037659235	0.523692533	0.909369608	0.831636002	0.972467674
"
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez,plyr)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = F
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
?plyr
?.
input = "treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.610517368	0.968351962	0.127144358	0.558165864	0.393538305	0.153097741	0.02594971	0.297608279	0.618415545
compound 2	0.45640109	0.216791919	0.170251582	0.812814948	0.998275009	0.114068715	0.951867759	0.438422613	0.809347756
compound 3	0.361589997	0.723490998	0.555948988	0.988741901	0.018267498	0.308163305	0.172859967	0.312141694	0.529364574
compound 4	0.820528144	0.428534133	0.262533192	0.210532436	0.130781333	0.245854147	0.624187311	0.377496519	0.888655243
compound 5	0.340434795	0.384370439	0.791476719	0.028659265	0.878664599	0.647141623	0.649848912	0.805435347	0.354375542
compound 6	0.83679508	0.242246912	0.324240208	0.088624756	0.088686506	0.183470467	0.045095188	0.403636785	0.163339929
compound 7	0.564586497	0.382935823	0.495587403	0.260402596	0.202631602	0.94680613	0.500951179	0.617751151	0.503197685
compound 8	0.688030157	0.227073932	0.771548526	0.690935893	0.784177293	0.338645771	0.301987492	0.049449955	0.244229399
compound 9	0.780078969	0.705770565	0.036979995	0.913735842	0.807597905	0.274234313	0.0340996	0.278324808	0.647155637
compound 10	0.61633168	0.751438139	0.821334433	0.274509785	0.112544161	0.461184447	0.080364853	0.586724791	0.657997421
compound 11	0.238212848	0.448553449	0.394604922	0.390351431	0.186290138	0.71913598	0.060140796	0.673890261	0.105445117
compound 12	0.048025576	0.153842861	0.057848091	0.012910883	0.515117407	0.318716043	0.667680114	0.469316093	0.346902107
compound 13	0.686338294	0.179656061	0.305975559	0.990161165	0.802992609	0.725211775	0.005226891	0.137988779	0.87885916
compound 14	0.666452715	0.101826196	0.450181994	0.795008115	0.61906259	0.488257945	0.57803568	0.674371487	0.9940135
compound 15	0.125909384	0.382662959	0.960022047	0.684682461	0.860585511	0.925050601	0.819353941	0.13900671	0.649770636
compound 16	0.761870715	0.494691438	0.796574216	0.412761827	0.627688022	0.421406822	0.456368987	0.182229132	0.543350878
compound 17	0.559541789	0.115348466	0.912528389	0.524359866	0.272130232	0.545045487	0.216582255	0.79334082	0.962343736
compound 18	0.250698265	0.702097798	0.9112178	0.003363814	0.553040292	0.249546197	0.934970177	0.697676098	0.229241834
compound 19	0.128682675	0.729472247	0.299882613	0.103272857	0.98908906	0.268777078	0.193903728	0.055987525	0.280012767
compound 20	0.620281207	0.660668141	0.505028707	0.549120255	0.037659235	0.523692533	0.909369608	0.831636002	0.972467674
"
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez,plyr)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = F
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVAp = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)[["Sphericity Corrections"]][1,"p[GG]"]
# ANOVAp = NULL
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVAp, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
# Greenhouse-Geisser adjusted one-way repeated measures ANOVA. Greenhouse & Geisser (1959)
# The exercise intervention elicited statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 26.938, p < .0005.
# The exercise intervention did not lead to any statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 1.256, p = .300.
# It is suggested only use main effect when interaction term is NOT significant.
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
purl <- "http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/devtools/R/install_github"
library(RCurl)
library(jsonlite)
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(pkgs="RCurl")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),postfields=toJSON(list(repo="slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")))
devtools::install_github("slfan2013/WCMC_DA/WCMC.Stat.OneWayRepANOVA")
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
.
library(WCMC.Course2017.STAT)
