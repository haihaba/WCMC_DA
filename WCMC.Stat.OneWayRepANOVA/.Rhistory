j=2
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
test.temp
post_hoc
,apply(combn(levels(data[,i]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")}))
apply(combn(levels(data[,i]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")}))
apply(combn(levels(data[,i]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})
i=2
i=2
apply(combn(levels(data[,i]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(ANOVA.p, post_hoc)
},e,p,group,ezANOVA,ID)
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID)
apply(combn(levels(data[,i]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})
paste0("pairwise-comparison: ",apply(combn(levels(data[,i]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")}))
colnames_f_1 = colnames(f)[1]
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
f
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
result
head(result)
dim(result)
colnames_f_1 = colnames(f)[1]
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
ANOVA
ID = colnames(p)[2]
group=colnames(p)[3]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID)
dim(ANOVA)
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID)
ANOVA = t(ANOVA)
dim(ANOVA)
colnames(ANOVA) = c("ANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,i]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
colnames_f_1 = colnames(f)[1]
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
f
f
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
colnames_f_1 = colnames(f)[1]
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c(colnames_f_1,"twowaymixedANOVApvalue")
}else{
colnames(result) = c(colnames(f),"twowaymixedANOVApvalue")
}
colnames_f_1 = colnames(f)[1]
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
class(f)=="character"
colnames_f_1
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
# read.data
{
input = gsub("\r","",input)
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
if(t.mode==ts.first.row){
col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
}else{
col_start = t.mode-ts.first.row + 1
}
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
stringsAsFactors = F),
p,stringsAsFactors=F)[-1,]
rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
# write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
colnames_f_1 = colnames(f)[1]
# write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
}
colnames_f_1
if(multicore){
cl = makeCluster(min(detectCores(),8))
}else{
cl = makeCluster(1)
}
multicore = T
ID = colnames(p)[2]
group=colnames(p)[3]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID)
ANOVA = t(ANOVA)
colnames(ANOVA) = c("ANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,i]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
f
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c(colnames_f_1,"twowaymixedANOVApvalue")
}else{
colnames(result) = c(colnames(f),"twowaymixedANOVApvalue")
}
class(f)
colnames(result) = c(colnames_f_1,colnames(ANOVA))
result
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
levels(data[,i])
levels(p[[group]])
p[[group]]
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
levels(data[,2])
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
# read.data
{
#   input = gsub("\r","",input)
#   cfile = strsplit(input,"\n")[[1]]
#
#   ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
#   t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
#   ts.first.row = ts[1]
#   cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
#
#
#   df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
#
#
#   if(t.mode==ts.first.row){
#     col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
#   }else{
#     col_start = t.mode-ts.first.row + 1
#   }
#   row_start = which(diff(df1[,1]=='')==-1) + 1
#   if(length(row_start)==0 & col_start ==1){
#     row_start = 1
#   }else if(length(row_start)==0){
#     stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
#   }
#
#   p = t(df1[1:(row_start-1),col_start:ncol(df1)])
#   colnames(p) = p[1,]
#   p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
#                        stringsAsFactors = F),
#             p,stringsAsFactors=F)[-1,]
#
#   rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
#   p = data.frame(p,stringsAsFactors = F,check.names = F)
#   # write.csv(p,"p.csv")
#
#   f = df1[row_start:nrow(df1),1:col_start]
#
#   if(class(f) == "character"){ #in case there is only one column of feature index.
#     name.temp = f[1]
#     f = data.frame(f[-1])
#     colnames(f) = name.temp
#   }else{
#     colnames(f) = f[1,]
#     f = f[-1,]
#   }
#   rownames(f) = 1:nrow(f)
#   colnames_f_1 = colnames(f)[1]
#
#   # write.csv(f,"f.csv")
#
#   e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
#   e = apply(e,2,as.numeric)
#   colnames(e) = rownames(p)
#   rownames(e) = rownames(f)
}
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
input = 'treatment	Control	Control	Control	Treatment1	Treatment1	Treatment1	Treatment2	Treatment2	Treatment2
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.271319033	0.638931306	0.261773989	0.669214339	0.700712978	0.211844692	0.702440597	0.164175797	0.819119452
compound 2	0.049675018	0.547408915	0.369665114	0.35325966	0.438561514	0.677201255	0.140110353	0.34960431	0.021282856
compound 3	0.77845159	0.535376763	0.860030058	0.969375125	0.415652155	0.867300136	0.352558154	0.200013495	0.850292899
compound 4	0.024908248	0.565239989	0.786263104	0.57111975	0.763604904	0.8470036	0.078563266	0.135243318	0.369277199
compound 5	0.7265028	0.335265279	0.381854001	0.670506851	0.250751754	0.505436654	0.07096043	0.194552532	0.355150102
compound 6	0.914549437	0.757220379	0.505230567	0.354867266	0.795529612	0.068068261	0.355862613	0.584894559	0.966098381
compound 7	0.083527069	0.104923497	0.218793961	0.077709754	0.07342475	0.521378512	0.493699087	0.28713737	0.754916178
compound 8	0.108763564	0.164280448	0.316662425	0.688075944	0.462706814	0.471357699	0.964532895	0.18820333	0.189498295
compound 9	0.165751369	0.016064509	0.670768868	0.635368647	0.293083666	0.928453611	0.840305992	0.759394467	0.083658166
compound 10	0.19369218	0.594207884	0.382823016	0.742200526	0.206411915	0.020013715	0.474500933	0.981998261	0.966421397
compound 11	0.067652843	0.990966338	0.074488418	0.4080369	0.137097029	0.682505582	0.212110376	0.593122614	0.315657374
compound 12	0.910446588	0.248013784	0.876684017	0.444861683	0.372995425	0.737602111	0.147815885	0.162451297	0.996949849
compound 13	0.20950323	0.176037805	0.755170273	0.290740583	0.379668955	0.192403302	0.940179003	0.752748383	0.11209524
compound 14	0.520555961	0.061335155	0.729390664	0.823639936	0.101199238	0.720727895	0.484962681	0.315089456	0.089295004
compound 15	0.46060467	0.094271379	0.398641304	0.204801568	0.307133813	0.269449313	0.12259259	0.593989945	0.523203519
compound 16	0.398333787	0.924929791	0.265218066	0.493939385	0.318193434	0.295955233	0.761336617	0.305039637	0.47951418
compound 17	0.803032551	0.011127382	0.087893882	0.210489159	0.104640726	0.231818472	0.13536649	0.153813714	0.607443971
compound 18	0.931678284	0.545444922	0.410143706	0.566272788	0.763456009	0.096291086	0.118569547	0.130561384	0.097454335
compound 19	0.929006546	0.78580172	0.985569655	0.14454123	0.192025766	0.160975695	0.049584085	0.239266374	0.011725835
compound 20	0.898758985	0.585686908	0.554348921	0.537136922	0.350402295	0.287054431	0.615833625	0.815323435	0.380518037
'
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),8))
}else{
cl = makeCluster(1)
}
p
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
p
ID = colnames(p)[3]
group=colnames(p)[2]
j = 1
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
ANOVA.p
ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
test.temp
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
post_hoc
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID)
ANOVA = t(ANOVA)
ANOVA
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
data
colnames(ANOVA) = c("ANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
ANOVA
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
result
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
# test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
# post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(c(ANOVA.p))
},e,p,group,ezANOVA,ID)
ANOVA
posthocNeeded = T
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
ANOVA
posthocNeeded = F
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
ANOVA
ANOVA = t(ANOVA)
ANOVA
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
ANOVA
ANOVA = data.frame("repANOVA p value"= ANOVA)
ANOVA
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
posthocNeeded
data.frame("repANOVA p value"= ANOVA)
ANOVA = data.frame("repANOVA p value"= ANOVA)
ANOVA
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c(colnames_f_1,colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
result
f
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
{
#   input = gsub("\r","",input)
#   cfile = strsplit(input,"\n")[[1]]
#
#   ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
#   t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
#   ts.first.row = ts[1]
#   cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
#
#
#   df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
#
#
#   if(t.mode==ts.first.row){
#     col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
#   }else{
#     col_start = t.mode-ts.first.row + 1
#   }
#   row_start = which(diff(df1[,1]=='')==-1) + 1
#   if(length(row_start)==0 & col_start ==1){
#     row_start = 1
#   }else if(length(row_start)==0){
#     stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
#   }
#
#   p = t(df1[1:(row_start-1),col_start:ncol(df1)])
#   colnames(p) = p[1,]
#   p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
#                        stringsAsFactors = F),
#             p,stringsAsFactors=F)[-1,]
#
#   rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
#   p = data.frame(p,stringsAsFactors = F,check.names = F)
#   # write.csv(p,"p.csv")
#
#   f = df1[row_start:nrow(df1),1:col_start]
#
#   if(class(f) == "character"){ #in case there is only one column of feature index.
#     name.temp = f[1]
#     f = data.frame(f[-1])
#     colnames(f) = name.temp
#   }else{
#     colnames(f) = f[1,]
#     f = f[-1,]
#   }
#   rownames(f) = 1:nrow(f)
#   colnames_f_1 = colnames(f)[1]
#
#   # write.csv(f,"f.csv")
#
#   e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
#   e = apply(e,2,as.numeric)
#   colnames(e) = rownames(p)
#   rownames(e) = rownames(f)
}
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),8))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
f
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
colnames(result) = c('compound label',colnames(ANOVA))
result
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
