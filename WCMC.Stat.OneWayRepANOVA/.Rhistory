compound 4	0.024908248	0.565239989	0.786263104	0.57111975	0.763604904	0.8470036	0.078563266	0.135243318	0.369277199
compound 5	0.7265028	0.335265279	0.381854001	0.670506851	0.250751754	0.505436654	0.07096043	0.194552532	0.355150102
compound 6	0.914549437	0.757220379	0.505230567	0.354867266	0.795529612	0.068068261	0.355862613	0.584894559	0.966098381
compound 7	0.083527069	0.104923497	0.218793961	0.077709754	0.07342475	0.521378512	0.493699087	0.28713737	0.754916178
compound 8	0.108763564	0.164280448	0.316662425	0.688075944	0.462706814	0.471357699	0.964532895	0.18820333	0.189498295
compound 9	0.165751369	0.016064509	0.670768868	0.635368647	0.293083666	0.928453611	0.840305992	0.759394467	0.083658166
compound 10	0.19369218	0.594207884	0.382823016	0.742200526	0.206411915	0.020013715	0.474500933	0.981998261	0.966421397
compound 11	0.067652843	0.990966338	0.074488418	0.4080369	0.137097029	0.682505582	0.212110376	0.593122614	0.315657374
compound 12	0.910446588	0.248013784	0.876684017	0.444861683	0.372995425	0.737602111	0.147815885	0.162451297	0.996949849
compound 13	0.20950323	0.176037805	0.755170273	0.290740583	0.379668955	0.192403302	0.940179003	0.752748383	0.11209524
compound 14	0.520555961	0.061335155	0.729390664	0.823639936	0.101199238	0.720727895	0.484962681	0.315089456	0.089295004
compound 15	0.46060467	0.094271379	0.398641304	0.204801568	0.307133813	0.269449313	0.12259259	0.593989945	0.523203519
compound 16	0.398333787	0.924929791	0.265218066	0.493939385	0.318193434	0.295955233	0.761336617	0.305039637	0.47951418
compound 17	0.803032551	0.011127382	0.087893882	0.210489159	0.104640726	0.231818472	0.13536649	0.153813714	0.607443971
compound 18	0.931678284	0.545444922	0.410143706	0.566272788	0.763456009	0.096291086	0.118569547	0.130561384	0.097454335
compound 19	0.929006546	0.78580172	0.985569655	0.14454123	0.192025766	0.160975695	0.049584085	0.239266374	0.011725835
compound 20	0.898758985	0.585686908	0.554348921	0.537136922	0.350402295	0.287054431	0.615833625	0.815323435	0.380518037
'
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
p
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
p
ID = colnames(p)[3]
group=colnames(p)[2]
j = 1
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
ANOVA.p
ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
test.temp
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
post_hoc
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID)
ANOVA = t(ANOVA)
ANOVA
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
data
colnames(ANOVA) = c("ANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
ANOVA
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
result
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
# test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
# post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
return(c(ANOVA.p))
},e,p,group,ezANOVA,ID)
ANOVA
posthocNeeded = T
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
ANOVA
posthocNeeded = F
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
ANOVA
ANOVA = t(ANOVA)
ANOVA
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
ANOVA
ANOVA = data.frame("repANOVA p value"= ANOVA)
ANOVA
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
posthocNeeded
data.frame("repANOVA p value"= ANOVA)
ANOVA = data.frame("repANOVA p value"= ANOVA)
ANOVA
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c(colnames_f_1,colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
result
f
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
{
#   input = gsub("\r","",input)
#   cfile = strsplit(input,"\n")[[1]]
#
#   ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
#   t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
#   ts.first.row = ts[1]
#   cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
#
#
#   df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
#
#
#   if(t.mode==ts.first.row){
#     col_start = which(diff(as.character(df1[1,])=='')==-1) + 1
#   }else{
#     col_start = t.mode-ts.first.row + 1
#   }
#   row_start = which(diff(df1[,1]=='')==-1) + 1
#   if(length(row_start)==0 & col_start ==1){
#     row_start = 1
#   }else if(length(row_start)==0){
#     stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
#   }
#
#   p = t(df1[1:(row_start-1),col_start:ncol(df1)])
#   colnames(p) = p[1,]
#   p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE,
#                        stringsAsFactors = F),
#             p,stringsAsFactors=F)[-1,]
#
#   rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
#   p = data.frame(p,stringsAsFactors = F,check.names = F)
#   # write.csv(p,"p.csv")
#
#   f = df1[row_start:nrow(df1),1:col_start]
#
#   if(class(f) == "character"){ #in case there is only one column of feature index.
#     name.temp = f[1]
#     f = data.frame(f[-1])
#     colnames(f) = name.temp
#   }else{
#     colnames(f) = f[1,]
#     f = f[-1,]
#   }
#   rownames(f) = 1:nrow(f)
#   colnames_f_1 = colnames(f)[1]
#
#   # write.csv(f,"f.csv")
#
#   e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
#   e = apply(e,2,as.numeric)
#   colnames(e) = rownames(p)
#   rownames(e) = rownames(f)
}
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "bonf")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
f
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
colnames(result) = c('compound label',colnames(ANOVA))
result
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(WCMC.Stat.OneWayRepANOVA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.OneWayRepANOVA/www")
library(WCMC.Stat.OneWayRepANOVA)
library(h2o)
?h2o.deeplearning
input = "treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.728519929	0.444502068	0.045272327	0.945112329	0.623605297	0.822925502	0.377236617	0.55803428	0.918828132
compound 2	0.362805521	0.204851488	0.10562566	0.872156703	0.975121412	0.840615042	0.433328467	0.326639426	0.150319974
compound 3	0.153699597	0.689142411	0.434903802	0.301297876	0.029927346	0.318732022	0.271309862	0.670042597	0.054255007
compound 4	0.164381925	0.360012642	0.184305927	0.239322627	0.95038873	0.246216362	0.496351651	0.021383018	0.726483294
compound 5	0.339518605	0.18807954	0.871032322	0.212017906	0.784291392	0.512407412	0.092330095	0.550984045	0.327032419
compound 6	0.381909934	0.749596746	0.421236432	0.315746441	0.47053954	0.017144414	0.225634947	0.530445436	0.293216327
compound 7	0.742136384	0.974445299	0.710829749	0.141522015	0.835838041	0.712164353	0.480874141	0.893455776	0.152698967
compound 8	0.715974744	0.182479557	0.643780017	0.510303431	0.048032011	0.40618355	0.826622335	0.48353569	0.051100147
compound 9	0.470440898	0.957611467	0.086453682	0.443486254	0.104400675	0.231787597	0.43679163	0.194940251	0.975816597
compound 10	0.140413269	0.093690234	0.43811517	0.799494381	0.033847396	0.275569756	0.963980918	0.09994832	0.090580021
compound 11	0.257389072	0.540373474	0.040827697	0.985784784	0.56190678	0.960086136	0.339755592	0.40712317	0.677287855
compound 12	0.131402947	0.36980302	0.116802856	0.758414855	0.600072416	0.813846171	0.72405506	0.139379636	0.86314016
compound 13	0.773513929	0.546367621	0.596255528	0.55503241	0.782007036	0.050677083	0.907841676	0.30544937	0.443898645
compound 14	0.720868997	0.013311344	0.309800011	0.278833254	0.900951739	0.300337387	0.316770785	0.981730857	0.128837517
compound 15	0.547852733	0.889396888	0.417757456	0.004963755	0.571510736	0.497486142	0.49260955	0.461560574	0.675833356
compound 16	0.12372288	0.523484305	0.563364017	0.304876309	0.251961053	0.982255845	0.06146756	0.137154939	0.791080541
compound 17	0.757165306	0.340266791	0.932596209	0.433920281	0.822671371	0.601225819	0.288243684	0.638572126	0.798470727
compound 18	0.083312609	0.95957301	0.333725073	0.054199913	0.394223269	0.868223994	0.122757084	0.428340187	0.399763298
compound 19	0.218237569	0.307841295	0.121351379	0.533101005	0.739845534	0.175537847	0.3866639	0.942504516	0.759221927
compound 20	0.226180178	0.370818032	0.798274651	0.108583974	0.545640714	0.737726659	0.471740583	0.459358948	0.967379729
"
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
# Greenhouse-Geisser adjusted one-way repeated measures ANOVA. Greenhouse & Geisser (1959)
# The exercise intervention elicited statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 26.938, p < .0005.
# The exercise intervention did not lead to any statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 1.256, p = .300.
# It is suggested only use main effect when interaction term is NOT significant.
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
posthocNeeded = T
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = .(var2), type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
?ezANOVA
.()
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = "var2", type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
library(WCMC.Stat.OneWayRepANOVA)
input = "treatment	Pre	Pre	Pre	Mid	Mid	Mid	Post	Post	Post
sample ID	1	2	3	1	2	3	1	3	2
label	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.294881153	0.880659488	0.159939127	0.48103985	0.095706337	0.616708468	0.214103106	0.347668255	0.79709001
compound 2	0.547850791	0.644750553	0.73370815	0.613230039	0.066892357	0.304240567	0.216674371	0.845701558	0.812377216
compound 3	0.410271663	0.744912989	0.43783281	0.51962304	0.663602506	0.390564452	0.815493839	0.592902864	0.838048482
compound 4	0.521447754	0.522704236	0.608814502	0.333440866	0.501477977	0.725780055	0.165263262	0.897590331	0.787426228
compound 5	0.077159723	0.575816854	0.539885333	0.0835435	0.931650376	0.390248576	0.780519002	0.961100977	0.77607232
compound 6	0.487760721	0.847452729	0.007867113	0.070183171	0.183704334	0.145563098	0.032242672	0.743074242	0.847127413
compound 7	0.072072569	0.830891965	0.056180013	0.738031773	0.602097188	0.080042793	0.617878752	0.740711434	0.619535608
compound 8	0.66052182	0.18508093	0.23993219	0.631029656	0.920759708	0.346361396	0.85161476	0.537998669	0.77032404
compound 9	0.353804434	0.451009607	0.731222928	0.239011966	0.11129598	0.819706313	0.610566236	0.895680231	0.960596268
compound 10	0.048450313	0.307534067	0.620961172	0.007028494	0.551361658	0.072769741	0.751137917	0.944931415	0.259469207
compound 11	0.865411394	0.463211015	0.106169127	0.216453413	0.717608303	0.199290573	0.130899227	0.025363787	0.824979107
compound 12	0.563138868	0.293738508	0.113575254	0.100229542	0.756191779	0.411925179	0.720392162	0.486669938	0.080763806
compound 13	0.200887677	0.687764919	0.472343167	0.889455588	0.340254727	0.940407206	0.018189925	0.607717733	0.710239709
compound 14	0.889289164	0.158888244	0.940345708	0.941231647	0.930119587	0.716262363	0.912832242	0.768358742	0.239932529
compound 15	0.905116283	0.513187042	0.547629629	0.966338492	0.244671001	0.783263792	0.167111167	0.15971036	0.029379311
compound 16	0.900862975	0.453023376	0.675594493	0.891101023	0.449740059	0.280377716	0.425925553	0.438116427	0.984421481
compound 17	0.136525039	0.804925251	0.707728392	0.200659321	0.099597537	0.369143257	0.630298333	0.861359123	0.288484097
compound 18	0.725877346	0.380867929	0.944574298	0.090080721	0.922552677	0.063900955	0.035994154	0.239980541	0.38853483
compound 19	0.960415714	0.677125503	0.505709193	0.909885445	0.789032911	0.523914911	0.145911447	0.605630296	0.082872346
compound 20	0.79566079	0.673789233	0.175107153	0.374367481	0.412385265	0.211425648	0.071239734	0.443793337	0.375983422
"
library(pacman)
pacman::p_load(data.table,parallel,userfriendlyscience,ez)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
multicore = F
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
posthocNeeded = T
ID = colnames(p)[3]
group=colnames(p)[2]
ANOVA = parSapply(cl,1:nrow(e),function(j,e,p,group,ezANOVA,ID,posthocNeeded){
data = data.frame(value=e[j,],var2=p[[group]],id=as.factor(p[[ID]]))
ANOVA.p = ezANOVA(data = data,
dv = value, wid = id,within = var2, type = 3)$`Sphericity Corrections`[1,"p[GG]"]
if(posthocNeeded){
test.temp = pairwise.t.test(paired = T, x = data$value, g = data$var2, p.adjust.method  = "holm")$p.value
post_hoc = as.numeric(test.temp)[!is.na(as.numeric(test.temp))]
}else{
post_hoc=NULL
}
return(c(ANOVA.p, post_hoc))
},e,p,group,ezANOVA,ID,posthocNeeded)
if(posthocNeeded){
ANOVA = t(ANOVA)
data = data.frame(value=e[1,],var2=p[[group]],id=as.factor(p[[ID]]))
colnames(ANOVA) = c("repANOVA p value",
paste0("pairwise-comparison: ",apply(combn(levels(data[,2]), 2),2,function(x){paste(x[1],x[2],sep="_vs_")})))
}else{
ANOVA = data.frame("repANOVA p value"= ANOVA)
}
# Greenhouse-Geisser adjusted one-way repeated measures ANOVA. Greenhouse & Geisser (1959)
# The exercise intervention elicited statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 26.938, p < .0005.
# The exercise intervention did not lead to any statistically significant changes in CRP concentration over time, F(1.296, 11.663) = 1.256, p = .300.
# It is suggested only use main effect when interaction term is NOT significant.
if(!class(f)=='character'){
f = f[,!sapply(f,function(x){sum(x=='')==length(x)})]
}
result = data.table(f,ANOVA)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c('compound label',colnames(ANOVA))
}else{
colnames(result) = c(colnames(f),colnames(ANOVA))
}
fwrite(data.table(result),"OneWayRepANOVA.csv")
fwrite(data.table(result),"OneWayRepANOVA.txt",sep = "\t")
stopCluster(cl)
?install.packages
getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(char="parallel")))
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(char="parallel")))
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(char="parallel")))
RCurl::getURL("http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages",customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=jsonlite::toJSON(list(char="parallel")))
install.packages("parallel")
install.packages("parallel")
R.Version()
