new_data_index = new_data_index+c(seq(0,dim(train_cv)[1]-dim(train_cv)[1]/n_sample,by=dim(train_cv)[1]/n_sample))
new_data_index = as.vector(t(new_data_index))
train_cv = train_cv[new_data_index,]
#refomat
pred_value = predict(fit1,subset(test_cv, select = -c(ID,label)))
pred_value = matrix(pred_value, nrow = dim(test_cv)[1]/90, ncol = 90, byrow = T)
rmse[i] = Rmse(unique(test_cv$label) - apply(pred_value,1,median))
i = i+1
print(i)
if(i == 2)
{
next
}
diff = rmse[i-2]-rmse[i-1]
if(diff < 0)
{
break
}
}
cv_rmse[j] = rmse[length(rmse)]
}
cv_rmse
library(data.table)
library(mmod)
data = fread("C:/Users/fansi/Desktop/aerosol/X.csv")
y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
y = as.numeric(y$y)
y = c(y,rep(0,384))
y = rep(y,each = 100)
data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
# pca
data = as.data.frame(data)
dta = subset(data, select = -c(label))
# temp = by(dta[,1:7], dta$ID, function(x) cov.wt(prcomp(x, center = T, scale. = T))$score)
temp = by(dta[,1:7], dta$ID, function(x) {
ell.info = cov.wt(prcomp(x, center = T, scale. = T)$x)
center = ell.info$center
cov = ell.info$cov
dist = apply(x,1,function(y){
mahalanobis(y, center, cov)
})
# which(dist > qf(as.numeric(0.95), 7, nrow(x)-1))
which(dist %in% sort(dist,decreasing=T)[1:10])
})
# ell.info <- cov.wt(temp)
# dta = dta[,grepl("_",colnames(dta)),with=F]
# dta = split(dta, data$ID)
# pca = lapply(dta, function(x) x[,1:7])
# pca = lapply(pca, function(y) prcomp(y, center = T, scale. = T)$x)
# ell = lapply(pca, function(x) cov.wt(x))
# cumsum(pca$sdev^2/sum(pca$sdev^2))
# data = cbind(data,pca$x[,1:7])
temp = unlist(temp)
temp_ma = matrix(temp, ncol = 10, byrow = T)
temp_ma = temp_ma +
c(seq(0,dim(data)[1]-dim(data)[1]/1364,by=dim(data)[1]/1364))
new_data_index = as.vector(t(temp_ma))
data = data[-(new_data_index),]
##############################
# y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
# y_980 = as.numeric(y$y)
# y = c(y_980, rep(0,384))
# y = rep(y,each = 90)
# data = data.table(data)
# data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
train = data[data$ID<=980,]
Rmse <- function(error)
{
sqrt(mean(error^2))
}
################# CV ######################################
set.seed(12)
random_index = sample(1:980,980)
980/5
train = data[data$ID<=980,]
train_sca<- scale(train)
train_sca$ID = train$ID
cv_rmse = numeric()
cv_rmse_2 = numeric()
for(j in 1:5)
{
train_cv = train[!(train$ID %in% random_index[(1+(j-1)*196):(j*196)]),]
test_cv = train[train$ID %in% random_index[(1+(j-1)*196):(j*196)],]
train_cv = subset(train_cv, select = -c(ID))
n_sample = 980-length(random_index[(1+(j-1)*196):(j*196)])
rmse = numeric()
i = 1
diff = 1
while(TRUE)
{
# fit1 = neuralnet(label~MODIS1+MODIS2+MODIS3+MODIS4+MODIS5+MODIS6+MODIS7+solar1+
#                    solar2+solar3+solar4+solar5,
#                  train_cv, hidden = 10, stepmax=200, err.fct = "sse", act.fct = "logistic",linear.output = TRUE, )
fit1 = lm(label~.,data = train_cv)
# fit1 = nnet(label~., size = 10,linout = TRUE, decay=5e-4, maxit = 100, data = train_cv)
#reformat 980*100
fit_value = matrix(fit1$fitted.values, n_sample, dim(train_cv)[1]/n_sample, byrow = T)
diff = abs(fit_value - apply(fit_value,1,median))
#reformat for using lapply
# 100*980
diff = as.data.frame(t(diff))
remove_k = lapply(diff, function(x) order(x,decreasing = T)[-(1:1)])
new_data_index = do.call(rbind,remove_k)
new_data_index = new_data_index+c(seq(0,dim(train_cv)[1]-dim(train_cv)[1]/n_sample,by=dim(train_cv)[1]/n_sample))
new_data_index = as.vector(t(new_data_index))
train_cv = train_cv[new_data_index,]
#refomat
pred_value = predict(fit1,subset(test_cv, select = -c(ID,label)))
pred_value = matrix(pred_value, nrow = dim(test_cv)[1]/90, ncol = 90, byrow = T)
rmse[i] = Rmse(unique(test_cv$label) - apply(pred_value,1,median))
i = i+1
print(i)
if(i == 2)
{
next
}
diff = rmse[i-2]-rmse[i-1]
if(diff < 0)
{
break
}
}
cv_rmse[j] = rmse[length(rmse)]
}
mean(cv_rmse)
library(data.table)
library(mmod)
data = fread("C:/Users/fansi/Desktop/aerosol/X.csv")
y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
y = as.numeric(y$y)
y = c(y,rep(0,384))
y = rep(y,each = 100)
data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
# pca
data = as.data.frame(data)
dta = subset(data, select = -c(label))
# temp = by(dta[,1:7], dta$ID, function(x) cov.wt(prcomp(x, center = T, scale. = T))$score)
temp = by(dta[,1:7], dta$ID, function(x) {
ell.info = cov.wt(prcomp(x, center = T, scale. = T)$x)
center = ell.info$center
cov = ell.info$cov
dist = apply(x,1,function(y){
mahalanobis(y, center, cov)
})
# which(dist > qf(as.numeric(0.95), 7, nrow(x)-1))
which(dist %in% sort(dist,decreasing=T)[1:20])
})
# ell.info <- cov.wt(temp)
# dta = dta[,grepl("_",colnames(dta)),with=F]
# dta = split(dta, data$ID)
# pca = lapply(dta, function(x) x[,1:7])
# pca = lapply(pca, function(y) prcomp(y, center = T, scale. = T)$x)
# ell = lapply(pca, function(x) cov.wt(x))
# cumsum(pca$sdev^2/sum(pca$sdev^2))
# data = cbind(data,pca$x[,1:7])
temp = unlist(temp)
temp_ma = matrix(temp, ncol = 10, byrow = T)
temp_ma = temp_ma +
c(seq(0,dim(data)[1]-dim(data)[1]/1364,by=dim(data)[1]/1364))
new_data_index = as.vector(t(temp_ma))
data = data[-(new_data_index),]
##############################
# y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
# y_980 = as.numeric(y$y)
# y = c(y_980, rep(0,384))
# y = rep(y,each = 90)
# data = data.table(data)
# data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
train = data[data$ID<=980,]
Rmse <- function(error)
{
sqrt(mean(error^2))
}
################# CV ######################################
set.seed(12)
random_index = sample(1:980,980)
980/5
train = data[data$ID<=980,]
train_sca<- scale(train)
train_sca$ID = train$ID
cv_rmse = numeric()
cv_rmse_2 = numeric()
for(j in 1:5)
{
train_cv = train[!(train$ID %in% random_index[(1+(j-1)*196):(j*196)]),]
test_cv = train[train$ID %in% random_index[(1+(j-1)*196):(j*196)],]
train_cv = subset(train_cv, select = -c(ID))
n_sample = 980-length(random_index[(1+(j-1)*196):(j*196)])
rmse = numeric()
i = 1
diff = 1
while(TRUE)
{
# fit1 = neuralnet(label~MODIS1+MODIS2+MODIS3+MODIS4+MODIS5+MODIS6+MODIS7+solar1+
#                    solar2+solar3+solar4+solar5,
#                  train_cv, hidden = 10, stepmax=200, err.fct = "sse", act.fct = "logistic",linear.output = TRUE, )
fit1 = lm(label~.,data = train_cv)
# fit1 = nnet(label~., size = 10,linout = TRUE, decay=5e-4, maxit = 100, data = train_cv)
#reformat 980*100
fit_value = matrix(fit1$fitted.values, n_sample, dim(train_cv)[1]/n_sample, byrow = T)
diff = abs(fit_value - apply(fit_value,1,median))
#reformat for using lapply
# 100*980
diff = as.data.frame(t(diff))
remove_k = lapply(diff, function(x) order(x,decreasing = T)[-(1:1)])
new_data_index = do.call(rbind,remove_k)
new_data_index = new_data_index+c(seq(0,dim(train_cv)[1]-dim(train_cv)[1]/n_sample,by=dim(train_cv)[1]/n_sample))
new_data_index = as.vector(t(new_data_index))
train_cv = train_cv[new_data_index,]
#refomat
pred_value = predict(fit1,subset(test_cv, select = -c(ID,label)))
pred_value = matrix(pred_value, nrow = dim(test_cv)[1]/90, ncol = 90, byrow = T)
rmse[i] = Rmse(unique(test_cv$label) - apply(pred_value,1,median))
i = i+1
print(i)
if(i == 2)
{
next
}
diff = rmse[i-2]-rmse[i-1]
if(diff < 0)
{
break
}
}
cv_rmse[j] = rmse[length(rmse)]
}
mean(cv_rmse)
library(data.table)
library(mmod)
data = fread("C:/Users/fansi/Desktop/aerosol/X.csv")
y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
y = as.numeric(y$y)
y = c(y,rep(0,384))
y = rep(y,each = 100)
data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
# pca
data = as.data.frame(data)
dta = subset(data, select = -c(label))
# temp = by(dta[,1:7], dta$ID, function(x) cov.wt(prcomp(x, center = T, scale. = T))$score)
temp = by(dta[,1:7], dta$ID, function(x) {
ell.info = cov.wt(prcomp(x, center = T, scale. = T)$x)
center = ell.info$center
cov = ell.info$cov
dist = apply(x,1,function(y){
mahalanobis(y, center, cov)
})
# which(dist > qf(as.numeric(0.95), 7, nrow(x)-1))
which(dist %in% sort(dist,decreasing=T)[1:5])
})
# ell.info <- cov.wt(temp)
# dta = dta[,grepl("_",colnames(dta)),with=F]
# dta = split(dta, data$ID)
# pca = lapply(dta, function(x) x[,1:7])
# pca = lapply(pca, function(y) prcomp(y, center = T, scale. = T)$x)
# ell = lapply(pca, function(x) cov.wt(x))
# cumsum(pca$sdev^2/sum(pca$sdev^2))
# data = cbind(data,pca$x[,1:7])
temp = unlist(temp)
temp_ma = matrix(temp, ncol = 10, byrow = T)
temp_ma = temp_ma +
c(seq(0,dim(data)[1]-dim(data)[1]/1364,by=dim(data)[1]/1364))
new_data_index = as.vector(t(temp_ma))
data = data[-(new_data_index),]
##############################
# y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
# y_980 = as.numeric(y$y)
# y = c(y_980, rep(0,384))
# y = rep(y,each = 90)
# data = data.table(data)
# data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
train = data[data$ID<=980,]
Rmse <- function(error)
{
sqrt(mean(error^2))
}
################# CV ######################################
set.seed(12)
random_index = sample(1:980,980)
980/5
train = data[data$ID<=980,]
train_sca<- scale(train)
train_sca$ID = train$ID
cv_rmse = numeric()
cv_rmse_2 = numeric()
for(j in 1:5)
{
train_cv = train[!(train$ID %in% random_index[(1+(j-1)*196):(j*196)]),]
test_cv = train[train$ID %in% random_index[(1+(j-1)*196):(j*196)],]
train_cv = subset(train_cv, select = -c(ID))
n_sample = 980-length(random_index[(1+(j-1)*196):(j*196)])
rmse = numeric()
i = 1
diff = 1
while(TRUE)
{
# fit1 = neuralnet(label~MODIS1+MODIS2+MODIS3+MODIS4+MODIS5+MODIS6+MODIS7+solar1+
#                    solar2+solar3+solar4+solar5,
#                  train_cv, hidden = 10, stepmax=200, err.fct = "sse", act.fct = "logistic",linear.output = TRUE, )
fit1 = lm(label~.,data = train_cv)
# fit1 = nnet(label~., size = 10,linout = TRUE, decay=5e-4, maxit = 100, data = train_cv)
#reformat 980*100
fit_value = matrix(fit1$fitted.values, n_sample, dim(train_cv)[1]/n_sample, byrow = T)
diff = abs(fit_value - apply(fit_value,1,median))
#reformat for using lapply
# 100*980
diff = as.data.frame(t(diff))
remove_k = lapply(diff, function(x) order(x,decreasing = T)[-(1:1)])
new_data_index = do.call(rbind,remove_k)
new_data_index = new_data_index+c(seq(0,dim(train_cv)[1]-dim(train_cv)[1]/n_sample,by=dim(train_cv)[1]/n_sample))
new_data_index = as.vector(t(new_data_index))
train_cv = train_cv[new_data_index,]
#refomat
pred_value = predict(fit1,subset(test_cv, select = -c(ID,label)))
pred_value = matrix(pred_value, nrow = dim(test_cv)[1]/90, ncol = 90, byrow = T)
rmse[i] = Rmse(unique(test_cv$label) - apply(pred_value,1,median))
i = i+1
print(i)
if(i == 2)
{
next
}
diff = rmse[i-2]-rmse[i-1]
if(diff < 0)
{
break
}
}
cv_rmse[j] = rmse[length(rmse)]
}
mean(cv_rmse)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
data$label
boxplot(data$label)
boxplot(unique(data$label))
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
e = fread("e.csv")[,-1]
f = fread("f.csv")[,-1]
p = fread("p.csv")[,-1]
e = as.matrix(e)
color = 'organ'
res.pca <- prcomp(t(e),center = center, scale = scale)
eig.val <- get_eigenvalue(res.pca)
library(pacman)
pacman::p_load(data.table,parallel, dendextend,
colorspace,gplots,stringr,RColorBrewer,mvtnorm,factoextra)
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
num_of_var = 15
contribute_axes=1
score_axis = c(1,2)
scale = T
center=T
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
res.pca <- prcomp(t(e),center = center, scale = scale)
eig.val <- get_eigenvalue(res.pca)
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
viz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
print(fviz_screeplot(res.pca, ncp=10,linecolor="red",addlabels=T))
var = fviz_pca_var(res.pca, col.var="contrib")
print(fviz_pca_var(res.pca, col.var="contrib") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=median(var$data$contrib)) + theme_minimal())
contributes = get_pca_ind(res.pca)$contrib
print(fviz_pca_contrib(res.pca, choice = "var", axes = contribute_axes, top = num_of_var))
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
fviz_pca_ind(res.pca, addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
p[[color]]
color
names(p)
color = "Organ"
fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
p[[color]]
length(unique(p[[color]]))
length(unique(NULL))
length(unique(p[[color]]))<2
fwrite(scores,"Scores.csv")
scores = res.pca$x
loadings = res.pca$rotation
fwrite(scores,"Scores.csv")
fwrite(data.table(scores),"Scores.csv")
scores = res.pca$x
loadings = res.pca$rotation
fwrite(data.table(scores),"Scores.csv")
fwrite(data.table(loadings),"Loadings.csv")
var$data
get_pca_var(res.pca)
res.pca$var
library("FactoMineR")
res.pca <- PCA(decathlon2.active, graph = FALSE)
pacman::p_load(data.table,parallel, dendextend,
colorspace,gplots,stringr,RColorBrewer,mvtnorm,factoextra,FactoMineR)
res.pca <- PCA(decathlon2.active, graph = FALSE)
res.pca <- PCA(t(e))
res.pca <- PCA(t(e), graph = FALSE)
res.pca <- PCA(t(e), graph = FALSE)
res.pca
res.pca$var$coord
fwrite(data.table(res.pca$var$coord),"CompoundContribution.csv")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
plot(data$label)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
force=F
devtools::install_github("slfan2013/WCMC_DA/WCMC.Stat.PCA",force =force)
devtools::install_github("slfan2013/WCMC_DA/WCMC.Stat.PCA",force =T)
opencpu$browse()
