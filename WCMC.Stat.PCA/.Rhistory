<<<<<<< HEAD
=======
{
next
}
diff = rmse[i-2]-rmse[i-1]
if(diff < 0)
{
break
}
}
cv_rmse[j] = rmse[length(rmse)]
}
cv_rmse
library(data.table)
library(mmod)
data = fread("C:/Users/fansi/Desktop/aerosol/X.csv")
y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
y = as.numeric(y$y)
y = c(y,rep(0,384))
y = rep(y,each = 100)
data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
# pca
data = as.data.frame(data)
dta = subset(data, select = -c(label))
# temp = by(dta[,1:7], dta$ID, function(x) cov.wt(prcomp(x, center = T, scale. = T))$score)
temp = by(dta[,1:7], dta$ID, function(x) {
ell.info = cov.wt(prcomp(x, center = T, scale. = T)$x)
center = ell.info$center
cov = ell.info$cov
dist = apply(x,1,function(y){
mahalanobis(y, center, cov)
})
# which(dist > qf(as.numeric(0.95), 7, nrow(x)-1))
which(dist %in% sort(dist,decreasing=T)[1:10])
})
# ell.info <- cov.wt(temp)
# dta = dta[,grepl("_",colnames(dta)),with=F]
# dta = split(dta, data$ID)
# pca = lapply(dta, function(x) x[,1:7])
# pca = lapply(pca, function(y) prcomp(y, center = T, scale. = T)$x)
# ell = lapply(pca, function(x) cov.wt(x))
# cumsum(pca$sdev^2/sum(pca$sdev^2))
# data = cbind(data,pca$x[,1:7])
temp = unlist(temp)
temp_ma = matrix(temp, ncol = 10, byrow = T)
temp_ma = temp_ma +
c(seq(0,dim(data)[1]-dim(data)[1]/1364,by=dim(data)[1]/1364))
new_data_index = as.vector(t(temp_ma))
data = data[-(new_data_index),]
##############################
# y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
# y_980 = as.numeric(y$y)
# y = c(y_980, rep(0,384))
# y = rep(y,each = 90)
# data = data.table(data)
# data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
train = data[data$ID<=980,]
Rmse <- function(error)
{
sqrt(mean(error^2))
}
################# CV ######################################
set.seed(12)
random_index = sample(1:980,980)
980/5
train = data[data$ID<=980,]
train_sca<- scale(train)
train_sca$ID = train$ID
cv_rmse = numeric()
cv_rmse_2 = numeric()
for(j in 1:5)
{
train_cv = train[!(train$ID %in% random_index[(1+(j-1)*196):(j*196)]),]
test_cv = train[train$ID %in% random_index[(1+(j-1)*196):(j*196)],]
train_cv = subset(train_cv, select = -c(ID))
n_sample = 980-length(random_index[(1+(j-1)*196):(j*196)])
rmse = numeric()
i = 1
diff = 1
while(TRUE)
{
# fit1 = neuralnet(label~MODIS1+MODIS2+MODIS3+MODIS4+MODIS5+MODIS6+MODIS7+solar1+
#                    solar2+solar3+solar4+solar5,
#                  train_cv, hidden = 10, stepmax=200, err.fct = "sse", act.fct = "logistic",linear.output = TRUE, )
fit1 = lm(label~.,data = train_cv)
# fit1 = nnet(label~., size = 10,linout = TRUE, decay=5e-4, maxit = 100, data = train_cv)
#reformat 980*100
fit_value = matrix(fit1$fitted.values, n_sample, dim(train_cv)[1]/n_sample, byrow = T)
diff = abs(fit_value - apply(fit_value,1,median))
#reformat for using lapply
# 100*980
diff = as.data.frame(t(diff))
remove_k = lapply(diff, function(x) order(x,decreasing = T)[-(1:1)])
new_data_index = do.call(rbind,remove_k)
new_data_index = new_data_index+c(seq(0,dim(train_cv)[1]-dim(train_cv)[1]/n_sample,by=dim(train_cv)[1]/n_sample))
new_data_index = as.vector(t(new_data_index))
train_cv = train_cv[new_data_index,]
#refomat
pred_value = predict(fit1,subset(test_cv, select = -c(ID,label)))
pred_value = matrix(pred_value, nrow = dim(test_cv)[1]/90, ncol = 90, byrow = T)
rmse[i] = Rmse(unique(test_cv$label) - apply(pred_value,1,median))
i = i+1
print(i)
if(i == 2)
{
next
}
diff = rmse[i-2]-rmse[i-1]
if(diff < 0)
{
break
}
}
cv_rmse[j] = rmse[length(rmse)]
}
mean(cv_rmse)
library(data.table)
library(mmod)
data = fread("C:/Users/fansi/Desktop/aerosol/X.csv")
y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
y = as.numeric(y$y)
y = c(y,rep(0,384))
y = rep(y,each = 100)
data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
# pca
data = as.data.frame(data)
dta = subset(data, select = -c(label))
# temp = by(dta[,1:7], dta$ID, function(x) cov.wt(prcomp(x, center = T, scale. = T))$score)
temp = by(dta[,1:7], dta$ID, function(x) {
ell.info = cov.wt(prcomp(x, center = T, scale. = T)$x)
center = ell.info$center
cov = ell.info$cov
dist = apply(x,1,function(y){
mahalanobis(y, center, cov)
})
# which(dist > qf(as.numeric(0.95), 7, nrow(x)-1))
which(dist %in% sort(dist,decreasing=T)[1:20])
})
# ell.info <- cov.wt(temp)
# dta = dta[,grepl("_",colnames(dta)),with=F]
# dta = split(dta, data$ID)
# pca = lapply(dta, function(x) x[,1:7])
# pca = lapply(pca, function(y) prcomp(y, center = T, scale. = T)$x)
# ell = lapply(pca, function(x) cov.wt(x))
# cumsum(pca$sdev^2/sum(pca$sdev^2))
# data = cbind(data,pca$x[,1:7])
temp = unlist(temp)
temp_ma = matrix(temp, ncol = 10, byrow = T)
temp_ma = temp_ma +
c(seq(0,dim(data)[1]-dim(data)[1]/1364,by=dim(data)[1]/1364))
new_data_index = as.vector(t(temp_ma))
data = data[-(new_data_index),]
##############################
# y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
# y_980 = as.numeric(y$y)
# y = c(y_980, rep(0,384))
# y = rep(y,each = 90)
# data = data.table(data)
# data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
train = data[data$ID<=980,]
Rmse <- function(error)
{
sqrt(mean(error^2))
}
################# CV ######################################
set.seed(12)
random_index = sample(1:980,980)
980/5
train = data[data$ID<=980,]
train_sca<- scale(train)
train_sca$ID = train$ID
cv_rmse = numeric()
cv_rmse_2 = numeric()
for(j in 1:5)
{
train_cv = train[!(train$ID %in% random_index[(1+(j-1)*196):(j*196)]),]
test_cv = train[train$ID %in% random_index[(1+(j-1)*196):(j*196)],]
train_cv = subset(train_cv, select = -c(ID))
n_sample = 980-length(random_index[(1+(j-1)*196):(j*196)])
rmse = numeric()
i = 1
diff = 1
while(TRUE)
{
# fit1 = neuralnet(label~MODIS1+MODIS2+MODIS3+MODIS4+MODIS5+MODIS6+MODIS7+solar1+
#                    solar2+solar3+solar4+solar5,
#                  train_cv, hidden = 10, stepmax=200, err.fct = "sse", act.fct = "logistic",linear.output = TRUE, )
fit1 = lm(label~.,data = train_cv)
# fit1 = nnet(label~., size = 10,linout = TRUE, decay=5e-4, maxit = 100, data = train_cv)
#reformat 980*100
fit_value = matrix(fit1$fitted.values, n_sample, dim(train_cv)[1]/n_sample, byrow = T)
diff = abs(fit_value - apply(fit_value,1,median))
#reformat for using lapply
# 100*980
diff = as.data.frame(t(diff))
remove_k = lapply(diff, function(x) order(x,decreasing = T)[-(1:1)])
new_data_index = do.call(rbind,remove_k)
new_data_index = new_data_index+c(seq(0,dim(train_cv)[1]-dim(train_cv)[1]/n_sample,by=dim(train_cv)[1]/n_sample))
new_data_index = as.vector(t(new_data_index))
train_cv = train_cv[new_data_index,]
#refomat
pred_value = predict(fit1,subset(test_cv, select = -c(ID,label)))
pred_value = matrix(pred_value, nrow = dim(test_cv)[1]/90, ncol = 90, byrow = T)
rmse[i] = Rmse(unique(test_cv$label) - apply(pred_value,1,median))
i = i+1
print(i)
if(i == 2)
{
next
}
diff = rmse[i-2]-rmse[i-1]
if(diff < 0)
{
break
}
}
cv_rmse[j] = rmse[length(rmse)]
}
mean(cv_rmse)
library(data.table)
library(mmod)
data = fread("C:/Users/fansi/Desktop/aerosol/X.csv")
y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
y = as.numeric(y$y)
y = c(y,rep(0,384))
y = rep(y,each = 100)
data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
# pca
data = as.data.frame(data)
dta = subset(data, select = -c(label))
# temp = by(dta[,1:7], dta$ID, function(x) cov.wt(prcomp(x, center = T, scale. = T))$score)
temp = by(dta[,1:7], dta$ID, function(x) {
ell.info = cov.wt(prcomp(x, center = T, scale. = T)$x)
center = ell.info$center
cov = ell.info$cov
dist = apply(x,1,function(y){
mahalanobis(y, center, cov)
})
# which(dist > qf(as.numeric(0.95), 7, nrow(x)-1))
which(dist %in% sort(dist,decreasing=T)[1:5])
})
# ell.info <- cov.wt(temp)
# dta = dta[,grepl("_",colnames(dta)),with=F]
# dta = split(dta, data$ID)
# pca = lapply(dta, function(x) x[,1:7])
# pca = lapply(pca, function(y) prcomp(y, center = T, scale. = T)$x)
# ell = lapply(pca, function(x) cov.wt(x))
# cumsum(pca$sdev^2/sum(pca$sdev^2))
# data = cbind(data,pca$x[,1:7])
temp = unlist(temp)
temp_ma = matrix(temp, ncol = 10, byrow = T)
temp_ma = temp_ma +
c(seq(0,dim(data)[1]-dim(data)[1]/1364,by=dim(data)[1]/1364))
new_data_index = as.vector(t(temp_ma))
data = data[-(new_data_index),]
##############################
# y = fread("C:/Users/fansi/Desktop/aerosol/ytr.csv")
# y_980 = as.numeric(y$y)
# y = c(y_980, rep(0,384))
# y = rep(y,each = 90)
# data = data.table(data)
# data[,y:=y]
# cor(as.matrix(data[,-1]))
# dispersion
colnames(data) = c("MODIS1", "MODIS2", "MODIS3", "MODIS4", "MODIS5", "MODIS6", "MODIS7",
"solar1", "solar2", "solar3", "solar4", "solar5","ID",'label')
train = data[data$ID<=980,]
Rmse <- function(error)
{
sqrt(mean(error^2))
}
################# CV ######################################
set.seed(12)
random_index = sample(1:980,980)
980/5
train = data[data$ID<=980,]
train_sca<- scale(train)
train_sca$ID = train$ID
cv_rmse = numeric()
cv_rmse_2 = numeric()
for(j in 1:5)
{
train_cv = train[!(train$ID %in% random_index[(1+(j-1)*196):(j*196)]),]
test_cv = train[train$ID %in% random_index[(1+(j-1)*196):(j*196)],]
train_cv = subset(train_cv, select = -c(ID))
n_sample = 980-length(random_index[(1+(j-1)*196):(j*196)])
rmse = numeric()
i = 1
diff = 1
while(TRUE)
{
# fit1 = neuralnet(label~MODIS1+MODIS2+MODIS3+MODIS4+MODIS5+MODIS6+MODIS7+solar1+
#                    solar2+solar3+solar4+solar5,
#                  train_cv, hidden = 10, stepmax=200, err.fct = "sse", act.fct = "logistic",linear.output = TRUE, )
fit1 = lm(label~.,data = train_cv)
# fit1 = nnet(label~., size = 10,linout = TRUE, decay=5e-4, maxit = 100, data = train_cv)
#reformat 980*100
fit_value = matrix(fit1$fitted.values, n_sample, dim(train_cv)[1]/n_sample, byrow = T)
diff = abs(fit_value - apply(fit_value,1,median))
#reformat for using lapply
# 100*980
diff = as.data.frame(t(diff))
remove_k = lapply(diff, function(x) order(x,decreasing = T)[-(1:1)])
new_data_index = do.call(rbind,remove_k)
new_data_index = new_data_index+c(seq(0,dim(train_cv)[1]-dim(train_cv)[1]/n_sample,by=dim(train_cv)[1]/n_sample))
new_data_index = as.vector(t(new_data_index))
train_cv = train_cv[new_data_index,]
#refomat
pred_value = predict(fit1,subset(test_cv, select = -c(ID,label)))
pred_value = matrix(pred_value, nrow = dim(test_cv)[1]/90, ncol = 90, byrow = T)
rmse[i] = Rmse(unique(test_cv$label) - apply(pred_value,1,median))
i = i+1
print(i)
if(i == 2)
{
next
}
diff = rmse[i-2]-rmse[i-1]
if(diff < 0)
{
break
}
}
cv_rmse[j] = rmse[length(rmse)]
}
mean(cv_rmse)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
data$label
boxplot(data$label)
boxplot(unique(data$label))
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
e = fread("e.csv")[,-1]
f = fread("f.csv")[,-1]
p = fread("p.csv")[,-1]
e = as.matrix(e)
color = 'organ'
res.pca <- prcomp(t(e),center = center, scale = scale)
eig.val <- get_eigenvalue(res.pca)
library(pacman)
pacman::p_load(data.table,parallel, dendextend,
colorspace,gplots,stringr,RColorBrewer,mvtnorm,factoextra)
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
num_of_var = 15
contribute_axes=1
score_axis = c(1,2)
scale = T
center=T
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
res.pca <- prcomp(t(e),center = center, scale = scale)
eig.val <- get_eigenvalue(res.pca)
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
viz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
print(fviz_screeplot(res.pca, ncp=10,linecolor="red",addlabels=T))
>>>>>>> 99a2bf5f876a7a6399058c926dd7352433d0e02b
var = fviz_pca_var(res.pca, col.var="contrib")
print(fviz_pca_var(res.pca, col.var="contrib") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=median(var$data$contrib)) + theme_minimal())
contributes = get_pca_ind(res.pca)$contrib
print(fviz_pca_contrib(res.pca, choice = "var", axes = contribute_axes, top = num_of_var))
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
fviz_pca_ind(res.pca, addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
p[[color]]
color
names(p)
color = "Organ"
fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal()
p[[color]]
length(unique(p[[color]]))
length(unique(NULL))
length(unique(p[[color]]))<2
fwrite(scores,"Scores.csv")
scores = res.pca$x
loadings = res.pca$rotation
fwrite(scores,"Scores.csv")
fwrite(data.table(scores),"Scores.csv")
scores = res.pca$x
loadings = res.pca$rotation
fwrite(data.table(scores),"Scores.csv")
fwrite(data.table(loadings),"Loadings.csv")
var$data
get_pca_var(res.pca)
res.pca$var
library("FactoMineR")
res.pca <- PCA(decathlon2.active, graph = FALSE)
pacman::p_load(data.table,parallel, dendextend,
colorspace,gplots,stringr,RColorBrewer,mvtnorm,factoextra,FactoMineR)
res.pca <- PCA(decathlon2.active, graph = FALSE)
res.pca <- PCA(t(e))
res.pca <- PCA(t(e), graph = FALSE)
res.pca <- PCA(t(e), graph = FALSE)
res.pca
res.pca$var$coord
fwrite(data.table(res.pca$var$coord),"CompoundContribution.csv")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
plot(data$label)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Course2017.STAT/www")
force=F
devtools::install_github("slfan2013/WCMC_DA/WCMC.Stat.PCA",force =force)
devtools::install_github("slfan2013/WCMC_DA/WCMC.Stat.PCA",force =T)
opencpu$browse()
library(WCMC.Stat.PCA)
<<<<<<< HEAD
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\p.csv")[,-1]
pacman::p_load(data.table,parallel, dendextend,
colorspace,gplots,stringr,RColorBrewer,mvtnorm,factoextra,FactoMineR)
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\p.csv")[,-1]
res.pca <- prcomp(t(e),center = center, scale = scale)
print(fviz_screeplot(res.pca, ncp=10,linecolor="red",addlabels=T))
center=T
scale = T
score_axis = c(1,2)
names(p)
p$Treatments
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\p.csv")[,-1]
center=T
scale = T
score_axis = c(1,2)
color = 'Treatments'
num_of_var = 15
mainApp = function(input,
center=T,
scale = T,
score_axis = c(1,2),
color = 'Treatments',
num_of_var = 15,
contribute_axes=1
){
library(pacman)
pacman::p_load(data.table,parallel, dendextend,
colorspace,gplots,stringr,RColorBrewer,mvtnorm,factoextra,FactoMineR)
data. = WCMC.Fansly::FiehnLabFormat(input)
e = data.$e
f = data.$f
p = data.$p
# e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\e.csv")[,-1]
# f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\f.csv")[,-1]
# p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\p.csv")[,-1]
e = as.matrix(e)
# rownames(e) = f[[length(f)]]
# e = t(apply(e,1,function(x){
#   x[is.na(x)] = 0.5*min(x,na.rm = T)
#   return(x)
# }))
#pca
res.pca <- prcomp(t(e),center = center, scale = scale)
# eig.val <- get_eigenvalue(res.pca)
png(filename = "ScreePlot.png",width=800,height=600)
print(fviz_screeplot(res.pca, ncp=10,linecolor="red",addlabels=T))
dev.off()
png(filename = "Contributer.png",width=800,height=800)
var = fviz_pca_var(res.pca, col.var="contrib")
print(fviz_pca_var(res.pca, col.var="contrib") +
scale_color_gradient2(low="white", mid="blue",
high="red", midpoint=median(var$data$contrib)) + theme_minimal())
dev.off()
contributes = get_pca_ind(res.pca)$contrib
png(filename = "ContributerSingleDim.png",width=800,height=800)
print(fviz_pca_contrib(res.pca, choice = "var", axes = as.numeric(contribute_axes), top = num_of_var))
dev.off()
png(filename = "ScorePlot.png",width=800,height=800)
if(length(unique(p[[color]]))<2){
print(fviz_pca_ind(res.pca,addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
}else{
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
}
dev.off()
scores = res.pca$x
loadings = res.pca$rotation
fwrite(data.table(scores),"Scores.csv")
fwrite(data.table(loadings),"Loadings.csv")
res.pca <- PCA(t(e), graph = FALSE)
fwrite(data.table(res.pca$var$coord),"CompoundContribution.csv")
zip(zipfile = "PCA.zip",files = c("Scores.csv",
"Loadings.csv",
"ScreePlot.png",
"Contributer.png",
"ContributerSingleDim.png",
"ScorePlot.png",
"CompoundContribution.csv"))
}
contribute_axes=1
library(pacman)
pacman::p_load(data.table,parallel, dendextend,
colorspace,gplots,stringr,RColorBrewer,mvtnorm,factoextra,FactoMineR)
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\GC\\p.csv")[,-1]
p$Treatments
e = as.matrix(e)
res.pca <- prcomp(t(e),center = center, scale = scale)
length(unique(p[[color]]))<2
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PCA/www")
e = fread("e.csv")[,-1]
f = fread("f.csv")[,-1]
p = fread("p.csv")[,-1]
library(pacman)
pacman::p_load(data.table,parallel, dendextend,
colorspace,gplots,stringr,RColorBrewer,mvtnorm,factoextra,FactoMineR)
e = fread("e.csv")[,-1]
f = fread("f.csv")[,-1]
p = fread("p.csv")[,-1]
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\p.csv")[,-1]
e = as.matrix(e)
res.pca <- prcomp(t(e),center = center, scale = scale)
scale
center
e = t(apply(e,1,function(x){
x[is.na(x)] = 0.5*min(x,na.rm = T)
return(x)
}))
print(fviz_pca_ind(res.pca,addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
dim(t(e))
e = as.matrix(e)
res.pca <- prcomp(t(e),center = center, scale = scale)
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
names(p)
color = 'Treatment'
res.pca <- prcomp(t(e),center = center, scale = scale)
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
res = 300) +
theme_minimal())
?fviz_pca_ind
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300) +
theme_minimal())
?fviz_pca_ind
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="A") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
?fviz_pca_ind
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas"
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
p[[color]]
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_contrib(res.pca, choice = "var", axes = as.numeric(contribute_axes), top = num_of_var))
print(fviz_pca_ind(res.pca,
habillage = p[[color]], addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
?fviz_pca_ind
rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,6))
color = rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,6))
print(fviz_pca_ind(res.pca,
habillage = color, addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
length(color)
dim(data)
dim(e)
color = rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,5))
print(fviz_pca_ind(res.pca,
habillage = color, addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
?fviz_pca_ind
color. = rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,5))
color = 'Treatment'
print(fviz_pca_ind(res.pca,
habillage = p[[color]],palette=color., addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]],palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"), addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]],palette=c("blue", "red"), addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]],
palette=c("blue"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",palette = "aaas",
res = 300,title="Positive Mode") +
theme_minimal())
color. = rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,5))
print(fviz_pca_ind(res.pca,
habillage = p[[color]],
palette=color.,
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]],
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]],
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = F, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = p[[color]],
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\p.csv")[,-1]
e = as.matrix(e)
e = t(apply(e,1,function(x){
x[is.na(x)] = 0.5*min(x,na.rm = T)
return(x)
}))
res.pca <- prcomp(t(e),center = center, scale = scale)
color. = rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,5))
print(fviz_pca_ind(res.pca,
habillage = p[[color]],
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
dim(p)
colnames(p)
color = 'Treatments'
print(fviz_pca_ind(res.pca,
habillage = p[[color]],
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\p.csv")[,-1]
e = as.matrix(e)
e = t(apply(e,1,function(x){
x[is.na(x)] = 0.5*min(x,na.rm = T)
return(x)
}))
res.pca <- prcomp(t(e),center = center, scale = scale)
color. = rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,5))
print(fviz_pca_ind(res.pca,
habillage = p[[color]],
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
p[[color]]
unique(p[[color]])
print(fviz_pca_ind(res.pca,
habillage = factor(p[[color]],levels=unique(p[[color]])),
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = factor(p[[color]],levels=unique(p[[color]])[c(1,3,5,7,2,4,6,8)]),
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="Positive Mode") +
theme_minimal())
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\p.csv")[,-1]
e = as.matrix(e)
# rownames(e) = f[[length(f)]]
e = t(apply(e,1,function(x){
x[is.na(x)] = 0.5*min(x,na.rm = T)
return(x)
}))
#pca
res.pca <- prcomp(t(e),center = center, scale = scale)
# eig.val <- get_eigenvalue(res.pca)
color. = rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,5))
print(fviz_pca_ind(res.pca,
habillage = factor(p[[color]],levels=unique(p[[color]])[c(1,3,5,7,2,4,6,8)]),
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="GC") +
theme_minimal())
factor(p[[color]],levels=unique(p[[color]])[c(1,3,5,7,2,4,6,8)])
names(p)
color = 'Treatment'
print(fviz_pca_ind(res.pca,
habillage = factor(p[[color]],levels=unique(p[[color]])[c(1,3,5,7,2,4,6,8)]),
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="GC") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = factor(p[[color]],levels=unique(p[[color]])[c(1,3,5,7,2,4,6,8)]),
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="LC Negative Mode") +
theme_minimal())
e = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\e.csv")[,-1]
f = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\f.csv")[,-1]
p = fread("C:\\Users\\fansi\\Desktop\\mx 300486_Ganeshan\\p.csv")[,-1]
e = as.matrix(e)
# rownames(e) = f[[length(f)]]
e = t(apply(e,1,function(x){
x[is.na(x)] = 0.5*min(x,na.rm = T)
return(x)
}))
#pca
res.pca <- prcomp(t(e),center = center, scale = scale)
# eig.val <- get_eigenvalue(res.pca)
color. = rep(c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),c(4,5,4,4,5,4,5,5))
print(fviz_pca_ind(res.pca,
habillage = factor(p[[color]],levels=unique(p[[color]])[c(1,3,5,7,2,4,6,8)]),
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="LC Negative Mode") +
theme_minimal())
print(fviz_pca_ind(res.pca,
habillage = factor(p[[color]],levels=unique(p[[color]])[c(1,3,5,7,2,4,6,8)]),
palette=c("#FDBB84","#FC8D59","#E34A33","#B30000","#A1D99B","#74C476","#31A454","#006D2C"),
addEllipses = TRUE, ellipse.level = 0.95,repel=T,axes = as.numeric(score_axis),
geom = "point",
res = 300,title="LC Positive Mode") +
theme_minimal())
if (!require("devtools"))
install.packages('devtools', repos="http://cran.rstudio.com/")
if (!require("opencpu"))
install.packages('opnecpu', repos="http://cran.rstudio.com/")
if (!require("RCurl"))
install.packages('RCurl', repos="http://cran.rstudio.com/")
library(devtools)
library(RCurl)
source('https://bioconductor.org/biocLite.R')
install_github('barupal/metamapp')
library(MetaMapp2016)
library(opencpu)
opencpu$browse('/library/MetaMapp2016/www')
if (!require("devtools"))
install.packages('devtools', repos="http://cran.rstudio.com/")
if (!require("opencpu"))
install.packages('opnecpu', repos="http://cran.rstudio.com/")
if (!require("RCurl"))
install.packages('RCurl', repos="http://cran.rstudio.com/")
library(devtools)
library(RCurl)
source('https://bioconductor.org/biocLite.R')
install_github('barupal/metamapp')
library(MetaMapp2016)
library(opencpu)
opencpu$browse('/library/MetaMapp2016/www')
=======
library(WCMC.Stat.PCA)
library(WCMC.Stat.PCA)
purl <- "http://wcmc-da.fiehnlab.ucdavis.edu/ocpu/library/utils/R/install.packages"
library(RCurl)
library(jsonlite)
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.PCA_0.1.0.tar.gz")))
getURL(purl,customrequest='POST',httpheader=c('Content-Type'='application/json'),
postfields=toJSON(list(pkgs="https://github.com/slfan2013/WCMC_DA/raw/master/WCMC.Stat.tTest_0.1.0.tar.gz")))
>>>>>>> 99a2bf5f876a7a6399058c926dd7352433d0e02b
