stat_file <- readChar("./data/stat_test.txt", nchars = 100000000)
library(mixOmics)
stat_file <- gsub("\r","",stat_file)
cfile <- strsplit(stat_file,"\n")[[1]]
df1 <- do.call(rbind, lapply(cfile, function (x) { strsplit(x,"\t")[[1]]  } ))
df1[1,]
df1[,1]
stat_file <- readChar("./data/stat_test.txt", nchars = 100000000)
stat_file <- gsub("\r","",stat_file)
cfile <- strsplit(stat_file,"\n")[[1]]
cfile[1,]
cfile[1]
df1 <- do.call(rbind, lapply(cfile, function (x) { strsplit(x,"\t")[[1]]  } ))
df2 <- df1[3:nrow(df1),2:ncol(df1)]
is.matrix(df2)
pcamat <- df2
pcamat[which(is.na(pcamat)==TRUE)] <- min(pcamat[which(is.na(pcamat)==FALSE)])
pca.res <- pca(pcamat, ncomp=2,max.iter=100)
pcamat <- do.call("cbind",lapply(df2,as.numeric))
pcamat[which(is.na(pcamat)==TRUE)] <- min(pcamat[which(is.na(pcamat)==FALSE)])
pca.res <- pca(pcamat, ncomp=2,max.iter=100)
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100)
pcamat
pcamat[1,]
pca.res <- mixOmics::pca(pcamat, ncomp=1,max.iter=100)
pc_scores <- pca.res$loadings[[1]]
pc_scores
pca.res <- mixOmics::pca(t(pcamat), ncomp=1,max.iter=100)
pca.res <- mixOmics::pca(t(pcamat), ncomp=2,max.iter=100)
pcamat <- do.call("cbind",lapply(df2,as.numeric))
which(pcamat==NA)
is.na(pcamat)
which(is.na(pcamat)==TRUE)
pcamat[which(is.na(pcamat)==TRUE)] <- 1
pca.res <- mixOmics::pca(t(pcamat), ncomp=2,max.iter=100)
df2[1,]
saplly(1:nrow(df2), function(x) { length(which(is.na(df2[x,])==TRUE))) })
saplly(1:nrow(df2), function(x) { length(which(is.na(df2[x,])==TRUE)) })
sapply(1:nrow(df2), function(x) { length(which(is.na(df2[x,])==TRUE)) })
sapply(1:nrow(df2), function(x) { length(which(df2[x,]=="")) })
sapply(1:nrow(df2), function(x) { length(which(df2[x,]!="")) })
which(sapply(1:nrow(df2), function(x) { length(which(df2[x,]!="")) })==ncol(df2))
df2 <- df2[which(sapply(1:nrow(df2), function(x) { length(which(df2[x,]!="")) })==ncol(df2)),]
pcamat <- do.call("cbind",lapply(df2,as.numeric))
pca.res <- mixOmics::pca(t(pcamat), ncomp=2,max.iter=100)
pca.res <- mixOmics::pca(t(pcamat), ncomp=5,max.iter=100)
pca.res <- mixOmics::pca(pcamat), ncomp=2,max.iter=100)
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100)
stat_file <- readChar("./data/stat_test.txt", nchars = 100000000)
library(pacman)
pacman::p_load(mixOmics,RJSONIO,RCurl,stringr, ggplot2, httr,grid, png,ReporteRs,svglite)
stat_file <- gsub("\r","",stat_file)
cfile <- strsplit(stat_file,"\n")[[1]]
df1 <- do.call(rbind, lapply(cfile, function (x) { strsplit(x,"\t")[[1]]  } ))
df2 <- df1[3:nrow(df1),2:ncol(df1)]
df2 <- df2[which(sapply(1:nrow(df2), function(x) { length(which(df2[x,]!="")) })==ncol(df2)),]
df2
as.data.frame(df2)
pcamat <- do.call("cbind",lapply(df2,as.numeric))
pcamat[which(is.na(pcamat)==TRUE)] <- min(pcamat[which(is.na(pcamat)==FALSE)])
pcamat[which(is.na(pcamat)==TRUE)] <- 1
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100)
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100, center = TRUE, scale = FALSE)
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100, center = TRUE, scale = TRUE)
pca.res <- mixOmics::pca(pcamat, ncomp=3,max.iter=100, center = TRUE, scale = TRUE)
pcamat
pcamat[1,]
stat_file <- readChar("./data/stat_test.txt", nchars = 100000000)
library(pacman)
pacman::p_load(mixOmics,RJSONIO,RCurl,stringr, ggplot2, httr,grid, png,ReporteRs,svglite)
stat_file <- gsub("\r","",stat_file)
cfile <- strsplit(stat_file,"\n")[[1]]
df1 <- do.call(rbind, lapply(cfile, function (x) { strsplit(x,"\t")[[1]]  } ))
df2 <- df1[3:nrow(df1),2:ncol(df1)]
df2 <- df2[which(sapply(1:nrow(df2), function(x) { length(which(df2[x,]!="")) })==ncol(df2)),]
pcamat <- do.call("cbind",lapply(df2,as.numeric))
pcamat[which(is.na(pcamat)==TRUE)] <- min(pcamat[which(is.na(pcamat)==FALSE)])
pcamat[which(is.na(pcamat)==TRUE)] <- 1
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100)
ncol(pcamat)
nrow(pcamat)
pca.res <- mixOmics::pca(as.data.frame(pcamat), ncomp=2,max.iter=100)
as.data.frame(pcamat)
stat_file <- readChar("./data/stat_test.txt", nchars = 100000000)
library(pacman)
pacman::p_load(mixOmics,RJSONIO,RCurl,stringr, ggplot2, httr,grid, png,ReporteRs,svglite)
stat_file <- gsub("\r","",stat_file)
cfile <- strsplit(stat_file,"\n")[[1]]
cfile
cfile[1]
df1 <- do.call(rbind, lapply(cfile, function (x) { strsplit(x,"\t")[[1]]  } ))
df1 <- as.data.frame(do.call(rbind, lapply(cfile, function (x) { strsplit(x,"\t")[[1]]  } )))
nrow(df1)
ncol(df1)
df1
df1[1:3,]
df1[1:2,]
df2 <- df1[3:nrow(df1),2:ncol(df1)]
df2 <- df2[which(sapply(1:nrow(df2), function(x) { length(which(df2[x,]!="")) })==ncol(df2)),]
pcamat <- do.call("cbind",lapply(df2,as.numeric))
pcamat[which(is.na(pcamat)==TRUE)] <- min(pcamat[which(is.na(pcamat)==FALSE)])
pcamat[which(is.na(pcamat)==TRUE)] <- 1
pca.res <- mixOmics::pca(as.data.frame(pcamat), ncomp=2,max.iter=100)
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100)
pc_scores <- pca.res$loadings[[1]]
data_bw$PC1 <- as.numeric(pc_scores[,1])
pc_scores
df1[1,]
df1[2,]
data_bw <- data.frame(sample=df1[,1], class=df1[,2], PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw <- data.frame(sample=df1[,1], class=df1[2,], PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw <- data.frame(sample=df1[1,], class=df1[2,], PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw <- data.frame(sample=df1[1,], class=df1[2,], PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw
data_bw <- data.frame(sample=as.character(df1[,1]), class=as.character(df1[2,]), PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw <- data.frame(sample=as.character(df1[1,]), class=as.character(df1[2,]), PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw <- data.frame(sample=as.character(df1[1,-1]), class=as.character(df1[2,-1]), PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw$sample
data_bw$class
data_bw <- data.frame(sample=as.character(df1[1,]), class=as.character(df1[2,]), PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw <- data.frame(sample=as.character(df1[1,-1]), class=as.character(df1[2,-1]), PC1 = pc_scores[,1], PC2=pc_scores[,2])
as.character(df1[1,-1])
df1[1,-1]
sapply(df1[1,-1], function(x) {as.character(x)})
as.character(sapply(df1[1,-1], function(x) {as.character(x)}))
data_bw <- data.frame(sample= as.character(sapply(df1[1,-1], function(x) {as.character(x)}))  , class=as.character(sapply(df1[2,-1], function(x) {as.character(x)})), PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw
data_bw$PC1 <- as.numeric(pc_scores[,1])
data_bw$PC2 <- as.numeric(pc_scores[,2])
colnames(data_bw)
f2 <<- ggplot(data_bw, aes(PC1,PC2)) +
#scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
#scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=14),
axis.title.x = element_text(face="bold", size=12),
axis.title.y = element_text(face="bold", size=12, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=12),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=3)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
#plot(f4)
plot(f4)
data_bw$class
tolower(data_bw$class)
data_bw <- data.frame(sample= as.character(sapply(df1[1,-1], function(x) {as.character(x)}))  , class=tolower(as.character(sapply(df1[2,-1], function(x) {as.character(x)}))), PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw$PC1 <- as.numeric(pc_scores[,1])
data_bw$PC2 <- as.numeric(pc_scores[,2])
f2 <- ggplot(data_bw, aes(PC1,PC2)) +
#scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
#scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=14),
axis.title.x = element_text(face="bold", size=12),
axis.title.y = element_text(face="bold", size=12, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=12),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=3)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
plot(f4)
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100,center = T, scale = T)
pc_scores <- pca.res$loadings[[1]]
data_bw <- data.frame(sample= as.character(sapply(df1[1,-1], function(x) {as.character(x)}))  , class=tolower(as.character(sapply(df1[2,-1], function(x) {as.character(x)}))), PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw$PC1 <- as.numeric(pc_scores[,1])
data_bw$PC2 <- as.numeric(pc_scores[,2])
f2 <- ggplot(data_bw, aes(PC1,PC2)) +
#scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
#scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=14),
axis.title.x = element_text(face="bold", size=12),
axis.title.y = element_text(face="bold", size=12, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=12),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=3)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
plot(f4)
pca.res <- mixOmics::pca(pcamat, ncomp=2,max.iter=100,center = F, scale = F)
pc_scores <- pca.res$loadings[[1]]
data_bw <- data.frame(sample= as.character(sapply(df1[1,-1], function(x) {as.character(x)}))  , class=tolower(as.character(sapply(df1[2,-1], function(x) {as.character(x)}))), PC1 = pc_scores[,1], PC2=pc_scores[,2])
data_bw$PC1 <- as.numeric(pc_scores[,1])
data_bw$PC2 <- as.numeric(pc_scores[,2])
f2 <- ggplot(data_bw, aes(PC1,PC2)) +
#scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
#scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=14),
axis.title.x = element_text(face="bold", size=12),
axis.title.y = element_text(face="bold", size=12, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=12),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=3)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
plot(f4)
f2 <- ggplot(data_bw, aes(PC1,PC2)) +
scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=14),
axis.title.x = element_text(face="bold", size=12),
axis.title.y = element_text(face="bold", size=12, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=12),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=3)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
plot(f4)
paste0("wcmc_pca.pptx")
wbp <- pptx(template = system.file("data","chem_rich_temp.pptx", package = "ChemRICH" ))
wbp <- addSlide( wbp, "lipidClust" )
wbp <- addPlot( wbp, function( ) print( f4 ), offx =2.5 , offy = 1.1, width = 25, height = 15 , vector.graphic = TRUE )
wbp <- addParagraph( wbp, value = c("ChemRICH visualization : Node sizes shows the fold changes. Node color represents t-statistcs, red means increased and blue means decreased on a p-value of 0.10. Network was created using a chemical similarity as calculated using the Tanimoto coefficient and the MetaMapp approach. Clusters , as shown by ellipses were detected by the glay community detection algorithm in Cytoscape. Labels shows the lipid classes where bold text means were found be to enriched in one study group on a pvalue threshold of 0.10. Number in the lables shows carbon count and count of double bonds. See the supplementary files for pvalues of each enriched clusters. Threshold for the chemical similarity was ", cutoff) )
wbp <- addParagraph( wbp, value = c("ChemRICH visualization : Node sizes shows the fold changes. Node color represents t-statistcs, red means increased and blue means decreased on a p-value of 0.10. Network was created using a chemical similarity as calculated using the Tanimoto coefficient and the MetaMapp approach. Clusters , as shown by ellipses were detected by the glay community detection algorithm in Cytoscape. Labels shows the lipid classes where bold text means were found be to enriched in one study group on a pvalue threshold of 0.10. Number in the lables shows carbon count and count of double bonds. See the supplementary files for pvalues of each enriched clusters. Threshold for the chemical similarity was") )
writeDoc( wbp, file = paste0("wcmc_pca.pptx") )
f2 <- ggplot(data_bw, aes(PC1,PC2)) +
scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=25),
axis.title.x = element_text(face="bold", size=20),
axis.title.y = element_text(face="bold", size=20, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
panel.background = element_rect(fill = "transparent",colour = NA), # or theme_blank()
plot.background = element_rect(fill = "transparent",colour = NA),
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=20),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=10)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
plot(f4)
wbp <- addSlide( wbp, "lipidClust" )
wbp <- addPlot( wbp, function( ) print( f4 ), offx =2.5 , offy = 1.1, width = 25, height = 15 , vector.graphic = TRUE )
wbp <- addParagraph( wbp, value = c("ChemRICH visualization : Node sizes shows the fold changes. Node color represents t-statistcs, red means increased and blue means decreased on a p-value of 0.10. Network was created using a chemical similarity as calculated using the Tanimoto coefficient and the MetaMapp approach. Clusters , as shown by ellipses were detected by the glay community detection algorithm in Cytoscape. Labels shows the lipid classes where bold text means were found be to enriched in one study group on a pvalue threshold of 0.10. Number in the lables shows carbon count and count of double bonds. See the supplementary files for pvalues of each enriched clusters. Threshold for the chemical similarity was") )
writeDoc( wbp, file = paste0("wcmc_pca.pptx") )
f2 <- ggplot(data_bw, aes(PC1,PC2)) +
scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=25),
axis.title.x = element_text(face="bold", size=20),
axis.title.y = element_text(face="bold", size=20, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
panel.background = element_rect(fill = "transparent",colour = NA), # or theme_blank()
plot.background = element_rect(fill = "transparent",colour = NA),
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=20),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=10)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
plot(f4)
wbp <- addSlide( wbp, "lipidClust" )
wbp <- addPlot( wbp, function( ) print( f4 ), offx =2.5 , offy = 1.1, width = 25, height = 15 , vector.graphic = TRUE )
wbp <- addParagraph( wbp, value = c("ChemRICH visualization : Node sizes shows the fold changes. Node color represents t-statistcs, red means increased and blue means decreased on a p-value of 0.10. Network was created using a chemical similarity as calculated using the Tanimoto coefficient and the MetaMapp approach. Clusters , as shown by ellipses were detected by the glay community detection algorithm in Cytoscape. Labels shows the lipid classes where bold text means were found be to enriched in one study group on a pvalue threshold of 0.10. Number in the lables shows carbon count and count of double bonds. See the supplementary files for pvalues of each enriched clusters. Threshold for the chemical similarity was") )
writeDoc( wbp, file = paste0("wcmc_pca.pptx") )
f2 <- ggplot(data_bw, aes(PC1,PC2)) +
scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=50),
axis.title.x = element_text(face="bold", size=40),
axis.title.y = element_text(face="bold", size=40, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
panel.background = element_rect(fill = "transparent",colour = NA), # or theme_blank()
plot.background = element_rect(fill = "transparent",colour = NA),
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=40),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=10)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
plot(f4)
wbp <- addSlide( wbp, "lipidClust" )
wbp <- addPlot( wbp, function( ) print( f4 ), offx =2.5 , offy = 1.1, width = 25, height = 15 , vector.graphic = TRUE )
wbp <- addParagraph( wbp, value = c("ChemRICH visualization : Node sizes shows the fold changes. Node color represents t-statistcs, red means increased and blue means decreased on a p-value of 0.10. Network was created using a chemical similarity as calculated using the Tanimoto coefficient and the MetaMapp approach. Clusters , as shown by ellipses were detected by the glay community detection algorithm in Cytoscape. Labels shows the lipid classes where bold text means were found be to enriched in one study group on a pvalue threshold of 0.10. Number in the lables shows carbon count and count of double bonds. See the supplementary files for pvalues of each enriched clusters. Threshold for the chemical similarity was") )
writeDoc( wbp, file = paste0("wcmc_pca.pptx") )
f2 <- ggplot(data_bw, aes(PC1,PC2)) +
scale_y_continuous(paste("PC2 - variance explained : ",signif(pca.res$explained_variance[2],digit=4),"(%) ",sep="")) +
scale_x_continuous(paste("PC1 - variance explained : ",signif(pca.res$explained_variance[1],digit=4),"(%) ",sep="")) +
theme_bw() +
labs(title = "Principal component analysis (PCA)") +
theme(
plot.title = element_text(face="bold", size=50),
axis.title.x = element_text(face="bold", size=40),
axis.title.y = element_text(face="bold", size=40, angle=90),
panel.grid.major = element_blank(), # switch off major gridlines
panel.grid.minor = element_blank(), # switch off minor gridlines
panel.background = element_rect(fill = "transparent",colour = NA), # or theme_blank()
plot.background = element_rect(fill = "transparent",colour = NA),
#legend.position = c(0.3,0.8), # manually position the legend (numbers being from 0,0 at bottom left of whole plot to 1,1 at top right)
legend.title = element_blank(), # switch off the legend title
legend.text = element_text(size=40),
legend.key.size = unit(1.5, "lines"),
legend.key = element_blank(), # switch off the rectangle around symbols in the legend
legend.spacing = unit(.05, "cm"),
axis.text.x = element_text(size=0,angle = 45, hjust = 1),
axis.text.y = element_text(size=0,angle = 45, hjust = 1)
)
f3 <- f2 + geom_point(aes_string(shape=colnames(data_bw)[2], colour=colnames(data_bw)[2] ), size=10)
f4 <- f3 +  stat_ellipse( aes_string(colour=colnames(data_bw)[2] ), linetype = 1 )
plot(f4)
wbp <- addSlide( wbp, "lipidClust" )
wbp <- addPlot( wbp, function( ) print( f4 ), offx =2.5 , offy = 1.1, width = 25, height = 15 , vector.graphic = TRUE )
wbp <- addParagraph( wbp, value = c("Principal component analysis shows that there is a clear difference in the two groups compared.") )
writeDoc( wbp, file = paste0("wcmc_pca.pptx") )
library(WCMC.Stat.PCA)
library(opencpu)
opencpu$browse()
library(WCMC.Stat.PCA)
opencpu$browse()
library(WCMC.Stat.PCA)
opencpu$browse()
library("ChemRICH", lib.loc="~/R/win-library/3.3")
library(WCMC.Stat.PCA)
opencpu$browse()
library(WCMC.Stat.PCA)
opencpu$browse()
opencpu$browse()
library(WCMC.Stat.PCA)
opencpu$browse()
library(WCMC.Stat.PCA)
opencpu$browse()
opencpu$browse("/ocpu/library/WCMC.Stat.PCA/www")
opencpu$browse("/library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
opencpu$browse("/library/WCMC.Stat.PCA/www")
opencpu$browse("/library/WCMC.Stat.PCA/www")
library(WCMC.Stat.PCA)
library(opencpu)
