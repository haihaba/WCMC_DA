id = c(1,2,3,4,5,5,3,4,2,1)
sort(id)
order(id)
di[order(id)]
id[order(id)]
library(WCMC.Stat.PairedTTest)
input = 'treatment	Pre	Pre	Pre	Pre	Pre	Post	Post	Post	Post	Post
sample ID	1	2	3	4	5	2	1	3	4	5
compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1	0.929733982	0.313581639	0.615433118	0.745156919	0.070913804	0.631182367	0.281514954	0.432246896	0.516937291	0.645259665
compound 2	0.528730161	0.957447963	0.916147092	0.872648059	0.904453873	0.996082982	0.734665965	0.263203987	0.715017225	0.952757227
compound 3	0.344045129	0.408354868	0.590831495	0.072961383	0.077628442	0.306221196	0.904659519	0.362181119	0.811035054	0.45693799
compound 4	0.291884398	0.961162608	0.138115214	0.992223645	0.67221779	0.679478197	0.388207749	0.293634231	0.694312805	0.550294561
compound 5	0.910404129	0.071946622	0.352755616	0.809055639	0.52590668	0.401874468	0.514841139	0.635129074	0.525253698	0.841361282
compound 6	0.065285222	0.948625336	0.163442444	0.709599273	0.863305095	0.245447096	0.962397592	0.258572309	0.736923445	0.51887853
compound 7	0.002940075	0.195309296	0.065221465	0.472208502	0.082588408	0.142344765	0.185113422	0.976700357	0.503310159	0.354834386
compound 8	0.737866775	0.177849423	0.650609267	0.472803302	0.20605407	0.139923066	0.752574846	0.588382283	0.180186592	0.008320475
compound 9	0.199879916	0.667103242	0.348676297	0.304571528	0.106529615	0.317943522	0.812584703	0.978885413	0.991101721	0.951736762
compound 10	0.342232882	0.559909792	0.227334107	0.783257038	0.374930987	0.782075822	0.74121012	0.253239494	0.519243803	0.452069133
compound 11	0.260099259	0.858435637	0.531908078	0.752048681	0.580252587	0.330003586	0.701571802	0.089677859	0.2515055	0.824502937
compound 12	0.096217147	0.257623879	0.207787426	0.724757256	0.288842997	0.907264667	0.916059282	0.903700112	0.328873542	0.269167503
compound 13	0.503706943	0.052403712	0.829074952	0.900607412	0.856871871	0.161454922	0.372748396	0.636341052	0.622893138	0.557634923
compound 14	0.071350608	0.139882876	0.356429036	0.887273114	0.99965882	0.876724391	0.355643563	0.379607976	0.146096836	0.183933717
compound 15	0.717195381	0.884432866	0.987599239	0.55101811	0.676283855	0.91329855	0.166776593	0.77083439	0.360638329	0.773510136
compound 16	0.408395757	0.809437258	0.871835463	0.079623066	0.648743815	0.58355927	0.733030882	0.486838391	0.478076414	0.073084135
compound 17	0.988886215	0.803937986	0.875422358	0.757175902	0.117448318	0.982442338	0.844225387	0.598966606	0.900310066	0.108230782
compound 18	0.749091023	0.311406789	0.055591011	0.249612103	0.263294428	0.026068815	0.343613059	0.568491111	0.628216433	0.636461049
compound 19	0.143786446	0.442539623	0.69635556	0.314235857	0.904257774	0.260110014	0.12679234	0.027600766	0.051691136	0.14268631
compound 20	0.50146413	0.660196308	0.989775306	0.812694874	0.933748372	0.043649493	0.364235956	0.722055578	0.534048379	0.847824618
'
library(pacman)
pacman::p_load(data.table,parallel)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
e = e[,order(p[[3]])]
p = p[order(p[[3]]),]
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
p
group=colnames(p)[2]
PairedTtest = parSapply(cl,1:nrow(e),function(j,e,p,group){
t.test(e[j,]~p[[group]])$p.value
},e,p,group)
PairedTtest.FDR=p.adjust(PairedTtest,'fdr')
result = data.table(f,PairedTtest,PairedTtest.FDR)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c(colnames_f_1,c('p value', 'adjusted p value'))
}else{
colnames(result) = c(colnames(f),c('p value', 'adjusted p value'))
}
fwrite(data.table(result),"PairedTtest.csv")
fwrite(data.table(result),"PairedTtest.txt",sep = "\t")
library(WCMC.Stat.PairedTTest)
input = 'treatment	Pre	Pre	Pre	Pre	Pre	Post	Post	Post	Post	Post
sample ID	1	2	3	4	5	2	1	3	4	5
compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1		0.020225018	0.741462125	0.870915896	0.284043208	0.16530348	0.463713668	0.452406431	0.075157338	0.582109965
compound 2	0.151520156	0.582494227	0.494084048	0.709776232	0.141064506	0.064582931	0.458244359	0.893734503	0.565041214	0.743550898
compound 3	0.181634786	0.853588307	0.260830524	0.83919004	0.324435147	0.696827512	0.714726131	0.621591152	0.542026367	0.85881912
compound 4	0.369246427	0.927339728	0.458657751	0.321706095	0.947938838	0.830552456	0.762582791	0.443318301	0.956954633	0.094959517
compound 5	0.458182481	0.223170929	0.949721494	0.188118406	0.013420039	0.776706707	0.561626079	0.038870851	0.343188024	0.554780031
compound 6	0.125283966	0.584294269	0.092559276	0.31039054	0.104587827	0.362231179	0.326905908	0.073006809	0.836015362	0.589758331
compound 7	0.225103503	0.848040558	0.330023446	0.603222688	0.187775555	0.86091418	0.399616665	0.90837421	0.703890625	0.557844124
compound 8	0.841865188	0.247717052	0.543433093	0.505439479	0.116363787	0.614650946	0.713112459	0.516952859	0.950394316	0.305501159
compound 9	0.632425257	0.398552096	0.230063219	0.75538241	0.639339341	0.774548439	0.690132253	0.086096053	0.835536865	0.298931536
compound 10	0.755709233	0.533884308	0.461364734	0.870336591	0.464130461	0.050857335	0.056233977	0.044994169	0.6723712	0.266864778
compound 11	0.657003545	0.498021551	0.207991462	0.166277138	0.008665182	0.485031187	0.358851055	0.577713204	0.208457448	0.344130549
compound 12	0.866939739	0.905780925	0.064374933	0.337549635	0.62050522	0.291502593	0.324675599	0.843102376	0.12022159	0.319274071
compound 13	0.281155401	0.503945511	0.574354681	0.578578065	0.61935511	0.581650838	0.463938453	0.471509934	0.927236207	0.983978233
compound 14	0.520527249	0.386081655	0.620852673	0.550151452	0.564037234	0.166334246	0.015990052	0.159411242	0.744384282	0.306080196
compound 15	0.720404433	0.151554215	0.353680717	0.338154149	0.372017035	0.504954609	0.878444982	0.27442915	0.991706597	0.273629308
compound 16	0.644354735	0.594710881	0.895886016	0.290332177	0.105558863	0.91620694	0.899954122	0.332988109	0.905839258	0.334544539
compound 17	0.321282016	0.851488828	0.750503318	0.127036228	0.805289884	0.385111663	0.014548194	0.806635603	0.82512198	0.446162742
compound 18	0.737299098	0.51452002	0.288013041	0.516342593	0.246567454	0.088845902	0.763455529	0.063367097	0.329357863	0.354897809
compound 19	0.981140429	0.887009235	0.421400317	0.176163418	0.981981457	0.453646602	0.35785098	0.931399366	0.782444753	0.48658577
compound 20	0.586518369	0.729250634	0.79351125	0.753518182	0.040693733	0.605769161	0.30039641	0.76800162	0.94974707	0.187164795
'
library(pacman)
pacman::p_load(data.table,parallel)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
e = e[,order(p[[3]])]
p = p[order(p[[3]]),]
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
group=colnames(p)[2]
PairedTtest = parSapply(cl,1:nrow(e),function(j,e,p,group){
t.test(e[j,]~p[[group]])$p.value
},e,p,group)
PairedTtest.FDR=p.adjust(PairedTtest,'fdr')
result = data.table(f,PairedTtest,PairedTtest.FDR)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c(colnames_f_1,c('p value', 'adjusted p value'))
}else{
colnames(result) = c(colnames(f),c('p value', 'adjusted p value'))
}
result
input = 'treatment	Pre	Pre	Pre	Pre	Pre	Post	Post	Post	Post
sample ID	1	2	3	4	5	2	1	3	4
compound index	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9
compound 1	0.888013862	0.94452089	0.878227997	0.536523674	0.0361757	0.528357025	0.435963152	0.045442834	0.236897385
compound 2	0.007059484	0.59223435	0.471546928	0.206032473	0.158440151	0.619221225	0.08944688	0.475635036	0.269816487
compound 3	0.733934411	0.780943183	0.844879657	0.868497856	0.39987293	0.976684607	0.365140414	0.37635692	0.526784651
compound 4	0.576548461	0.981237367	0.701050048	0.374379734	0.982862358	0.625267076	0.492899966	0.317718709	0.685763547
compound 5	0.687145313	0.300441914	0.068061617	0.716012884	0.915605827	0.087561969	0.567535892	0.836145763	0.26702739
compound 6	0.610000553	0.112805456	0.240297005	0.275264981	0.119392003	0.553250436	0.989833795	0.303322828	0.963752462
compound 7	0.885271013	0.830356255	0.03859302	0.311955524	0.422548759	0.930817251	0.16205308	0.673609654	0.721853357
compound 8	0.054660096	0.2948695	0.649304033	0.080740507	0.738137408	0.845246437	0.872371107	0.313063993	0.133686761
compound 9	0.994703731	0.651425529	0.598752277	0.918874431	0.661274554	0.566374756	0.094438511	0.660878618	0.967651307
compound 10	0.42971679	0.601161026	0.112475327	0.422532707	0.206764552	0.38391463	0.403427868	0.442959352	0.125043813
compound 11	0.318932189	0.646384686	0.183460972	0.449937919	0.805676204	0.915338289	0.259685878	0.226509763	0.589264148
compound 12	0.610140428	0.161769657	0.370011246	0.566881204	0.05462833	0.27690156	0.979721234	0.278704237	0.199555135
compound 13	0.846643232	0.259888314	0.842084949	0.962920519	0.104570477	0.594939387	0.319015922	0.091089657	0.665456397
compound 14	0.693287048	0.992196074	0.163124245	0.002606392	0.632567175	0.590125207	0.321872639	0.091795399	0.091626102
compound 15	0.737407482	0.66896466	0.194369078	0.493502428	0.513870376	0.90136083	0.576555967	0.045665665	0.00222641
compound 16	0.836846846	0.128510484	0.065399224	0.660502372	0.290765862	0.217729217	0.207254389	0.23050704	0.509560382
compound 17	0.438895314	0.586148501	0.997386171	0.800936278	0.228969453	0.05773486	0.100092797	0.531318084	0.565829927
compound 18	0.188978302	0.797787844	0.447117068	0.856301207	0.987785168	0.387551872	0.95944092	0.385851723	0.842625134
compound 19	0.054863261	0.455129458	0.681392183	0.264411291	0.821189242	0.09141473	0.301446074	0.712544214	0.604578777
compound 20	0.317097463	0.96725321	0.938661138	0.375852906	0.577406465	0.668543858	0.460683845	0.242224379	0.147163834
'
library(pacman)
pacman::p_load(data.table,parallel)
# read.data
data. = WCMC.Fansly::MetaboAnalystFormat(input,row_start = 3)
e = data.$e
f = data.$f
p = data.$p
e = as.matrix(e)
e = e[,order(p[[3]])]
p = p[order(p[[3]]),]
multicore = T
if(multicore){
cl = makeCluster(min(detectCores(),2))
}else{
cl = makeCluster(1)
}
group=colnames(p)[2]
PairedTtest = parSapply(cl,1:nrow(e),function(j,e,p,group){
t.test(e[j,]~p[[group]])$p.value
},e,p,group)
PairedTtest.FDR=p.adjust(PairedTtest,'fdr')
result = data.table(f,PairedTtest,PairedTtest.FDR)
rownames(result) = 1:nrow(result)
if(class(f)=="character"){
colnames(result) = c(colnames_f_1,c('p value', 'adjusted p value'))
}else{
colnames(result) = c(colnames(f),c('p value', 'adjusted p value'))
}
PairedTtest
result
library(WCMC.Stat.PairedTTest)
library(opencpu);
opencpu$browse("library/WCMC.Stat.PairedTTest/www")
