opencpu$browse("library/WCMC.Stat.iPCA/www")
A = matrix(rnorm(10*20),nrow = 10)
svd(A)
A = matrix(c(1,2,3,4,5,6),nrow =2)
A
svd(A)
?svd
A = matrix(c(1,2,3,4,5,6,0,0,0),nrow =3)
svd(A)
A
A = matrix(c(1,2,3,4,5,6),nrow =2)
svd(A)
A = matrix(c(1,2,0,3,4,0,5,6,0),nrow =3)
svd(A)
A = matrix(c(1,2,0,0,3,4,0,0,5,6,0,0),nrow =3)
svd(A)
A = matrix(c(1,2,0,0,3,4,0,0,5,6,0,0),nrow =4)
svd(A)
A = matrix(c(1,2,0,3,4,0,5,6,0),nrow =4)
A = matrix(c(1,2,0,3,4,0,5,6,0),nrow =3)
svd(A)
A = matrix(c(1,2,3,4,5,6),nrow =2)
svd(A)
A = matrix(c(1,2,3,4,5,6),nrow =2)
svd(A)
prcomp(A,center=F)
prcomp(A,center=F)$x
e_scale = t(scale(t(e),center=center,scale=scale))
dim(e_scale)
input = '		treatment	Control	Control	Control	Control	Control	Drug	Drug	Drug	Drug	Drug
time	0h	0h	1h	1h	2h	0h	1h	1h	2h	2h
injection order	1	2	3	4	5	6	7	8	9	10
compound index	KEGG	PubChem	sample1	sample2	sample3	sample4	sample5	sample6	sample7	sample8	sample9	sample10
compound 1	1	20	0.952915173	0.476861219	0.50490937	0.361331166	0.354305893	0.085485473	0.884942792	0.810104454	0.682905462	0.400533178
compound 2	2	19	0.386281426	0.476314498	0.30932641	0.010041778	0.761041148	0.986431156	0.180929013	0.031467988	0.45803694	0.820330781
compound 3	3	18	0.698370606	0.981551808	0.925843314	0.139242935	0.718511174	0.901659542	0.675529277	0.195262914	0.087196225	0.025146137
compound 4	4	17	0.365961085	0.632501054	0.55472794	0.058317505	0.478698482	0.262850949	0.192944974	0.124458066	0.415768276	0.3491382
compound 5	5	16	0.210969099	0.184763281	0.252186092	0.271570847	0.919325419	0.710744719	0.121469407	0.5386045	0.497193714	0.447845836
compound 6	6	15	0.834043637	0.730820998	0.541269109	0.439244465	0.235444249	0.616615476	0.877662616	0.635133431	0.487620699	0.538297204
compound 7	7	14	0.275669287	0.875531463	0.586318532	0.688259838	0.690491338	0.575587685	0.00263855	0.493420185	0.624872067	0.089337198
compound 8	8	13	0.703320167	0.841085969	0.244137171	0.870684619	0.444679822	0.497946857	0.903083036	0.657285769	0.478191423	0.780177834
compound 9	9	12	0.809351123	0.375606654	0.167451883	0.332494252	0.146164158	0.214615299	0.86040988	0.93780897	0.979553164	0.32869553
compound 10	10	11	0.985335012	0.857719603	0.489577424	0.564930912	0.218924763	0.855789827	0.414317547	0.916463053	0.67149119	0.271962646
compound 11	11	10	0.814143081	0.338851829	0.789988239	0.903323121	0.659905808	0.276926712	0.807807318	0.58683965	0.335099304	0.196675395
compound 12	12	9	0.657520166	0.629566676	0.119163452	0.357522188	0.959746776	0.375637539	0.514127662	0.933643335	0.197831929	0.925044758
compound 13	13	8	0.288156509	0.318494774	0.303221618	0.615969186	0.816925334	0.448869616	0.93252923	0.072227489	0.567804703	0.217429086
compound 14	14	7	0.218187856	0.855386085	0.72586124	0.350071795	0.720951017	0.521180354	0.442730055	0.060551844	0.48986208	0.292558752
compound 15	15	6	0.383911917	0.002497182	0.728774856	0.743936388	0.905554317	0.578711641	0.276133035	0.79571721	0.680560688	0.083317295
compound 16	16	5	0.219881514	0.09791535	0.229028103	0.735753326	0.266782674	0.504378578	0.726468158	0.897497302	0.331500158	0.121288332
compound 17	17	4	0.081902753	0.193018597	0.101804164	0.303739027	0.240848365	0.915857101	0.350233758	0.990887225	0.962816631	0.918236655
compound 18	18	3	0.835581445	0.434007716	0.748509191	0.751521642	0.79378572	0.996362312	0.889406202	0.726941792	0.145286771	0.952288198
compound 19	19	2	0.373033202	0.583595259	0.465601017	0.378344664	0.282015946	0.625259219	0.283169683	0.201492637	0.024199696	0.801054815
compound 20	20	1	0.218703932	0.892654877	0.179787618	0.696771032	0.505982463	0.458382843	0.630432517	0.480843965	0.007962113	0.690871034
'
library(pacman)
pacman::p_load(data.table,jsonlite)
input = gsub("\r","",input)
# For some reason, the '\t' at the beginning of the first row is missing. Have to replace them back.
# Check how many '\t' each row has. Then add the missing '\t's to the first element of cfile.
cfile = strsplit(input,"\n")[[1]]
cfile
cfile[[3]] = paste0(paste0(rep('\t',2),collapse = ''),cfile[[3]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
col_start = t.mode-ts.first.row + 1
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE),
p)[-1,]
rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
View(f)
View(p)
col_start
t.mode
ts.first.row
col_start = 3
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
col_start = t.mode-ts.first.row + 1
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE),
p)[-1,]
rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
# write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
# write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
View(f)
View(p)
head(df1)
col_start = 3
row_start
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE),
p)[-1,]
rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
# write.csv(p,"p.csv")
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
# write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
# write.csv(e,"e.csv")
# pca = prcomp(t(e), center=center, scale.=scale)
# variance = pca$sdev^2/sum(pca$sdev^2)
# scores = pca$x
# loadings = pca$rotation
# init_pcaPlotData = jsonlite::toJSON(
#   scores[,c(1,2)],auto_unbox = TRUE
# )
p_names = colnames(p)
f_names = colnames(f)
e_scale = t(scale(t(e),center=center,scale=scale))
View(p)
View(f)
dim(e_scale)
e_scale = cbind(e_scale,matrix(0,nrow=nrow(e_scale),ncol = nrow(e_scale)-ncol(e_scale)))
class(e_scale)
dim(e_scale)
A = matrix(c(1,2,3,4,5,6),nrow =2)
svd(A)
library(WCMC.Stat.iPCA)
A = matrix(c(1,2,0,3,4,0,5,6,0),nrow =3)
svd(A)
(svd(A)$v)
t(svd(A)$v)
t(t(svd(A)$v[-3,]))
t(svd(A)$v[-3,])
svd(A)$v[-3,]
t(svd(A)$v[-3,])
t(t(svd(A)$v)[-3,])
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
input='	class	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI	ECOLI
label		AAT_ECOLI	ACEA_ECOLI	ACEK_ECOLI	ACKA_ECOLI	ADI_ECOLI	ALKH_ECOLI	AMPD_ECOLI	AMY2_ECOLI	APT_ECOLI	ARAC_ECOLI	ASG1_ECOLI	BTUR_ECOLI	CAFA_ECOLI	CAIB_ECOLI	CFA_ECOLI	CHEA_ECOLI	CHEB_ECOLI	CHEW_ECOLI	CHEY_ECOLI	CHEZ_ECOLI	CRL_ECOLI	CSPA_ECOLI	CYNR_ECOLI	CYPB_ECOLI	CYPC_ECOLI	CYSB_ECOLI	CYSE_ECOLI	DAPD_ECOLI	DCP_ECOLI	DDLA_ECOLI	DDLB_ECOLI	DEOC_ECOLI	DLDH_ECOLI	EFG_ECOLI	EFTS_ECOLI	EFTU_ECOLI	ENO_ECOLI	FABB_ECOLI	FES_ECOLI	G3P1_ECOLI	G3P2_ECOLI	G6PI_ECOLI	GCVA_ECOLI	GLNA_ECOLI	GLPD_ECOLI	GLYA_ECOLI	GSHR_ECOLI	GT_ECOLI	HEM6_ECOLI	HEMN_ECOLI	HPRT_ECOLI	IF1_ECOLI	IF2_ECOLI	ILVY_ECOLI	IPYR_ECOLI	KAD_ECOLI	KDSA_ECOLI	LEU3_ECOLI	LON_ECOLI	LPLA_ECOLI	LYSR_ECOLI	MALQ_ECOLI	MALZ_ECOLI	MASY_ECOLI	METB_ECOLI	METC_ECOLI	METK_ECOLI	METR_ECOLI	METX_ECOLI	MURF_ECOLI	NADA_ECOLI	NFRC_ECOLI	NHAR_ECOLI	NIRD_ECOLI	OMPR_ECOLI	OTC1_ECOLI	OTC2_ECOLI	PEPE_ECOLI	PFLA_ECOLI	PFLB_ECOLI	PGK_ECOLI	PHOB_ECOLI	PHOH_ECOLI	PMBA_ECOLI	PNP_ECOLI	PROB_ECOLI	PT1A_ECOLI	PT1_ECOLI	PTCA_ECOLI	PTCB_ECOLI	PTFA_ECOLI	PTGA_ECOLI	PTHA_ECOLI	PTHP_ECOLI	PTKA_ECOLI	PTKB_ECOLI	PTNA_ECOLI	PTWB_ECOLI	PTWX_ECOLI	RHAR_ECOLI	RHAS_ECOLI	RIMI_ECOLI	RIMJ_ECOLI	RIML_ECOLI	RNB_ECOLI	RNC_ECOLI	RND_ECOLI	RNE_ECOLI	SERC_ECOLI	SLYD_ECOLI	SOXS_ECOLI	SYA_ECOLI	SYC_ECOLI	SYD_ECOLI	SYE_ECOLI	SYFA_ECOLI	SYFB_ECOLI	SYGA_ECOLI	SYGB_ECOLI	SYH_ECOLI	SYI_ECOLI	SYK1_ECOLI	SYK2_ECOLI	SYL_ECOLI	SYM_ECOLI	SYP_ECOLI	SYQ_ECOLI	SYR_ECOLI	SYS_ECOLI	SYT_ECOLI	SYV_ECOLI	SYW_ECOLI	SYY_ECOLI	THGA_ECOLI	THIK_ECOLI	TYRB_ECOLI	UBIC_ECOLI	UGPQ_ECOLI	USPA_ECOLI	UVRB_ECOLI	UVRC_ECOLI	XGPT_ECOLI	XYLA_ECOLI	EMRA_ECOLI	AAS_ECOLI	AMPE_ECOLI	ARAE_ECOLI	ARAH_ECOLI	AROP_ECOLI	ATKB_ECOLI	ATP6_ECOLI	BETT_ECOLI	CODB_ECOLI	CYDA_ECOLI	CYOC_ECOLI	CYOD_ECOLI	DCTA_ECOLI	DHG_ECOLI	DHSC_ECOLI	DHSD_ECOLI	DPPC_ECOLI	DSBB_ECOLI	ENVZ_ECOLI	EXBB_ECOLI	FRDC_ECOLI	FRDD_ECOLI	FTSW_ECOLI	GABP_ECOLI	GALP_ECOLI	GLNP_ECOLI	GLPT_ECOLI	GLTP_ECOLI	KDGL_ECOLI	KGTP_ECOLI	LACY_ECOLI	LGT_ECOLI	LLDP_ECOLI	LNT_ECOLI	LSPA_ECOLI	LYSP_ECOLI	MALF_ECOLI	MALG_ECOLI	MCP3_ECOLI	MSBB_ECOLI	MTR_ECOLI	NANT_ECOLI	NHAA_ECOLI	NHAB_ECOLI	PHEP_ECOLI	PHOR_ECOLI	PNTA_ECOLI	POTE_ECOLI	PROP_ECOLI	PSTA_ECOLI	PSTC_ECOLI	PTAA_ECOLI	PTBA_ECOLI	PTCC_ECOLI	PTDA_ECOLI	PTFB_ECOLI	PTGB_ECOLI	PTHB_ECOLI	PTMA_ECOLI	PTOA_ECOLI	PTTB_ECOLI	RODA_ECOLI	SECE_ECOLI	SECF_ECOLI	SECY_ECOLI	TNAB_ECOLI	XYLE_ECOLI	YCEE_ECOLI	EXBD_ECOLI	FTSL_ECOLI	FTSN_ECOLI	FTSQ_ECOLI	MOTB_ECOLI	TOLA_ECOLI	TOLQ_ECOLI	EMRB_ECOLI	ATKC_ECOLI	NFRB_ECOLI	NLPA_ECOLI	CYOA_ECOLI	ATKA_ECOLI	BCR_ECOLI	CADB_ECOLI	CAIT_ECOLI	CPXA_ECOLI	CRED_ECOLI	CYDB_ECOLI	CYOB_ECOLI	CYOE_ECOLI	DMSC_ECOLI	DPPB_ECOLI	DSBD_ECOLI	FEPD_ECOLI	FEPG_ECOLI	FTSH_ECOLI	GLTS_ECOLI	KEFC_ECOLI	KUP_ECOLI	MCP1_ECOLI	MCP2_ECOLI	MCP4_ECOLI	MELB_ECOLI	MOTA_ECOLI	NUPC_ECOLI	NUPG_ECOLI	PNTB_ECOLI	PTKC_ECOLI	RHAT_ECOLI	SECD_ECOLI	SECG_ECOLI	TEHA_ECOLI	TYRP_ECOLI	UHPB_ECOLI	TONB_ECOLI	LEP_ECOLI	FADL_ECOLI	FHUA_ECOLI	LAMB_ECOLI	NFRA_ECOLI	NMPC_ECOLI	OMPA_ECOLI	OMPC_ECOLI	OMPF_ECOLI	OMPX_ECOLI	PHOE_ECOLI	TSX_ECOLI	BTUB_ECOLI	CIRA_ECOLI	FECA_ECOLI	FEPA_ECOLI	FHUE_ECOLI	OMPP_ECOLI	OMPT_ECOLI	TOLC_ECOLI	PA1_ECOLI	MULI_ECOLI	NLPB_ECOLI	NLPE_ECOLI	PAL_ECOLI	SLP_ECOLI	AGP_ECOLI	AMY1_ECOLI	ARAF_ECOLI	ASG2_ECOLI	BGLX_ECOLI	C562_ECOLI	CN16_ECOLI	CYPH_ECOLI	CYSP_ECOLI	DGAL_ECOLI	DPPA_ECOLI	DSBA_ECOLI	DSBC_ECOLI	ECOT_ECOLI	ECPD_ECOLI	FECB_ECOLI	FECR_ECOLI	FEPB_ECOLI	FIMC_ECOLI	GGT_ECOLI	GLNH_ECOLI	GLPQ_ECOLI	HTRA_ECOLI	LIVJ_ECOLI	LIVK_ECOLI	MALE_ECOLI	MALM_ECOLI	MEPA_ECOLI	MODA_ECOLI	NRFA_ECOLI	NRFF_ECOLI	OPPA_ECOLI	OSMY_ECOLI	POTD_ECOLI	POTF_ECOLI	PPA_ECOLI	PPB_ECOLI	PROX_ECOLI	PSTS_ECOLI	PTR_ECOLI	RBSB_ECOLI	SPEA_ECOLI	SUBI_ECOLI	TBPA_ECOLI	TESA_ECOLI	TOLB_ECOLI	TORA_ECOLI	TREA_ECOLI	UGPB_ECOLI	USHA_ECOLI	XYLF_ECOLI	YTFQ_ECOLI
mcg		-0.101	0.843	-0.258	-0.326	0.483	-0.506	0.348	0.528	0.551	0.056	0.056	0.438	0.124	-0.146	0.506	0.438	0.236	0.011	0.483	0.079	0.101	0.303	-0.146	0.326	0.191	0.348	0.438	0.528	0.034	0.034	-0.191	0.236	-0.258	0.101	0.461	0.191	0.348	-0.461	0.281	0.146	0.258	0.326	0.101	0.371	-0.371	0.618	0.011	0.034	0.056	0.483	0.169	0.348	0.506	0.483	-0.056	-0.213	-0.146	0.101	0.011	0.056	0.011	-0.169	0.191	0.596	-0.056	0.461	0.438	-0.169	0.438	0.213	0.416	0.011	0.169	0.011	0.461	0.056	-0.079	0.079	0.011	0.348	0.236	0.079	0.348	0.236	0.191	0.101	-0.124	-0.169	-0.124	-0.191	0.236	0.101	0.079	0.326	0.303	-0.438	0.213	-0.281	-0.461	-0.146	0.146	0.461	0.146	0.258	0.461	0.416	0.011	0.034	-0.101	-0.056	0.281	0.236	0.213	0.146	0.146	0.079	0.236	-0.146	0.438	0.348	0.438	0.461	0.618	0.91	-0.371	0.236	0.371	0.101	0.483	0.169	1	0.124	0.326	0.393	0.618	0.191	0.326	0.416	0.101	0.506	0.011	0.393	0.64	0.865	0.011	-0.416	0.483	0.236	0.034	-0.034	0.393	-0.169	0.348	-0.236	0.73	0.101	-0.64	-0.888	-0.079	-0.213	-0.079	-0.124	-0.618	-0.056	0.258	-0.438	-0.213	-0.056	-0.416	-0.101	0.303	-0.663	0.258	-0.011	-0.596	-0.124	-0.483	-0.348	-0.865	0.236	-0.416	-0.573	-0.348	0.64	-0.663	0.551	-1	-0.573	0.73	-0.371	0.258	-0.416	0.079	0.236	-0.303	-0.326	-0.146	-0.124	-0.348	0.169	-0.303	0.191	0.124	0.213	0.303	-0.371	-0.079	0.753	0.303	-0.528	-0.551	-0.169	-0.034	0.191	1	0.775	0.326	-0.371	-0.416	-0.596	-0.91	-0.416	-0.685	-0.573	-0.618	-0.775	-0.865	-0.551	-0.775	-0.753	-0.685	-0.326	-0.506	-0.483	-0.438	-0.708	-0.888	-0.73	-0.82	-0.303	-0.416	-0.393	-0.933	-0.82	-0.955	-0.056	-0.708	-0.573	-0.438	-0.82	-0.64	-0.101	-0.978	-0.888	-0.416	-0.933	-0.775	-0.281	-0.753	-0.753	-0.416	-0.506	-0.371	-0.506	-0.663	-0.64	-0.685	-0.73	-0.663	-0.528	-0.258	-0.461	-0.169	-0.438	-0.348	-0.551	-0.416	-0.596	-0.528	-0.73	-0.483	-0.596	-0.506	-0.528	-0.663	-0.573	-0.483	-0.64	-0.461	-0.618	-0.506	-0.506	-0.506	-0.416	-0.281	-0.596	-0.483	-0.506	-0.438	-0.528	0.281	-0.573	-0.416	-0.663	-0.416	-0.416	-0.416	-0.596	-0.528	-0.438	-0.663	-0.685	-0.416	-0.551	-0.573	-0.551	-0.438	-0.416	-0.483	-0.551	-0.528	-0.438	-0.393	-0.708	-0.438	0.348	-0.393	-0.258	-0.551	-0.551	0.034	-0.663	-0.596	-0.371	-0.326	-0.663
gvh		0.69	0.429	0.429	0.214	0.619	0.452	0.714	0.571	0.333	0.429	0.81	0.238	0.619	0.19	0.357	0.429	0.31	0.738	0.429	0.024	0.31	0.833	0.095	1	0.452	0.5	0.429	0.167	0.5	0.452	0.476	0.595	0.167	0.69	0.548	0.095	0.143	0.262	0.381	0.286	0.31	0.5	0.19	0.476	0.31	0.476	0.548	0.429	0.548	0.595	0.143	0.667	0.524	0	0.262	0.262	0.5	0.548	0.571	0.476	0.048	0.524	0.405	0.667	0.69	0.357	0.5	0.024	0.5	0.238	0.762	0.167	0.19	0.381	0.357	0.667	0.381	0.238	0.714	0.405	0.714	0.357	0.262	0.071	0.048	0.286	0.214	0.333	0.167	0.381	0.286	0.381	0.357	0.31	0.262	-0.429	0.5	0.095	0.071	0.286	0.429	0.024	0.762	0.262	0.571	0.19	0.214	0.619	0.357	0.714	0.595	0.548	0.571	0.667	0.333	0.167	0.381	0.214	0.167	0.714	0.762	0.405	0.452	0.643	0.524	0.167	0.595	0.286	0.571	0.333	0.476	0.643	0.333	0.667	0.143	0.381	0.5	0.429	0.405	0.571	0.548	0.381	0.357	-0.071	0.143	0.262	0.238	0.214	0.429	-0.071	0.548	0.452	0.262	0.262	-0.214	0.19	0.524	0.333	0.31	0.214	0.405	-0.19	0.286	0.071	0.048	0	0.024	-0.024	0.19	0.381	0.19	0.333	0.31	0.429	0.429	0.5	0.119	-0.071	0.5	0.167	0.095	0.429	0.19	0.167	-0.286	0.286	0.071	0.286	0.357	0.143	0.5	-0.167	0.167	-0.214	0.571	0.048	0.429	0.024	0.286	0.262	0.071	0.262	0.405	0.167	0.333	-0.19	0.214	0.19	0.524	0.167	0.452	0.095	-0.024	0.31	0.167	0.214	0.167	0.262	-0.405	0.143	0.119	0.214	0.071	0.452	0.381	0.405	0.238	0.357	0.524	0.595	0.5	0.69	0.5	0.238	0.286	-0.31	0.214	0.071	0.333	-0.048	0.381	0.381	0.452	0.119	0.214	0.286	0.405	0.119	0.31	0.143	0.762	-0.071	0.381	0.095	0.167	0.071	0.095	0.476	0.333	-0.238	-0.262	-0.714	-0.405	-0.619	-0.762	-0.619	-0.429	0.024	-0.476	-0.429	-0.238	0.167	-0.548	0.024	-0.429	-0.024	0.214	-0.31	-0.119	0.024	0.214	0.286	0.071	0.214	0.214	-0.071	-0.667	-0.476	0.024	-0.667	-0.286	-0.548	-0.071	-1	-0.024	-0.31	-0.381	-0.548	-0.333	-0.571	0.452	-0.143	0.024	-0.571	-0.667	-0.595	-0.31	-0.667	-0.476	-0.619	0.262	-0.619	-0.167	-0.214	-0.31	-0.524	-0.19	-0.524	-0.31	-0.024	-0.214	-0.476	-0.476	-0.357	-0.548	0.452	-0.595	0.095	-0.19	-0.167	-0.024	0.048	0.024	-0.048	-0.071	-0.381
lip		1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	-1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	-1	-1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	-1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	-1	1	1	1	1	-1	-1	-1	-1	-1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
chg		1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	-1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1	1
aac		-0.273	-0.227	-0.114	-0.182	-0.25	0.182	0	-0.159	-0.045	-0.273	-0.295	0	-0.045	-0.045	-0.091	-0.045	0.136	-0.25	0.114	0.114	0.136	-0.659	0.068	-0.273	-0.091	-0.091	-0.068	-0.136	-0.205	-0.068	0	0.136	0.227	0.045	0.295	0.068	0.045	-0.341	0.205	-0.091	-0.182	-0.341	-0.023	-0.136	-0.091	-0.023	-0.25	0.114	-0.318	0.023	0.045	-0.023	0.205	0.159	0.5	0.364	0.205	-0.023	0.318	-0.227	-0.136	0.068	-0.091	-0.045	-0.159	-0.227	0.068	0.045	0.023	-0.273	0.227	-0.068	0.045	0.045	0.159	-0.091	-0.023	-0.159	0.023	-0.091	0.068	-0.023	0.068	-0.318	0.023	-0.182	-0.114	0.159	0.386	0.636	-0.182	0.159	-0.136	0.182	0.341	-0.023	0.318	0.159	0.227	-0.318	-0.432	-0.432	-0.227	-0.205	0.136	0	0.114	0.25	-0.114	-0.273	-0.364	-0.159	-0.045	0.023	0.023	-0.318	0.068	-0.205	0.159	-0.136	0.114	-0.114	-0.205	0.068	-0.114	0	-0.023	0.045	0.023	0.045	0.045	0.136	-0.114	-0.614	-0.114	-0.205	0.023	0.182	-0.25	0.045	0	0.159	-0.227	-0.114	0.023	-0.159	-0.341	-0.318	-0.318	-0.091	-0.159	-0.477	-0.614	-0.295	-0.682	-0.477	-0.205	-0.091	-0.364	0.091	-0.159	0.295	-0.159	-0.318	0.25	-0.091	-0.273	-0.182	-0.341	-0.205	-0.295	-0.25	-0.023	-0.386	-0.614	-0.5	-0.341	-0.227	-0.386	-0.523	-0.477	-0.273	-0.227	0.25	-0.5	-0.295	-0.159	-0.273	-0.432	-0.227	-0.045	-0.5	-0.205	-0.182	-0.273	-0.25	-0.295	-0.614	-0.023	0.114	-0.295	-0.159	-0.182	-0.386	-0.136	-0.045	-0.182	-0.318	-0.318	-0.614	-0.295	-0.409	0.182	0.136	0.205	0.068	0.045	1	-0.455	-0.455	-0.205	-0.227	0.091	-0.159	-0.477	-0.5	-0.477	-0.341	-0.045	-0.295	-0.455	-0.455	-0.227	-0.227	-0.091	-0.136	-0.25	-0.159	0.045	-0.341	-0.091	-0.318	-0.341	-0.295	-0.386	-0.409	-0.136	-0.591	-0.523	-0.295	-0.295	-0.273	-0.182	-0.705	-0.455	-0.432	-0.136	0.864	-0.023	-0.886	-0.477	-0.659	-0.159	-0.682	-0.295	-0.955	-0.886	-1	-0.705	-0.909	-0.75	-0.5	-0.636	-0.591	-0.75	-0.75	-0.795	-0.545	-0.659	0.159	-0.227	-0.182	-0.5	-0.409	0.045	-0.273	0.227	-0.318	-0.068	0.614	-0.045	-0.227	-0.159	0.205	0.114	0.091	0.295	0.432	-0.114	0.136	-0.205	-0.068	-0.114	-0.114	0.114	0.091	-0.364	0.091	0.023	0.159	-0.136	0.205	0.114	0.318	0.045	-0.045	0.068	-0.045	0.068	-0.045	-0.114	-0.136	-0.068	0	0.159	-0.182	-0.045	0.023	0.068	-0.432	-0.182	-0.068	-0.091	0	0.045	0.295
alm1		0.567	0.34	0.299	0.134	0.546	0.278	0.588	0.485	0.01	0.691	0.505	0.711	0.567	0.402	0.732	0.155	0.567	-0.01	0.485	0.629	0.608	0.959	0.361	0.835	0.608	0.155	0.381	0.402	0.34	0.423	0.526	0.34	0.299	0.34	0.67	0.278	0.464	0.443	0.485	0.608	0.402	0.216	0.258	0.381	0.34	0.196	-0.072	0.485	0.753	0.381	0.196	1	0.258	-0.031	0.732	0.381	0.32	0.381	0.381	0.361	0.113	0.485	0.093	0.567	0.381	-0.01	0.381	0.093	0.526	0.237	0.546	0.526	0.32	0.546	0.485	0.526	0.546	0.155	0.505	0.278	0.34	0.423	0.588	0.423	0.134	0.052	0.113	0.32	0.588	0.464	0.34	0.505	0.567	0.629	0.485	0.34	0.361	0.485	0.299	0.423	0.546	0.361	0.732	0.691	0.443	0.402	0.278	0.134	0.443	0.649	0.938	0.052	0.443	0.464	0.649	0.649	0.361	0.773	0.196	0.196	0.402	0.588	0.443	0.464	0.34	0.299	0.608	0.34	0.526	0.258	0.072	0.361	0.608	0.485	0.299	0.402	0.691	0.526	0.608	0.464	-0.01	0.278	0.505	-0.835	0.093	-0.629	-0.753	-0.691	-0.485	-0.711	-0.526	-0.402	-0.278	-0.546	-0.134	-0.629	-0.814	-0.402	-0.546	-0.732	-0.794	-0.835	-0.299	-0.402	-0.546	-0.546	-0.608	-0.505	-0.691	-0.567	-0.67	-0.753	-0.753	-0.464	-0.381	-0.258	-0.299	-0.32	-0.402	-0.794	-0.567	-0.711	-0.526	0.258	-0.278	-0.546	-0.423	-0.546	-0.381	-0.32	-0.278	-0.32	-0.485	-0.505	-0.732	-0.588	-0.216	-0.196	-0.608	-0.505	-0.381	-0.361	-0.423	-0.402	-0.567	-0.732	-0.526	-0.423	-0.876	-0.485	-0.505	-0.505	-0.505	-0.567	-0.32	-0.32	-0.196	-0.588	-0.443	-1	-0.01	-0.505	0.093	-0.629	-0.526	-0.608	-0.505	-0.464	-0.629	-0.526	-0.381	-0.485	-0.258	-0.381	-0.443	-0.402	-0.546	-0.546	-0.32	-0.443	-0.526	-0.567	-0.773	-0.732	-0.505	-0.464	-0.155	-0.711	-0.196	-0.546	-0.485	-0.402	-0.443	-0.835	-0.423	-0.608	-0.299	0.052	-0.443	0.237	0.216	0.031	0.381	-0.052	-0.031	-0.134	-0.113	-0.031	-0.052	0.134	0.32	-0.052	0.278	0.381	-0.155	0.258	0.134	0.175	0.237	-0.052	-0.093	-0.155	-0.134	-0.072	-0.052	-0.01	0.216	0.01	0.093	-0.072	0.134	0.052	0.299	0.01	0.093	-0.052	0.278	0.196	0.196	-0.278	0.485	0.01	-0.381	0.052	0.093	0.258	0.237	-0.052	0.155	0.134	-0.113	-0.01	0.155	0.258	-0.67	-0.113	0.258	0.423	0.031	0.155	0.237	0.32	0.052	0.258	0.258	0.237	0.32	0.299	0.031	0.072	0.052	-0.34	0.34	0.258	0.196	-0.031
alm2		0.293	0.111	0.071	0.273	0.293	0.071	0.313	0.212	-0.152	0.394	0.253	0.414	0.293	0.293	0.434	-0.051	0.293	-0.172	0.232	0.354	1	0.717	0.131	0.535	0.535	-0.051	0.152	0.172	0.111	0.172	0.273	0.111	0.071	0.111	0.374	0.071	0.212	0.192	0.232	0.414	0.172	0.01	0.051	0.152	0.172	-0.01	-0.232	0.212	0.455	0.131	0.273	0.657	0.051	-0.192	0.475	0.152	0.091	0.152	0.131	0.131	-0.091	0.232	-0.091	0.293	0.131	-0.192	0.152	-0.091	0.273	0.03	0.293	0.273	0.091	0.596	0.232	0.273	0.293	-0.03	0.253	0.071	0.111	0.172	0.313	0.172	-0.071	-0.131	-0.071	0.152	0.313	0.212	0.111	0.455	0.495	0.354	0.212	0.232	0.131	0.333	0.434	0.172	0.293	0.131	0.434	0.414	0.192	0.172	0.192	-0.051	0.192	0.495	0.596	-0.131	0.455	0.212	0.374	0.374	0.131	0.475	-0.01	-0.01	0.152	0.313	0.212	0.212	0.111	0.071	0.333	0.111	0.253	0.051	-0.111	0.131	0.333	0.212	0.071	0.172	0.394	0.253	0.333	0.212	-0.192	0.131	0.253	0.253	-0.091	-0.697	-0.798	-0.616	-0.576	-0.758	-0.596	-0.475	-0.394	-0.616	-0.273	-0.697	-0.859	-0.495	-0.616	-0.778	-0.778	-0.859	-0.414	-0.515	-0.616	-0.475	-0.677	-0.596	-0.737	-0.636	-0.717	-0.798	-0.798	-0.556	-0.495	-0.394	-0.333	-0.434	-0.495	-0.818	-0.636	-0.677	-0.616	0.03	-0.394	-0.636	-0.535	-0.475	-0.495	-0.051	-0.394	-0.434	-0.576	-0.596	-0.636	-0.657	-0.354	-0.333	-0.677	-0.596	-0.495	-0.455	-0.515	-0.495	-0.657	-0.778	-0.434	-0.374	-0.899	-0.576	-0.596	-0.596	0.535	0.657	0.111	0.576	0.313	0.354	-0.333	-1	0.293	-0.596	0.394	-0.697	-0.596	-0.677	-0.596	-0.556	-0.414	-0.596	-0.495	-0.556	-0.374	-0.495	-0.535	-0.515	-0.495	-0.495	-0.374	-0.535	-0.616	-0.636	-0.818	-0.778	-0.596	-0.556	-0.253	-0.758	-0.333	-0.616	-0.576	-0.495	-0.515	-0.414	-0.535	-0.677	-0.374	0.333	-0.374	0.414	0.434	0.495	0.333	0.253	0.414	0.414	0.394	0.596	0.697	0.455	0.091	0.333	0.232	0.475	-0.051	0.576	0.434	0.273	0.394	0.98	0.273	0.394	0.677	0.434	0.273	0.131	0.273	0.374	-0.03	0.576	0.333	0.535	0.232	0.01	0.333	0.212	0.131	0.495	0.616	-0.131	0.232	0.051	0.596	0.172	0.313	0.616	0.212	0.354	0.152	0.192	0.152	0.333	0.293	0.515	-0.717	0.475	0.596	0.414	0.293	-0.051	0.313	0.232	-0.091	0.212	0.111	0.03	0.192	0.394	0.495	0.172	-0.131	0.394	0.354	0.232	0.253	-0.051
'
library(pacman)
pacman::p_load(data.table,jsonlite)
input = gsub("\r","",input)
# For some reason, the '\t' at the beginning of the first row is missing. Have to replace them back.
# Check how many '\t' each row has. Then add the missing '\t's to the first element of cfile.
cfile = strsplit(input,"\n")[[1]]
ts = sapply(regmatches(cfile, gregexpr("\t", cfile)),length)
t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]
ts.first.row = ts[1]
cfile
t.mode-ts.first.row
cfile[[1]] = paste0(paste0(rep('\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')
df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,"\t")[[1]]})),stringsAsFactors = F)
col_start = t.mode-ts.first.row + 1
row_start = which(diff(df1[,1]=='')==-1) + 1
col_start
row_start
t.mode
ts.first.row
col_start = t.mode-ts.first.row + 1
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE),
p)[-1,]
rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
View(p)
col_start = 2
row_start = which(diff(df1[,1]=='')==-1) + 1
if(length(row_start)==0 & col_start ==1){
row_start = 1
}else if(length(row_start)==0){
stop("There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.")
}
p = t(df1[1:(row_start-1),col_start:ncol(df1)])
colnames(p) = p[1,]
p = cbind(data.frame("sample index" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE),
p)[-1,]
rownames(p) = df1[row_start,(col_start+1):ncol(df1)]
p = data.frame(p,stringsAsFactors = F,check.names = F)
# write.csv(p,"p.csv")
head(p)
f = df1[row_start:nrow(df1),1:col_start]
if(class(f) == "character"){ #in case there is only one column of feature index.
name.temp = f[1]
f = data.frame(f[-1])
colnames(f) = name.temp
}else{
colnames(f) = f[1,]
f = f[-1,]
}
rownames(f) = 1:nrow(f)
# write.csv(f,"f.csv")
e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]
e = apply(e,2,as.numeric)
colnames(e) = rownames(p)
rownames(e) = rownames(f)
p_names = colnames(p)
f_names = colnames(f)
center
scale
center=F
scale=F
e_scale = t(scale(t(e),center=center,scale=scale))
nrow(e_scale)>ncol(e_scale)
sampleLessThanFeature = F
ori_nrow  = ori_ncol = NA
sampleLessThanFeature
e
pca = prcomp(e_scale,center = F,scale. = F)
pca$sdev^2/sum(pca$sdev^2)
View(e)
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
class(p)
View(p)
f_names
View(f)
data_frame_e = data.frame(e_scale,stringsAsFactors = F)
head(data_frame_e)
dim(e_scale)
data_frame_e = data.frame(t(e_scale),stringsAsFactors = F)
head(data_frame_e)
colnames(data_frame_e) = f[,1]
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
dim(e)
apply(e,1,max,na.rm=T)
class(e)
View(e)
paste0(c(1,2,3),c(4,5,6),c(7,8,9))
f[,1]
paste0(c(1,2,3),4,c(7,8,9))
paste0(
f[,1],'<br/><span style="font-weight:normal;">',apply(e,1,max,na.rm=T),'</span>'
)
e_Top = paste0(
f[,1],'<br/><span style="font-weight:normal;">',apply(e,1,max,na.rm=T),'</span>'
)
e_Bot = paste0(
f[,1],'<br/><span style="font-weight:normal;">',apply(e,1,min,na.rm=T),'</span>'
)
e_Top
e_Bot
dataframe_e = data.frame(scale(t(e)),stringsAsFactors = F)
head(dataframe_e)
colnames(dataframe_e) = f[,1]
dataframe_e
?scale
rescale(c(1,2),c(0,8))
library(plotrix)
pacman::p_load(data.table,jsonlite,plotrix)
rescale(c(1,2),c(0,8))
rescale(c(1,2,4),c(0,8))
rescale(t(e))
rescale(c(1,NA,4),c(0,8))
dataframe_e = data.frame(apply(t(e),2,rescale,newrange=c(0,1)),stringsAsFactors = F)
colnames(dataframe_e) = f[,1]
head(dataframe_e)
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
dim(t(e))
names(p)
temp = data.frame(apply(t(e),2,rescale,newrange=c(0,100)),stringsAsFactors = F)
dataframe_e = list()
for(i in 1:ncol(e)){
dataframe_e[[i]] = list(
name = p[i,1],
data = temp[i,]
)
}
dataframe_e
toJSON(dataframe_e)
temp[i,]
toJSON(dataframe_e,auto_unbox = T)
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
temp[i,]
p[i,1]
as.numeric(temp[i,])
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
apply(e,1,max,na.rm=T)
signif(apply(e,1,max,na.rm=T))
signif(apply(e,1,max,na.rm=T),2)
?signif
signif(2,2)
signif(2.111,2)
?round
round(3,2)
round(3.1,2)
round(3.11,2)
round(3.11111,2)
library(WCMC.Stat.iPCA)
library(WCMC.Stat.iPCA)
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
library(opencpu);
opencpu$browse("library/WCMC.Stat.iPCA/www")
