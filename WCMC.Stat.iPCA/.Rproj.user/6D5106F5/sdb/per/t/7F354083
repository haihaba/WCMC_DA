{
    "collab_server" : "",
    "contents" : "var myApp = angular.module('myApp', ['ngRoute', 'ui.bootstrap']);\n\nmyApp.controller('ctr',function($scope){\n  $scope.run = function(){\n/*\n$('#container').highcharts({\n        chart       : { type    : 'line', alignTicks: false },\n        title       : { text: 'Parallel Coordindates' },\n        subtitle    : { text: 'Proof of Concept Using the classic \\'cars\\' data set' },\n        legend      : { enabled : false },\n        tooltip     : { enabled : false },\n    plotOptions : {\n\t\t\tseries : {\n\t\t\t\tcolor : 'rgba(204,204,204,.25)',\n                events: {\n                    mouseOver: function() {\n                        this.graph.attr('stroke', 'rgba(0,156,255,1)');\n                        this.group.toFront();\n                    },\n                    mouseOut: function() {\n                        this.graph.attr('stroke', 'rgba(204,204,204,0.25)');\n                    }\n                }\n\t\t\t}\n\t\t},\n\t\txAxis  : [{\n\t\t\topposite: true,\n\t\t\ttickInterval:1,\n\t\t\tlineWidth:0,\n\t\t\ttickWidth:0,\n\t\t\tgridLineWidth:1,\n\t\t\tgridLineColor:'rgba(0,0,0,0.5)',\n\t\t\tgridZIndex: 5,\n\t\t\tlabels: {\n\t\t\t\ty:-17,\n\t\t\t\tformatter: function() {\n\t\t\t\t\treturn catsTop[this.value];\n\t\t\t\t},\n\t\t\t\tstyle: {\n\t\t\t\t\tfontWeight:'bold'\n\t\t\t\t}\n\t\t\t}\n\t\t},{\n\t\t\tlinkedTo:0,\n\t\t\tlineWidth:0,\n\t\t\ttickWidth:0,\n\t\t\tgridLineWidth:0,\n\t\t\tlabels: {\n                y:10,\n\t\t\t\tformatter: function() {\n\t\t\t\t\treturn catsBot[this.value];\n\t\t\t\t},\n\t\t\t\tstyle: {\n\t\t\t\t\tfontWeight:'bold'\n\t\t\t\t}\n\t\t\t}\n\t\t}],\n\t\tyAxis  : {\n\t\t\tmin:0,\n\t\t\tmax:100,\n\t\t\tgridLineWidth:0,\n            tickWidth:0,\n\t\t\tlineWidth:0,\n\t\t\tlabels: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t},\n       \tseries : carData\n\t});\nchart = $('#container').highcharts();\n\n\nfunction getCarData(cars) {\n  var mpgs \t= [];\n\tvar cyls \t= [];\n\tvar dsps \t= [];\n\tvar hps \t= [];\n\tvar lbss \t= [];\n\tvar accs \t= [];\n\tvar years \t= [];\n\tvar mins \t= {};\n\tvar maxs \t= {};\n\tvar ranks \t= {};\n\tvar pData \t= {};\n\n\tvar mpg = [];\n\tvar cyl= [];\n\tvar dsp= [];\n\tvar hp= [];\n\tvar lbs= [];\n\tvar acc= [];\n\tvar year= [];\n\n\t$.each(cars, function(i, car) {\nconsole.log(car);\n\t\tif(typeof car.mpg \t!= 'undefined') { mpgs.push(car.mpg\t\t); }\n\t\tif(typeof car.cyl \t!= 'undefined') { cyls.push(car.cyl\t\t); }\n\t\tif(typeof car.dsp \t!= 'undefined') { dsps.push(car.dsp\t\t); }\n\t\tif(typeof car.hp  \t!= 'undefined') { hps.push(car.hp\t\t); }\n\t\tif(typeof car.lbs \t!= 'undefined') { lbss.push(car.lbs\t\t); }\n\t\tif(typeof car.acc \t!= 'undefined') { accs.push(car.acc\t\t); }\n\t\tif(typeof car.year \t!= 'undefined') { years.push(car.year\t); }\n\n\t\tmpg \t= typeof car.mpg \t!= 'undefined' ? car.mpg \t: null;\n\t\tcyl \t= typeof car.cyl \t!= 'undefined' ? car.cyl \t: null;\n\t\tdsp \t= typeof car.dsp \t!= 'undefined' ? car.dsp \t: null;\n\t\thp \t\t= typeof car.hp \t!= 'undefined' ? car.hp \t: null;\n\t\tlbs \t= typeof car.lbs \t!= 'undefined' ? car.lbs \t: null;\n\t\tacc \t= typeof car.acc \t!= 'undefined' ? car.acc \t: null;\n\t\tyear \t= typeof car.year \t!= 'undefined' ? car.year \t: null;\n\n\t\tpData[car.name] = [];\n\t\tpData[car.name].push(\n\t\t\t{name : 'cyl',  value : cyl },\n\t\t\t{name : 'dsp',  value : dsp },\n\t\t\t{name : 'lbs',  value : lbs },\n\t\t\t{name : 'hp',   value : hp  },\n\t\t\t{name : 'acc',  value : acc },\n\t\t\t{name : 'mpg',  value : mpg },\n\t\t\t{name : 'year', value : year}\n\t\t);\n\n\t});\n\n\tranks['mpg' ] = percentileRank(mpgs );\n\tranks['cyl' ] = percentileRank(cyls );\n\tranks['dsp' ] = percentileRank(dsps );\n\tranks['hp'  ] = percentileRank(hps  );\n\tranks['lbs' ] = percentileRank(lbss );\n\tranks['acc' ] = percentileRank(accs, true );\n\tranks['year'] = percentileRank(years);\n\n\tmins['mpg' ] = Math.min.apply(null, mpgs );\n\tmins['cyl' ] = Math.min.apply(null, cyls );\n\tmins['dsp' ] = Math.min.apply(null, dsps );\n\tmins['hp'  ] = Math.min.apply(null, hps  );\n\tmins['lbs' ] = Math.min.apply(null, lbss );\n\tmins['acc' ] = Math.min.apply(null, accs );\n\tmins['year'] = Math.min.apply(null, years);\n\n\tmaxs['mpg' ] = Math.max.apply(null, mpgs );\n\tmaxs['cyl' ] = Math.max.apply(null, cyls );\n\tmaxs['dsp' ] = Math.max.apply(null, dsps );\n\tmaxs['hp'  ] = Math.max.apply(null, hps  );\n\tmaxs['lbs' ] = Math.max.apply(null, lbss );\n\tmaxs['acc' ] = Math.max.apply(null, accs );\n\tmaxs['year'] = Math.max.apply(null, years);\n\n\tvar catsTop = [\n\t\t'Cylinders<br/><span style=\"font-weight:normal;\">'+maxs['cyl']+'</span>',\n    \t'Displacement<br/><span style=\"font-weight:normal;\">'+maxs['dsp']+'</span>',\n    \t'Lbs<br/><span style=\"font-weight:normal;\">'+maxs['lbs']+'</span>',\n        'HP<br/><span style=\"font-weight:normal;\">'+maxs['hp']+'</span>',\n        'Acceleration<br/><span style=\"font-weight:normal;\">'+mins['acc']+'</span>',\n        'Mpg<br/><span style=\"font-weight:normal;\">'+maxs['mpg']+'</span>',\n        'Year<br/><span style=\"font-weight:normal;\">19'+maxs['year']+'</span>'\n\t];\n\tvar catsBot = [\n       \t'Cylinders<br/><span style=\"font-weight:normal;\">'+mins['cyl']+'</span>',\n        'Displacement<br/><span style=\"font-weight:normal;\">'+mins['dsp']+'</span>',\n        'Lbs<br/><span style=\"font-weight:normal;\">'+mins['lbs']+'</span>',\n        'HP<br/><span style=\"font-weight:normal;\">'+mins['hp']+'</span>',\n        'Acceleration<br/><span style=\"font-weight:normal;\">'+maxs['acc']+'</span>',\n        'Mpg<br/><span style=\"font-weight:normal;\">'+mins['mpg']+'</span>',\n    \t'Year<br/><span style=\"font-weight:normal;\">19'+mins['year']+'</span>'\n\t];\n\n\tvar carData = [];\n\tvar i = 0;\n\t$.each(pData, function(car, measures) {\n\t\tcarData[i] = {};\n\t\tcarData[i].name = car;\n\t\tcarData[i].data = [];\n\t\tvar val;\n\t\t$.each(measures, function() {\n\t\t\tvar val = typeof ranks[this.name][this.value] != 'undefined' ? ranks[this.name][this.value] : null;\n\t\t\tcarData[i].data.push(val);\n\t\t});\n\t\ti++;\n\t});\n    rData = {};\n    rData.carData = carData;\n    rData.catsTop = catsTop;\n    rData.catsBot = catsBot;\n    return rData;\n\n\n}\n//crude percentile ranking\nfunction percentileRank(data, reverse=false) {\n\tdata.sort(numSort);\n\tif(reverse === true) {\n\t\tdata.reverse();\n\t}\n\tvar len   = data.length;\n\tvar sData = {};\n\t$.each(data, function(i, point) {\n\t\tsData[point] = (i / (len / 100));\n\t});\n\treturn sData;\n}\n//because .sort() doesn't sort numbers correctly\nfunction numSort(a,b) {\n    return a - b;\n}*/\n\n\n\n\n\n\n\n\n    //$('#output').empty();\n    //$(\"#output\").html(\"<p>No output yet.</p>\")\n    //$(\"#outputpanelheader\").addClass(\"collapsed\")\n\t\t//$(\"#output\").removeClass(\"in\");\n\n    var loadSpinner = showSpinner(txt='Computing..');\n    var txtinput = $(\"#rawinput\").val().trim();\n    var req = ocpu.call(\"mainApp\",{input:txtinput,center:$('#center').is(':checked'),scale:$('#scale').is(':checked')}, function(session) {//calls R function:\n\t\t\tsession.getObject(function(obj){\n\t\t\t  $scope.$apply(function(){\n\t\t\t    //$scope.variance = obj.variance;\n\t\t\t    //$scope.scores = obj.scores;\n\t\t\t    //$scope.loadings = obj.loadings;\n\t\t\t    //$scope.init_pcaPlotData = obj.init_pcaPlotData;\n\t\t\t    $scope.p_names = obj.p_names;\n\t\t\t    $scope.f_names = obj.f_names;\n\t\t\t    $scope.e = obj.e;\n\t\t\t    $scope.f = obj.f;\n\t\t\t    $scope.p = obj.p;\n\t\t\t    $scope.e_Top = obj.e_Top;\n\t\t\t    $scope.e_Bot = obj.e_Bot;\n\t\t\t    $scope.dataframe_e = JSON.parse(obj.dataframe_e);\n\t\t\t    $scope.sampleLessThanFeature = obj.sampleLessThanFeature[0];\n\t\t\t    $scope.ori_nrow = obj.ori_nrow[0];\n\t\t\t  })\n\n\t\t\t  result = obj; //!!!\n\t\t\t  dataframe_e = $scope.dataframe_e\n        pca = $scope.prcomp($scope.e,sampleLessThanFeature=$scope.sampleLessThanFeature,ori_nrow=$scope.ori_nrow) // !!! var\n        $scope.scorePlot(pca,p=$scope.p,color=null,xaxisPC=1,yaxisPC=2);\n\n\n$('#container').highcharts({\n        chart       : { type    : 'line', alignTicks: false },\n        title       : { text: 'Parallel Coordindates' },\n        subtitle    : { text: 'Proof of Concept Using the classic \\'cars\\' data set' },\n        legend      : { enabled : false },\n        tooltip     : { enabled : false },\n    plotOptions : {\n\t\t\tseries : {\n\t\t\t\tcolor : 'rgba(204,204,204,.25)',\n                events: {\n                    mouseOver: function() {\n                        this.graph.attr('stroke', 'rgba(0,156,255,1)');\n                        this.group.toFront();\n                    },\n                    mouseOut: function() {\n                        this.graph.attr('stroke', 'rgba(204,204,204,0.25)');\n                    }\n                }\n\t\t\t}\n\t\t},\n\t\txAxis  : [{\n\t\t\topposite: true,\n\t\t\ttickInterval:1,\n\t\t\tlineWidth:0,\n\t\t\ttickWidth:0,\n\t\t\tgridLineWidth:1,\n\t\t\tgridLineColor:'rgba(0,0,0,0.5)',\n\t\t\tgridZIndex: 5,\n\t\t\tlabels: {\n\t\t\t\ty:-17,\n\t\t\t\tformatter: function() {\n\t\t\t\t\treturn $scope.e_Top[this.value];\n\t\t\t\t},\n\t\t\t\tstyle: {\n\t\t\t\t\tfontWeight:'bold'\n\t\t\t\t}\n\t\t\t}\n\t\t},{\n\t\t\tlinkedTo:0,\n\t\t\tlineWidth:0,\n\t\t\ttickWidth:0,\n\t\t\tgridLineWidth:0,\n\t\t\tlabels: {\n                y:10,\n\t\t\t\tformatter: function() {\n\t\t\t\t\treturn $scope.e_Bot[this.value];\n\t\t\t\t},\n\t\t\t\tstyle: {\n\t\t\t\t\tfontWeight:'bold'\n\t\t\t\t}\n\t\t\t}\n\t\t}],\n\t\tyAxis  : {\n\t\t\tmin:0,\n\t\t\tmax:100,\n\t\t\tgridLineWidth:0,\n            tickWidth:0,\n\t\t\tlineWidth:0,\n\t\t\tlabels: {\n\t\t\t\tenabled: false\n\t\t\t}\n\t\t},\n       \tseries : $scope.dataframe_e\n\t});\n  chart2 = $('#container').highcharts();\n\n  \t\t\t})\n  \t\t})\n\t\t.done(function(){\n        $(\"#outputpanelheader\").removeClass(\"collapsed\")\n        $(\"#output\").addClass( \"in\" );\n        //$(\"#output\").html( \"<b style='color:#3C763D;'>Success!</b><br /><div class='well well-sm'><p></p></div><a type='button' href='\"+file_address+\"' class='btn btn-primary' target='_blank'  download='iPCA-normalization.csv'>Download</a>\" );\n\t\t})\n\t\t.fail(function() {\n\t\t  //$('#output').empty();\n      //$(\"#output\").html(\"<p>No output yet.</p>\")\n      //$(\"#outputpanelheader\").addClass(\"collapsed\")\n\t\t  //$(\"#output\").removeClass(\"in\");\n\t\t  alert(\"Error: \" + req.responseText)})\n\t\t.always(function(){hideSpinner(loadSpinner);});//ocpu.call\n\n\n\n\n\n  }\n\n  $scope.height = 500\n  $scope.width = 750\n  $scope.xaxisOptions = [1,2,3,4,5]\n  $scope.yaxisOptions = [1,2,3,4,5]\n  $scope.xaxis = 1\n  $scope.yaxis = 2\n  $scope.plotType = 'score'\n\n\n\n\n\n  $scope.prcomp = function(e, sampleLessThanFeature,ori_nrow){ // rows are features and columns are samples.\n\n    var e_t = numeric.transpose(e) // transpose\n    var svd = numeric.svd(e_t) // SVD\n    //var scores = numeric.dot(svd.U, numeric.diag(svd.S)) // scores.\n    //var loadings = svd.V //loadings\n    var lambdas = svd.S\n    var lambdas_2 = numeric.mul(lambdas,lambdas)\n    var cumsum_lambda_2 = lambdas_2.reduce((a,b) => a+b,0)\n\n    var var_exp = [];\n    for(var i=0;i<lambdas_2.length;i++){\n      var_exp[i] = lambdas_2[i]/cumsum_lambda_2\n    }\n\n    var scores = numeric.dot(svd.U, numeric.diag(svd.S));\n    var loadings = svd.V;\n    var var_exp = var_exp;\n\n    if(sampleLessThanFeature){ //numeric.js cannot deal with n<p problem. Have to do some trick.\n        scores = scores.slice(0,ori_nrow)\n        loadings = numeric.transpose(numeric.transpose(loadings).slice(0,ori_nrow))\n        var_exp = var_exp.slice(0,ori_nrow)\n    }\n\n    var result = {\n      scores:scores, // scores.\n      loadings:loadings,//loadings\n      var_exp:var_exp //variance explained\n    }\n\n    ooo = result;\n\n    return result;\n  }\n\n\n  $scope.scorePlot = function(pca,p,color = null, xaxisPC = 1, yaxisPC = 2){\n    if(color===null){\n        var series = [{name: 'samples',\n                  color: 'rgba(0,0,0,1)',\n                  data:[]\n                 }]\n        for(var i=0;i<p.length;i++){\n          series[0].data.push(\n            [pca.scores[i][xaxisPC],pca.scores[i][yaxisPC]]\n          )\n        }\n    }else{\n        var series = [];\n        var distinct_color_groups = [];\n        var unique = {};\n\n\n        for(var i in p){\n          if( typeof(unique[p[i][color]]) == \"undefined\"){\n            distinct_color_groups.push(p[i][color]);\n          }\n          unique[p[i][color]] = 0;\n        }\n\n\n        var num_colors = distinct_color_groups.length\n        if(num_colors>12){\n          var colors = palette('tol-rainbow', num_colors);\n        }else{\n          var colors = palette('tol', num_colors);\n        }\n        for(var i=0;i<num_colors;i++){\n          series[i] = {\n            name : distinct_color_groups[i],\n            color : '#'+colors[i],\n            marker:{symbol:'circle'},\n            data : []\n          }\n        }\n        for(var i=0;i<p.length;i++){\n         var index = $.inArray(p[i][color], distinct_color_groups)\n         series[index].data.push(\n           [pca.scores[i][xaxisPC],pca.scores[i][yaxisPC]]\n         )\n        }\n    }\n\n\n   chart = Highcharts.chart('score',{\n                  chart: {\n                            type: 'scatter',\n                            zoomType: 'xy',\n                            style: {\n                              fontFamily: 'serif'\n                            }\n                          },\n                  title: {\n                      text: 'PCA Score Plot'\n                  },\n                  subtitle: {\n                            text: 'PC'+xaxisPC + '  vs ' + 'PC'+yaxisPC\n                        },\n                  xAxis: {\n                      title: {\n                          enabled: true,\n                          text: \"PC\"+xaxisPC+\" (\"+(pca.var_exp[xaxisPC-1]*100).toFixed(2)+\"%)\"\n                      },\n                      startOnTick: true,\n                      endOnTick: true\n                  },\n                  yAxis: {\n                      title: {\n                          enabled: true,\n                          text: \"PC\"+yaxisPC+\" (\"+(pca.var_exp[yaxisPC-1]*100).toFixed(2)+\"%)\"\n                      },\n                      startOnTick: true,\n                      endOnTick: true\n                  },\n                  legend: {\n                    enabled: num_colors<=12,\n                    layout: 'horizontal',\n                    align: 'center',\n                    backgroundColor: (Highcharts.theme && Highcharts.theme.legendBackgroundColor) || '#FFFFFF'\n                  },\n                  plotOptions: {\n                    scatter: {\n                        marker: {\n                            radius: 5,\n                            states: {\n                                hover: {\n                                    enabled: true,\n                                    lineColor: 'rgb(100,100,100)'\n                                }\n                            }\n                        },\n                        states: {\n                            hover: {\n                                marker: {\n                                    enabled: false\n                                }\n                            }\n                        },\n                        tooltip: {\n                            headerFormat: '<b>{series.name}</b><br>',\n                            pointFormat: '{point.x:.2f} @PC'+xaxisPC+', {point.y:.2f} @PC'+yaxisPC\n                        }\n                    }\n                  },\n                  series: series\n                })\n\n\n\n  }\n\n\n  $scope.dataRelatedUpdate = function(){\n    $scope.scorePlot(pca,p=$scope.p,color=$scope.color,xaxisPC=$scope.xaxis,yaxisPC=$scope.yaxis);\n  }\n\n})\n\n\n\n\n\n$(function(){\n$( \"#codeToggle\" ).click(function() {\n  $( \"#code\" ).toggle( \"fast\");\n});\n\n\n\n\n})\n",
    "created" : 1487467468083.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "189|46|200|0|\n202|23|204|0|\n381|76|494|2|\n",
    "hash" : "361578699",
    "id" : "7F354083",
    "lastKnownWriteTime" : 1487624138,
    "last_content_update" : 1487624138043,
    "path" : "~/GitHub/WCMC_DA/WCMC.Stat.iPCA/inst/www/WCMC.Stat.iPCA.js",
    "project_path" : "inst/www/WCMC.Stat.iPCA.js",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "js"
}