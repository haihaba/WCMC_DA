{
    "collab_server" : "",
    "contents" : "# Some useful keyboard shortcuts for package authoring:\n#\n#   Build and Reload Package:  'Ctrl + Shift + B'\n#   Check Package:             'Ctrl + Shift + E'\n#   Test Package:              'Ctrl + Shift + T'\nmainApp = function(input,\n                   center,\n                   scale){\n  library(pacman)\n  pacman::p_load(data.table,jsonlite,plotrix)\n  input = gsub(\"\\r\",\"\",input)\n  # For some reason, the '\\t' at the beginning of the first row is missing. Have to replace them back.\n  # Check how many '\\t' each row has. Then add the missing '\\t's to the first element of cfile.\n  cfile = strsplit(input,\"\\n\")[[1]]\n\n  ts = sapply(regmatches(cfile, gregexpr(\"\\t\", cfile)),length)\n  t.mode = unique(ts)[which.max(tabulate(match(ts, unique(ts))))]\n  ts.first.row = ts[1]\n  cfile[[1]] = paste0(paste0(rep('\\t',t.mode-ts.first.row),collapse = ''),cfile[[1]],collapse = '')\n\n\n  df1 = as.data.frame(do.call(rbind,lapply(cfile,function(x){strsplit(x,\"\\t\")[[1]]})),stringsAsFactors = F)\n\n  col_start = t.mode-ts.first.row + 1\n  row_start = which(diff(df1[,1]=='')==-1) + 1\n  if(length(row_start)==0 & col_start ==1){\n    row_start = 1\n  }else if(length(row_start)==0){\n    stop(\"There is an error in the input format. Please click the '!' icon (next to 'Example Data File') for more information.\")\n  }\n\n  p = t(df1[1:(row_start-1),col_start:ncol(df1)])\n  colnames(p) = p[1,]\n  p = cbind(data.frame(\"sample index\" = c(1,as.character(df1[row_start,(col_start+1):ncol(df1)])),check.names = FALSE),\n            p)[-1,]\n\n  rownames(p) = df1[row_start,(col_start+1):ncol(df1)]\n  p = data.frame(p,stringsAsFactors = F,check.names = F)\n  # write.csv(p,\"p.csv\")\n\n  f = df1[row_start:nrow(df1),1:col_start]\n\n  if(class(f) == \"character\"){ #in case there is only one column of feature index.\n    name.temp = f[1]\n    f = data.frame(f[-1])\n    colnames(f) = name.temp\n  }else{\n    colnames(f) = f[1,]\n    f = f[-1,]\n  }\n  rownames(f) = 1:nrow(f)\n\n  # write.csv(f,\"f.csv\")\n\n  e = df1[(row_start+1):nrow(df1),(col_start+1):ncol(df1)]\n  e = apply(e,2,as.numeric)\n  colnames(e) = rownames(p)\n  rownames(e) = rownames(f)\n  # write.csv(e,\"e.csv\")\n\n  p_names = colnames(p)\n  f_names = colnames(f)\n\n  e_scale = t(scale(t(e),center=center,scale=scale))\n\n  if(nrow(e_scale)>ncol(e_scale)){\n    sampleLessThanFeature = T\n    ori_nrow = nrow(e)\n    ori_ncol = ncol(e)\n    e_scale = cbind(e_scale,matrix(0,nrow=nrow(e_scale),ncol = nrow(e_scale)-ncol(e_scale)))\n  }else{\n    sampleLessThanFeature = F\n    ori_nrow  = ori_ncol = NA\n  }\n\n\n\n  # server work.\n  # for parallel coordinate.\n  {\n    e_Top = paste0(\n      f[,1],'<br/><span style=\"font-weight:normal;\">',round(apply(e,1,max,na.rm=T),2),'</span>'\n    )\n    e_Bot = paste0(\n      f[,1],'<br/><span style=\"font-weight:normal;\">',round(apply(e,1,min,na.rm=T),2),'</span>'\n    )\n\n    temp = data.frame(apply(t(e),2,rescale,newrange=c(0,100)),stringsAsFactors = F)\n    colnames(temp) = f[,1]\n    dataframe_e = list()\n    for(i in 1:ncol(e)){\n      dataframe_e[[i]] = list(\n        name = p[i,1],\n        data = as.numeric(temp[i,])\n      )\n    }\n  }\n\n\n  result = list(\n    # variance=variance,\n                # scores = scores,\n                # loadings = loadings,\n                # init_pcaPlotData = init_pcaPlotData,\n                p_names = p_names,\n                f_names = f_names,\n                e = e_scale,\n                f = f,\n                p = p,\n                e_Top = e_Top,\n                e_Bot =e_Bot,\n                dataframe_e = toJSON(dataframe_e,auto_unbox = T),\n                sampleLessThanFeature = sampleLessThanFeature,\n                ori_nrow= ori_nrow,\n                ori_ncol= ori_ncol\n                )\n\n\n\n\n  return(result)\n}\n",
    "created" : 1487492621534.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4085234854",
    "id" : "85C93A1F",
    "lastKnownWriteTime" : 1487624273,
    "last_content_update" : 1487624273194,
    "path" : "~/GitHub/WCMC_DA/WCMC.Stat.iPCA/R/mainApp.R",
    "project_path" : "R/mainApp.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}